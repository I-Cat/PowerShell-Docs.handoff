{"nodes":[{"pos":[5,58],"content":"title: Catalog Cmdlets author:  jaimeo contributor: ?","source":"title: Catalog Cmdlets\nauthor:  jaimeo\ncontributor: ?"},{"content":"Catalog Cmdlets","pos":[65,80]},{"pos":[84,261],"content":"We have added two new cmdlets in <bpt id=\"p1\">[</bpt>Microsoft.Powershell.Secuity<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/hh847877.aspx)</ept> module to generate and validate windows catalog files.","source":"We have added two new cmdlets in [Microsoft.Powershell.Secuity](https://technet.microsoft.com/en-us/library/hh847877.aspx) module to generate and validate windows catalog files."},{"content":"New-FileCatalog","pos":[265,280]},{"content":"New File catalog creates a windows catalog file for set of folders and files.","pos":[316,393]},{"content":"Catalog file contains hashes for all files in specified paths.","pos":[394,456]},{"content":"User can distribute the set of folders along with corresponding catalog file representing those folders.","pos":[457,561]},{"content":"It can be used by receiver of content to validate if any changes are made to the folders since catalog creation time.","pos":[562,679]},{"content":"We support creating catalog version 1 and 2.","pos":[834,878]},{"content":"Version 1 uses SHA1 hashing algorithm to create file hashes and version 2 uses SHA256.","pos":[879,965]},{"content":"Catalog version 2 is not supported on <bpt id=\"p1\">*</bpt>Windows Server 2008 R2<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>Windows 7<ept id=\"p2\">*</ept>.","pos":[966,1045],"source":" Catalog version 2 is not supported on *Windows Server 2008 R2* and *Windows 7*."},{"content":"It is recommended to use catalog version 2 if using platforms <bpt id=\"p1\">*</bpt>Windows 8<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>Windows Server 2012<ept id=\"p2\">*</ept> and above.","pos":[1046,1153],"source":" It is recommended to use catalog version 2 if using platforms *Windows 8*, *Windows Server 2012* and above."},{"content":"To use this command on an existing module, specify the CatalogFilePath and Path variables to match the location of the module manifest.","pos":[1157,1292]},{"content":"In the example below, the module manifest is in C:\\Program Files\\Windows PowerShell\\Modules\\Pester.","pos":[1293,1392]},{"content":"This creates the catalog file.","pos":[1433,1463]},{"pos":[1541,1725],"content":"To verify the integrity of catalog file (Pester.cat in above exmaple) it should be signed using <bpt id=\"p1\">[</bpt>Set-AuthenticodeSignature<ept id=\"p1\">](https://technet.microsoft.com/library/hh849819.aspx)</ept> cmdlet.","source":"To verify the integrity of catalog file (Pester.cat in above exmaple) it should be signed using [Set-AuthenticodeSignature](https://technet.microsoft.com/library/hh849819.aspx) cmdlet."},{"content":"Test-FileCatalog","pos":[1731,1747]},{"content":"Test File catalog validates the catalog representing a set of folders.","pos":[1783,1853]},{"content":"This cmdlet compares all the files hashes and their relative paths found in <bpt id=\"p1\">*</bpt>catalog<ept id=\"p1\">*</ept> with ones on <bpt id=\"p2\">*</bpt>disk<ept id=\"p2\">*</ept>.","pos":[2060,2166],"source":"This cmdlet compares all the files hashes and their relative paths found in *catalog* with ones on *disk*."},{"content":"If it detects any mismatch between file hashes and paths it gives status as <bpt id=\"p1\">*</bpt>ValidationFailed<ept id=\"p1\">*</ept>.","pos":[2167,2262],"source":" If it detects any mismatch between file hashes and paths it gives status as *ValidationFailed*."},{"content":"User can retrieve all this information using <bpt id=\"p1\">*</bpt>-Detailed<ept id=\"p1\">*</ept> flag.","pos":[2263,2325],"source":" User can retrieve all this information using *-Detailed* flag."},{"content":"It also displays signing status of catalog in <bpt id=\"p1\">*</bpt>Signature<ept id=\"p1\">*</ept> filed which is same as calling <bpt id=\"p2\">[</bpt>Get-AuthenticodeSignature<ept id=\"p2\">](https://technet.microsoft.com/en-us/library/hh849805.aspx)</ept> cmdlet on catalog file.","pos":[2326,2525],"source":" It also displays signing status of catalog in *Signature* filed which is same as calling [Get-AuthenticodeSignature](https://technet.microsoft.com/en-us/library/hh849805.aspx) cmdlet on catalog file."},{"content":"User can also skip any file during validation by using <bpt id=\"p1\">*</bpt>-FilesToSkip<ept id=\"p1\">*</ept> parameter.","pos":[2526,2607],"source":" \nUser can also skip any file during validation by using *-FilesToSkip* parameter."}],"content":"\n---\ntitle: Catalog Cmdlets\nauthor:  jaimeo\ncontributor: ?\n---\n# Catalog Cmdlets  \n\nWe have added two new cmdlets in [Microsoft.Powershell.Secuity](https://technet.microsoft.com/en-us/library/hh847877.aspx) module to generate and validate windows catalog files.  \n\nNew-FileCatalog \n--------------------------------\n\nNew File catalog creates a windows catalog file for set of folders and files. Catalog file contains hashes for all files in specified paths. User can distribute the set of folders along with corresponding catalog file representing those folders. It can be used by receiver of content to validate if any changes are made to the folders since catalog creation time.    \n\n```PowerShell\nNew-FileCatalog [-CatalogFilePath] <string> [[-Path] <string[]>] [-CatalogVersion <int>] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\nWe support creating catalog version 1 and 2. Version 1 uses SHA1 hashing algorithm to create file hashes and version 2 uses SHA256. Catalog version 2 is not supported on *Windows Server 2008 R2* and *Windows 7*. It is recommended to use catalog version 2 if using platforms *Windows 8*, *Windows Server 2012* and above.  \n\nTo use this command on an existing module, specify the CatalogFilePath and Path variables to match the location of the module manifest. In the example below, the module manifest is in C:\\Program Files\\Windows PowerShell\\Modules\\Pester. \n\n![](../../images/NewFileCatalog.jpg)\n\nThis creates the catalog file. \n\n![](../../images/CatalogFile1.jpg)  \n\n![](../../images/CatalogFile2.jpg) \n\nTo verify the integrity of catalog file (Pester.cat in above exmaple) it should be signed using [Set-AuthenticodeSignature](https://technet.microsoft.com/library/hh849819.aspx) cmdlet.   \n\n\nTest-FileCatalog \n--------------------------------\n\nTest File catalog validates the catalog representing a set of folders. \n\n```PowerShell\nTest-FileCatalog [-CatalogFilePath] <string> [[-Path] <string[]>] [-Detailed] [-FilesToSkip <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n![](../../images/TestFileCatalog.jpg)\n\nThis cmdlet compares all the files hashes and their relative paths found in *catalog* with ones on *disk*. If it detects any mismatch between file hashes and paths it gives status as *ValidationFailed*. User can retrieve all this information using *-Detailed* flag. It also displays signing status of catalog in *Signature* filed which is same as calling [Get-AuthenticodeSignature](https://technet.microsoft.com/en-us/library/hh849805.aspx) cmdlet on catalog file. \nUser can also skip any file during validation by using *-FilesToSkip* parameter. \n\n"}