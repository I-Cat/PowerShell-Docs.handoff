{"nodes":[{"content":"Modules with compatible PowerShell Editions","pos":[2,45]},{"content":"Starting with version 5.1, PowerShell is available in different editions which denote varying feature sets and platform compatibility.","pos":[46,180]},{"pos":[184,400],"content":"<bpt id=\"p1\">**</bpt>Desktop Edition:<ept id=\"p1\">**</ept> Built on .NET Framework and provides compatibility with scripts and modules targeting versions of PowerShell running on full footprint editions of Windows such as Server Core and Windows Desktop.","source":"**Desktop Edition:** Built on .NET Framework and provides compatibility with scripts and modules targeting versions of PowerShell running on full footprint editions of Windows such as Server Core and Windows Desktop."},{"pos":[403,610],"content":"<bpt id=\"p1\">**</bpt>Core Edition:<ept id=\"p1\">**</ept> Built on .NET Core and provides compatibility with scripts and modules targeting versions of PowerShell running on reduced footprint editions of Windows such as Nano Server and Windows IoT.","source":"**Core Edition:** Built on .NET Core and provides compatibility with scripts and modules targeting versions of PowerShell running on reduced footprint editions of Windows such as Nano Server and Windows IoT."},{"content":"The running edition of PowerShell is shown in the PSEdition property of $PSVersionTable.","pos":[615,703]},{"content":"Module authors can declare their modules to be compatible with one or more PowerShell editions using the CompatiblePSEditions module manifest key.","pos":[1160,1306]},{"content":"This key is only supported on PowerShell 5.1 or later.","pos":[1307,1361]},{"pos":[1362,1495],"content":"<bpt id=\"p1\">*</bpt>NOTE<ept id=\"p1\">*</ept> Once a module manifest is specified with the CompatiblePSEditions key, it can not be imported on lower versions of PowerShell.","source":"*NOTE* Once a module manifest is specified with the CompatiblePSEditions key, it can not be imported on lower versions of PowerShell."},{"content":"When getting a list of available modules, you can filter the list by PowerShell edition.","pos":[2039,2127]},{"content":"Module authors can publish a single module targeting to either or both PowerShell editions (Desktop and Core)","pos":[2531,2640]},{"content":"A single module can work on both Desktop and Core editions, in that module author has to add required logic in either RootModule or in the module manifest using $PSEdition variable.","pos":[2643,2824]},{"content":"Modules can have two sets of compiled dlls targeting both CoreCLR and FullCLR.","pos":[2825,2903],"source":"\nModules can have two sets of compiled dlls targeting both CoreCLR and FullCLR."},{"content":"Here are the couple of options to package your module with logic for loading proper dlls.","pos":[2904,2993],"source":"\nHere are the couple of options to package your module with logic for loading proper dlls."},{"content":"Option 1: Packaging a module for targeting multiple versions and multiple editions of PowerShell","pos":[2999,3095]},{"content":"Module folder contents","pos":[3102,3124]},{"content":"Microsoft.Windows.PowerShell.ScriptAnalyzer.BuiltinRules.dll","pos":[3127,3187]},{"content":"Microsoft.Windows.PowerShell.ScriptAnalyzer.dll","pos":[3191,3238]},{"content":"PSScriptAnalyzer.psd1","pos":[3242,3263]},{"content":"PSScriptAnalyzer.psm1","pos":[3266,3287]},{"content":"ScriptAnalyzer.format.ps1xml","pos":[3290,3318]},{"content":"ScriptAnalyzer.types.ps1xml","pos":[3321,3348]},{"content":"coreclr\\Microsoft.Windows.PowerShell.ScriptAnalyzer.BuiltinRules.dll","pos":[3351,3419]},{"content":"coreclr\\Microsoft.Windows.PowerShell.ScriptAnalyzer.dll","pos":[3423,3478]},{"content":"en-US\\about_PSScriptAnalyzer.help.txt","pos":[3482,3519]},{"content":"en-US\\Microsoft.Windows.PowerShell.ScriptAnalyzer.dll-Help.xml","pos":[3522,3584]},{"content":"PSv3\\Microsoft.Windows.PowerShell.ScriptAnalyzer.BuiltinRules.dll","pos":[3587,3652]},{"content":"PSv3\\Microsoft.Windows.PowerShell.ScriptAnalyzer.dll","pos":[3656,3708]},{"content":"Settings\\CmdletDesign.psd1","pos":[3712,3738]},{"content":"Settings\\DSC.psd1","pos":[3741,3758]},{"content":"Settings\\ScriptFunctions.psd1","pos":[3761,3790]},{"content":"Settings\\ScriptingStyle.psd1","pos":[3793,3821]},{"content":"Settings\\ScriptSecurity.psd1","pos":[3824,3852]},{"content":"Contents of PSScriptAnalyzer.psd1 file","pos":[3859,3897]},{"content":"Contents of PSScriptAnalyzer.psm1 file","pos":[4159,4197]},{"content":"Below logic loads the required assemblies depending on the current edition or version.","pos":[4198,4284]},{"content":"Option 2: Use $PSEdition variable in the PSD1 file to load the proper DLLs and Nested/Required modules","pos":[5340,5442]},{"content":"In PS 5.1 or newer, $PSEdition global variable is allowed in the module manifest file.","pos":[5444,5530]},{"content":"Using this variable, module author can specify the conditional values in the module manifest file.","pos":[5531,5629],"source":"\nUsing this variable, module author can specify the conditional values in the module manifest file."},{"content":"$PSEdition variable can be referenced in restricted language mode or a Data section.","pos":[5630,5714]},{"pos":[5717,5878],"content":"<bpt id=\"p1\">*</bpt>NOTE<ept id=\"p1\">*</ept> Once a module manifest is specified with the CompatiblePSEditions key or uses $PSEdition variable, it can not be imported on lower versions of PowerShell.","source":"*NOTE* Once a module manifest is specified with the CompatiblePSEditions key or uses $PSEdition variable, it can not be imported on lower versions of PowerShell."},{"content":"Sample module manifest file with CompatiblePSEditions key","pos":[5886,5943]},{"content":"Module contents","pos":[6502,6517]},{"content":"PowerShell Gallery users can find the list of modules supported on a specific PowerShell Edition using tags PSEdition_Desktop and PSEditon_Core.","pos":[8922,9066]},{"content":"Modules without PSEdition_Desktop and PSEditon_Core tags are considered to work fine on PowerShell Desktop editions.","pos":[9067,9183]},{"content":"More details","pos":[9384,9396]},{"pos":[9401,9467],"content":"<bpt id=\"p1\">[</bpt>Scripts with PSEditions<ept id=\"p1\">](../script/scriptwithpseditionsupport.md)</ept>","source":"[Scripts with PSEditions](../script/scriptwithpseditionsupport.md)"},{"pos":[9472,9554],"content":"<bpt id=\"p1\">[</bpt>PSEditions support on PowerShellGallery<ept id=\"p1\">](../../psgallery/psgallery_pseditions.md)</ept>","source":"[PSEditions support on PowerShellGallery](../../psgallery/psgallery_pseditions.md)"},{"content":"[Update module manifest] (./psget_update-modulemanifest.md)","pos":[9559,9618]}],"content":"# Modules with compatible PowerShell Editions\nStarting with version 5.1, PowerShell is available in different editions which denote varying feature sets and platform compatibility.\n\n- **Desktop Edition:** Built on .NET Framework and provides compatibility with scripts and modules targeting versions of PowerShell running on full footprint editions of Windows such as Server Core and Windows Desktop.\n- **Core Edition:** Built on .NET Core and provides compatibility with scripts and modules targeting versions of PowerShell running on reduced footprint editions of Windows such as Nano Server and Windows IoT.\n\n## The running edition of PowerShell is shown in the PSEdition property of $PSVersionTable.\n```powershell\n$PSVersionTable\n\nName                           Value\n----                           -----\nPSVersion                      5.1.14300.1000\nPSEdition                      Desktop\nPSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}\nCLRVersion                     4.0.30319.42000\nBuildVersion                   10.0.14300.1000\nWSManStackVersion              3.0\nPSRemotingProtocolVersion      2.3\nSerializationVersion           1.1.0.1\n```\n\n## Module authors can declare their modules to be compatible with one or more PowerShell editions using the CompatiblePSEditions module manifest key. This key is only supported on PowerShell 5.1 or later.\n*NOTE* Once a module manifest is specified with the CompatiblePSEditions key, it can not be imported on lower versions of PowerShell.\n\n```powershell\nNew-ModuleManifest -Path .\\TestModuleWithEdition.psd1 -CompatiblePSEditions Desktop,Core -PowerShellVersion 5.1\n$moduleInfo = Test-ModuleManifest -Path \\TestModuleWithEdition.psd1\n$moduleInfo.CompatiblePSEditions\nDesktop\nCore\n\n$moduleInfo | Get-Member CompatiblePSEditions\n\n   TypeName: System.Management.Automation.PSModuleInfo\n\nName                 MemberType Definition\n----                 ---------- ----------\nCompatiblePSEditions Property   System.Collections.Generic.IEnumerable[string] CompatiblePSEditions {get;}\n\n```\nWhen getting a list of available modules, you can filter the list by PowerShell edition.\n```powershell\nGet-Module -ListAvailable -PSEdition Desktop\n\n    Directory: C:\\Program Files\\WindowsPowerShell\\Modules\n\n\nModuleType Version    Name                                ExportedCommands\n---------- -------    ----                                ----------------\nManifest   1.0        ModuleWithPSEditions\n\nGet-Module -ListAvailable -PSEdition Core | % CompatiblePSEditions\nDesktop\nCore\n\n```\n\n## Module authors can publish a single module targeting to either or both PowerShell editions (Desktop and Core) \n\nA single module can work on both Desktop and Core editions, in that module author has to add required logic in either RootModule or in the module manifest using $PSEdition variable.\nModules can have two sets of compiled dlls targeting both CoreCLR and FullCLR.\nHere are the couple of options to package your module with logic for loading proper dlls.\n\n### Option 1: Packaging a module for targeting multiple versions and multiple editions of PowerShell\n\n#### Module folder contents\n- Microsoft.Windows.PowerShell.ScriptAnalyzer.BuiltinRules.dll \n- Microsoft.Windows.PowerShell.ScriptAnalyzer.dll \n- PSScriptAnalyzer.psd1\n- PSScriptAnalyzer.psm1\n- ScriptAnalyzer.format.ps1xml\n- ScriptAnalyzer.types.ps1xml\n- coreclr\\Microsoft.Windows.PowerShell.ScriptAnalyzer.BuiltinRules.dll \n- coreclr\\Microsoft.Windows.PowerShell.ScriptAnalyzer.dll \n- en-US\\about_PSScriptAnalyzer.help.txt\n- en-US\\Microsoft.Windows.PowerShell.ScriptAnalyzer.dll-Help.xml\n- PSv3\\Microsoft.Windows.PowerShell.ScriptAnalyzer.BuiltinRules.dll \n- PSv3\\Microsoft.Windows.PowerShell.ScriptAnalyzer.dll \n- Settings\\CmdletDesign.psd1\n- Settings\\DSC.psd1\n- Settings\\ScriptFunctions.psd1\n- Settings\\ScriptingStyle.psd1\n- Settings\\ScriptSecurity.psd1\n\n#### Contents of PSScriptAnalyzer.psd1 file\n\n```powershell\n@{\n \n# Author of this module\nAuthor = 'Microsoft Corporation'\n\n# Script module or binary module file associated with this manifest.\nRootModule = 'PSScriptAnalyzer.psm1'\n\n# Version number of this module.\nModuleVersion = '1.6.1'\n\n# ---\n}\n```\n\n#### Contents of PSScriptAnalyzer.psm1 file\nBelow logic loads the required assemblies depending on the current edition or version.\n\n```powershell\n#\n# Script module for module 'PSScriptAnalyzer'\n#\nSet-StrictMode -Version Latest\n\n# Set up some helper variables to make it easier to work with the module\n$PSModule = $ExecutionContext.SessionState.Module\n$PSModuleRoot = $PSModule.ModuleBase\n\n# Import the appropriate nested binary module based on the current PowerShell version\n$binaryModuleRoot = $PSModuleRoot\n\n\nif (($PSVersionTable.Keys -contains \"PSEdition\") -and ($PSVersionTable.PSEdition -ne 'Desktop')) {\n    $binaryModuleRoot = Join-Path -Path $PSModuleRoot -ChildPath 'coreclr'\n}\nelse\n{\n    if ($PSVersionTable.PSVersion -lt [Version]'5.0') {\n        $binaryModuleRoot = Join-Path -Path $PSModuleRoot -ChildPath 'PSv3'\n    }    \n}\n\n$binaryModulePath = Join-Path -Path $binaryModuleRoot -ChildPath 'Microsoft.Windows.PowerShell.ScriptAnalyzer.dll'\n$binaryModule = Import-Module -Name $binaryModulePath -PassThru\n\n# When the module is unloaded, remove the nested binary module that was loaded with it\n$PSModule.OnRemove = {\n    Remove-Module -ModuleInfo $binaryModule\n} \n\n```\n\n### Option 2: Use $PSEdition variable in the PSD1 file to load the proper DLLs and Nested/Required modules\n\nIn PS 5.1 or newer, $PSEdition global variable is allowed in the module manifest file.\nUsing this variable, module author can specify the conditional values in the module manifest file. $PSEdition variable can be referenced in restricted language mode or a Data section. \n\n*NOTE* Once a module manifest is specified with the CompatiblePSEditions key or uses $PSEdition variable, it can not be imported on lower versions of PowerShell.\n\n\n#### Sample module manifest file with CompatiblePSEditions key\n\n```powershell\n@{ \n# - - -\n \n# Script module or binary module file associated with this manifest.\nRootModule = if($PSEdition -eq 'Core')\n{\n'coreclr\\MyCoreClrRM.dll'\n}\nelse # Desktop\n{\n'clr\\MyFullClrRM.dll'\n}\n \n# Supported PSEditions\nCompatiblePSEditions = 'Desktop', 'Core'\n \n# Modules to import as nested modules of the module specified in RootModule/ModuleToProcess\nNestedModules = if($PSEdition -eq 'Core')\n{\n'coreclr\\MyCoreClrNM1.dll',\n'coreclr\\MyCoreClrNM2.dll'\n}\nelse # Desktop\n{\n'clr\\MyFullClrNM1.dll',\n'clr\\MyFullClrNM2.dll'\n}\n \n# -- - -\n}\n```\n\n#### Module contents\n\n```powershell\n\nPS C:\\Users\\manikb\\Documents\\WindowsPowerShell\\Modules\\ModuleWithEditions> dir -Recurse\n \n    Directory: C:\\Users\\manikb\\Documents\\WindowsPowerShell\\Modules\\ModuleWithEditions\n \nMode                LastWriteTime         Length Name                                                                                \n----                -------------         ------ ----                                                                                \nd-----         7/5/2016   1:37 PM                clr                                                                                 \nd-----         7/5/2016   1:36 PM                coreclr                                                                             \n-a----         7/5/2016   1:34 PM           4906 ModuleWithEditions.psd1                                                             \n \n    Directory: C:\\Users\\manikb\\Documents\\WindowsPowerShell\\Modules\\ModuleWithEditions\\clr\n \nMode                LastWriteTime         Length Name                                                                                \n----                -------------         ------ ----                                                                                \n-a----         7/5/2016   1:35 PM              0 MyFullClrNM1.dll                                                                    \n-a----         7/5/2016   1:35 PM              0 MyFullClrNM2.dll                                                                    \n-a----         7/5/2016   1:35 PM              0 MyFullClrRM.dl                                                                      \n \n    Directory: C:\\Users\\manikb\\Documents\\WindowsPowerShell\\Modules\\ModuleWithEditions\\coreclr\n \nMode                LastWriteTime         Length Name                                                                                \n----                -------------         ------ ----                                                                                \n-a----         7/5/2016   1:35 PM              0 MyCoreClrNM1.dll                                                                    \n-a----         7/5/2016   1:35 PM              0 MyCoreClrNM2.dll                                                                    \n-a----         7/5/2016   1:35 PM              0 MyCoreClrRM.dl                                                                      \n```\n\n## PowerShell Gallery users can find the list of modules supported on a specific PowerShell Edition using tags PSEdition_Desktop and PSEditon_Core.\nModules without PSEdition_Desktop and PSEditon_Core tags are considered to work fine on PowerShell Desktop editions.\n\n```powershell\n\n# Find modules supported on PowerShell Desktop edition\nFind-Module -Tag PSEditon_Desktop\n\n# Find modules supported on PowerShell Core editions\nFind-Module -Tag PSEditon_Core\n\n```\n\n\n## More details\n### [Scripts with PSEditions](../script/scriptwithpseditionsupport.md)\n### [PSEditions support on PowerShellGallery](../../psgallery/psgallery_pseditions.md)\n### [Update module manifest] (./psget_update-modulemanifest.md)\n"}