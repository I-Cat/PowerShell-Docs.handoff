{"nodes":[{"pos":[12,49],"content":"Installing the Windows PowerShell SDK","needQuote":true,"nodes":[{"content":"Installing the Windows PowerShell SDK","pos":[0,37]}]},{"pos":[82,99],"content":"powershell,cmdlet","needQuote":true,"nodes":[{"content":"powershell,cmdlet","pos":[0,17]}]},{"content":"Installing the Windows PowerShell SDK","pos":[247,284]},{"content":"The following topic describes how to install the PowerShell SDK on different versions of Windows.","pos":[286,383]},{"content":"Installing Windows PowerShell 3.0 SDK for Windows 8 and Windows Server 2012","pos":[388,463]},{"content":"Windows PowerShell 3.0 is automatically installed with Windows 8 and Windows Server 2012.","pos":[465,554]},{"content":"In addition, you can download and install the reference assemblies for Windows PowerShell 3.0 as part of the Windows 8 SDK.","pos":[555,678],"source":"\nIn addition, you can download and install the reference assemblies for Windows PowerShell 3.0 as part of the Windows 8 SDK."},{"content":"These assemblies allow you to write cmdlets, providers, and host programs for Windows PowerShell 3.0.","pos":[679,780],"source":"\nThese assemblies allow you to write cmdlets, providers, and host programs for Windows PowerShell 3.0."},{"content":"When you install the Windows SDK for Windows 8, the Windows PowerShell assemblies are automatically installed in the reference assembly folder, in \\Program Files (x86)\\Reference Assemblies\\Microsoft\\WindowsPowerShell\\3.0.","pos":[781,1002],"source":"\nWhen you install the Windows SDK for Windows 8, the Windows PowerShell assemblies are automatically installed in the reference assembly folder, in \\Program Files (x86)\\Reference Assemblies\\Microsoft\\WindowsPowerShell\\3.0."},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Windows 8 SDK download site<ept id=\"p1\">](http://msdn.microsoft.com/windows/hardware/hh852363.aspx)</ept>.","pos":[1003,1121],"source":"\nFor more information, see the [Windows 8 SDK download site](http://msdn.microsoft.com/windows/hardware/hh852363.aspx)."},{"content":"Windows PowerShell code samples are also available on the Development Center.","pos":[1122,1199],"source":"\nWindows PowerShell code samples are also available on the Development Center."},{"content":"For more information, see the Desktop code sample page on the <bpt id=\"p1\">[</bpt>Dev center site<ept id=\"p1\">](http://code.msdn.microsoft.com/windowsdesktop/)</ept>.","pos":[1200,1328],"source":"\nFor more information, see the Desktop code sample page on the [Dev center site](http://code.msdn.microsoft.com/windowsdesktop/)."},{"content":"In addition, Windows PowerShell 3.0 is backwards-compatible with the Windows PowerShell 2.0 SDK, which includes a number of code samples.","pos":[1330,1467]},{"content":"For more information on how to download the Windows PowerShell 2.0 SDK, see below.","pos":[1468,1550],"source":"\nFor more information on how to download the Windows PowerShell 2.0 SDK, see below."},{"content":"(Note that while the 2.0 code samples are compatible with Windows 8 and Windows PowerShell 3.0, you cannot install Windows PowerShell 2.0 on a Windows 8 platform.)","pos":[1551,1714],"source":"\n(Note that while the 2.0 code samples are compatible with Windows 8 and Windows PowerShell 3.0, you cannot install Windows PowerShell 2.0 on a Windows 8 platform.)"},{"content":"Installing Windows PowerShell 3.0 SDK for Windows 7 and Windows Server 2008 R2","pos":[1718,1796]},{"content":"Windows 7 and Windows Server 2008 R2 automatically have PowerShell 2.0 installed.","pos":[1798,1879]},{"content":"In addition, you can install PowerShell 3.0 on these systems.","pos":[1880,1941],"source":"\nIn addition, you can install PowerShell 3.0 on these systems."},{"content":"(For more information, see <bpt id=\"p1\">[</bpt>Installing Windows PowerShell<ept id=\"p1\">](Installing-Windows-PowerShell.md)</ept>.).","pos":[1942,2037],"source":"\n(For more information, see [Installing Windows PowerShell](Installing-Windows-PowerShell.md).)."},{"content":"As described above, you can also install the Windows 8 SDK on Windows 7 and Windows Server 2008 R2.","pos":[2038,2137],"source":"\nAs described above, you can also install the Windows 8 SDK on Windows 7 and Windows Server 2008 R2."},{"content":"Installing Windows PowerShell 2.0 SDK for Windows 7, Vista, XP, Server 2003, and Server 2008","pos":[2142,2234]},{"content":"The Windows PowerShell 2.0 SDK provides the reference assemblies needed to write cmdlets, providers, and hosting applications, and it provides C# sample code that can be used as the starting point when you begin writing code.","pos":[2236,2461]},{"pos":[2463,2564],"content":"To install this SDK, see <bpt id=\"p1\">[</bpt>Windows PowerShell 2.0 SDK<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=184611)</ept>.","source":"To install this SDK, see [Windows PowerShell 2.0 SDK](http://go.microsoft.com/fwlink/?LinkId=184611)."},{"content":"Reference assemblies","pos":[2569,2589]},{"pos":[2591,2737],"content":"Reference assemblies are installed in the following location by default: <ph id=\"ph1\">`c:\\Program Files\\Reference Assemblies\\Microsoft\\WindowsPowerShell\\V1.0`</ph>.","source":"Reference assemblies are installed in the following location by default: `c:\\Program Files\\Reference Assemblies\\Microsoft\\WindowsPowerShell\\V1.0`."},{"pos":[2741,3013],"content":"**Note**: Code that is compiled against the Windows PowerShell 2.0 assemblies cannot be loaded into Windows PowerShell 1.0 installations.\nHowever, code that is compiled against the Windows PowerShell 1.0 assemblies can be loaded into Windows PowerShell 2.0 installations.","leadings":["",">"],"nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept>: Code that is compiled against the Windows PowerShell 2.0 assemblies cannot be loaded into Windows PowerShell 1.0 installations.","pos":[0,137],"source":"**Note**: Code that is compiled against the Windows PowerShell 2.0 assemblies cannot be loaded into Windows PowerShell 1.0 installations."},{"content":"However, code that is compiled against the Windows PowerShell 1.0 assemblies can be loaded into Windows PowerShell 2.0 installations.","pos":[138,271]}]},{"content":"Samples","pos":[3018,3025]},{"pos":[3027,3174],"content":"Code samples are installed in the following location by default: <ph id=\"ph1\">`C:\\Program Files\\Microsoft SDKs\\Windows\\v7.0\\Samples\\sysmgmt\\WindowsPowerShell\\`</ph>.","source":"Code samples are installed in the following location by default: `C:\\Program Files\\Microsoft SDKs\\Windows\\v7.0\\Samples\\sysmgmt\\WindowsPowerShell\\`."},{"content":"The following sections provide a brief description of what each sample does.","pos":[3176,3252]},{"content":"Cmdlet samples","pos":[3257,3271]},{"pos":[3272,3294],"content":"<bpt id=\"p1\">**</bpt>GetProcessSample01<ept id=\"p1\">**</ept>","source":"**GetProcessSample01**"},{"content":"Shows how to write a simple cmdlet that gets all the processes on the local computer.","pos":[3296,3381]},{"pos":[3383,3405],"content":"<bpt id=\"p1\">**</bpt>GetProcessSample02<ept id=\"p1\">**</ept>","source":"**GetProcessSample02**"},{"content":"Shows how to add parameters to the cmdlet.","pos":[3407,3449]},{"content":"The cmdlet takes one or more process names and returns the matching processes.","pos":[3450,3528],"source":"\nThe cmdlet takes one or more process names and returns the matching processes."},{"pos":[3530,3552],"content":"<bpt id=\"p1\">**</bpt>GetProcessSample03<ept id=\"p1\">**</ept>","source":"**GetProcessSample03**"},{"content":"Shows how to add parameters that accept input from the pipeline.","pos":[3554,3618]},{"pos":[3620,3642],"content":"<bpt id=\"p1\">**</bpt>GetProcessSample04<ept id=\"p1\">**</ept>","source":"**GetProcessSample04**"},{"content":"Shows how to handle nonterminating errors.","pos":[3644,3686]},{"pos":[3688,3710],"content":"<bpt id=\"p1\">**</bpt>GetProcessSample05<ept id=\"p1\">**</ept>","source":"**GetProcessSample05**"},{"content":"Shows how to display a list of specified processes.","pos":[3712,3763]},{"pos":[3765,3781],"content":"<bpt id=\"p1\">**</bpt>SelectObject<ept id=\"p1\">**</ept>","source":"**SelectObject**"},{"content":"Shows how to write a filter to select only certain objects.","pos":[3783,3842]},{"pos":[3844,3860],"content":"<bpt id=\"p1\">**</bpt>SelectString<ept id=\"p1\">**</ept>","source":"**SelectString**"},{"content":"Shows how to search files for specified patterns.","pos":[3862,3911]},{"pos":[3913,3936],"content":"<bpt id=\"p1\">**</bpt>StopProcessSample01<ept id=\"p1\">**</ept>","source":"**StopProcessSample01**"},{"content":"Shows how to implement a <bpt id=\"p1\">*</bpt>PassThru<ept id=\"p1\">*</ept> parameter, and how to request user feedback by calls to the <bpt id=\"p2\">[</bpt>ShouldProcess<ept id=\"p2\">](https://technet.microsoft.com/library/system.management.automation.cmdlet.shouldprocess.aspx)</ept> and <bpt id=\"p3\">[</bpt>ShouldContinue<ept id=\"p3\">](https://technet.microsoft.com/library/system.management.automation.cmdlet.shouldcontinue.aspx)</ept> methods.","pos":[3938,4268],"source":"Shows how to implement a *PassThru* parameter, and how to request user feedback by calls to the [ShouldProcess](https://technet.microsoft.com/library/system.management.automation.cmdlet.shouldprocess.aspx) and [ShouldContinue](https://technet.microsoft.com/library/system.management.automation.cmdlet.shouldcontinue.aspx) methods."},{"content":"Users specify the <bpt id=\"p1\">*</bpt>PassThru<ept id=\"p1\">*</ept> parameter when they want to force the cmdlet to return an object,","pos":[4269,4363],"source":"\nUsers specify the *PassThru* parameter when they want to force the cmdlet to return an object,"},{"pos":[4365,4388],"content":"<bpt id=\"p1\">**</bpt>StopProcessSample02<ept id=\"p1\">**</ept>","source":"**StopProcessSample02**"},{"content":"Shows how to stop a specific process.","pos":[4390,4427]},{"pos":[4429,4452],"content":"<bpt id=\"p1\">**</bpt>StopProcessSample03<ept id=\"p1\">**</ept>","source":"**StopProcessSample03**"},{"content":"Shows how to declare aliases for parameters and how to support wildcards.","pos":[4454,4527]},{"pos":[4529,4552],"content":"<bpt id=\"p1\">**</bpt>StopProcessSample04<ept id=\"p1\">**</ept>","source":"**StopProcessSample04**"},{"content":"Shows how to declare parameter sets, the object that the cmdlet takes as input, and how to specify the default parameter set to use.","pos":[4554,4686]},{"content":"Remoting samples","pos":[4691,4707]},{"pos":[4709,4729],"content":"<bpt id=\"p1\">**</bpt>RemoteRunspace01<ept id=\"p1\">**</ept>","source":"**RemoteRunspace01**"},{"content":"Shows how to create a remote runspace that is used to establish a remote connection.","pos":[4731,4815]},{"pos":[4817,4841],"content":"<bpt id=\"p1\">**</bpt>RemoteRunspacePool01<ept id=\"p1\">**</ept>","source":"**RemoteRunspacePool01**"},{"content":"Shows how to construct a remote runspace pool and how to run multiple commands concurrently by using this pool.","pos":[4843,4954]},{"pos":[4956,4975],"content":"<bpt id=\"p1\">**</bpt>Serialization01<ept id=\"p1\">**</ept>","source":"**Serialization01**"},{"content":"Shows how to look at an existing .NET class and make sure that information from selected public properties of this class is preserved across serialization/deserialization.","pos":[4977,5148]},{"pos":[5150,5169],"content":"<bpt id=\"p1\">**</bpt>Serialization02<ept id=\"p1\">**</ept>","source":"**Serialization02**"},{"content":"Shows how to look at an existing .NET class and make sure that information from instance of this class is preserved across serialization/deserialization when the information is not available in public properties of the class.","pos":[5171,5396]},{"pos":[5398,5417],"content":"<bpt id=\"p1\">**</bpt>Serialization03<ept id=\"p1\">**</ept>","source":"**Serialization03**"},{"content":"Shows how to look at an existing .NET class and make sure that instances of this class and of derived classes are deserialized (rehydrated) into live .NET objects.","pos":[5419,5582]},{"content":"Event samples","pos":[5587,5600]},{"pos":[5602,5613],"content":"<bpt id=\"p1\">**</bpt>Event01<ept id=\"p1\">**</ept>","source":"**Event01**"},{"content":"Shows how to create a cmdlet for event registration by deriving from ObjectEventRegistrationBase.","pos":[5615,5712]},{"pos":[5714,5725],"content":"<bpt id=\"p1\">**</bpt>Event02<ept id=\"p1\">**</ept>","source":"**Event02**"},{"content":"Shows how to shows how to receive notifications of Windows PowerShell events that are generated on remote computers.","pos":[5727,5843]},{"content":"It uses the PSEventReceived event exposed through the <bpt id=\"p1\">[</bpt>Runspace<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.runspaces.runspace.aspx)</ept> class.","pos":[5844,6007],"source":"\nIt uses the PSEventReceived event exposed through the [Runspace](https://technet.microsoft.com/library/system.management.automation.runspaces.runspace.aspx) class."},{"content":"Hosting application samples","pos":[6012,6039]},{"pos":[6041,6055],"content":"<bpt id=\"p1\">**</bpt>Runspace01<ept id=\"p1\">**</ept>","source":"**Runspace01**"},{"content":"Shows how to use the <bpt id=\"p1\">[</bpt>PowerShell<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.powershell.aspx)</ept> class to run the <bpt id=\"p2\">[</bpt>Get-Process<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkId=113324)</ept> cmdlet synchronously.","pos":[6057,6274],"source":"Shows how to use the [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) class to run the [Get-Process](http://go.microsoft.com/fwlink/?LinkId=113324) cmdlet synchronously."},{"content":"The <bpt id=\"p1\">[</bpt>Get-Process<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=113324)</ept> cmdlet returns <bpt id=\"p2\">[</bpt>Process<ept id=\"p2\">](https://technet.microsoft.com/library/system.diagnostics.process.aspx)</ept> objects for each process running on the local computer.","pos":[6275,6491],"source":"\nThe [Get-Process](http://go.microsoft.com/fwlink/?LinkId=113324) cmdlet returns [Process](https://technet.microsoft.com/library/system.diagnostics.process.aspx) objects for each process running on the local computer."},{"pos":[6493,6507],"content":"<bpt id=\"p1\">**</bpt>Runspace02<ept id=\"p1\">**</ept>","source":"**Runspace02**"},{"content":"Shows how to use the <bpt id=\"p1\">[</bpt>PowerShell<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.powershell.aspx)</ept> class to run the <bpt id=\"p2\">[</bpt>Get-Process<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkId=113324)</ept> and <bpt id=\"p3\">[</bpt>Sort-Object<ept id=\"p3\">](http://go.microsoft.com/fwlink/?LinkID=113403)</ept> cmdlets synchronously.","pos":[6509,6792],"source":"Shows how to use the [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) class to run the [Get-Process](http://go.microsoft.com/fwlink/?LinkId=113324) and [Sort-Object](http://go.microsoft.com/fwlink/?LinkID=113403) cmdlets synchronously."},{"content":"The <bpt id=\"p1\">[</bpt>Get-Process<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=113324)</ept> cmdlet returns <bpt id=\"p2\">[</bpt>Process<ept id=\"p2\">](https://technet.microsoft.com/library/system.diagnostics.process.aspx)</ept> objects for each process running on the local computer, and the Sort-Object sorts the objects based on their <bpt id=\"p3\">[</bpt>Id<ept id=\"p3\">](https://technet.microsoft.com/library/system.diagnostics.process.id.aspx)</ept> property.","pos":[6793,7151],"source":"\nThe [Get-Process](http://go.microsoft.com/fwlink/?LinkId=113324) cmdlet returns [Process](https://technet.microsoft.com/library/system.diagnostics.process.aspx) objects for each process running on the local computer, and the Sort-Object sorts the objects based on their [Id](https://technet.microsoft.com/library/system.diagnostics.process.id.aspx) property."},{"content":"The results of these commands is displayed by using a <bpt id=\"p1\">[</bpt>DataGridView<ept id=\"p1\">](https://technet.microsoft.com/library/system.windows.forms.datagridview.aspx)</ept> control.","pos":[7152,7307],"source":"\nThe results of these commands is displayed by using a [DataGridView](https://technet.microsoft.com/library/system.windows.forms.datagridview.aspx) control."},{"pos":[7309,7323],"content":"<bpt id=\"p1\">**</bpt>Runspace03<ept id=\"p1\">**</ept>","source":"**Runspace03**"},{"content":"Shows how to use the <bpt id=\"p1\">[</bpt>PowerShell<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.powershell.aspx)</ept> class to run a script synchronously, and how to handle non-terminating errors.","pos":[7325,7521],"source":"Shows how to use the [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) class to run a script synchronously, and how to handle non-terminating errors."},{"content":"The script receives a list of process names and then retrieves those processes.","pos":[7522,7601],"source":"\nThe script receives a list of process names and then retrieves those processes."},{"content":"The results of the script, including any non-terminating errors that were generated when running the script, are displayed in a console window.","pos":[7602,7745],"source":"\nThe results of the script, including any non-terminating errors that were generated when running the script, are displayed in a console window."},{"pos":[7747,7761],"content":"<bpt id=\"p1\">**</bpt>Runspace04<ept id=\"p1\">**</ept>","source":"**Runspace04**"},{"content":"Shows how to use the <bpt id=\"p1\">[</bpt>PowerShell<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.powershell.aspx)</ept> class to run commands, and how to catch terminating errors that are thrown when running the commands.","pos":[7763,7982],"source":"Shows how to use the [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) class to run commands, and how to catch terminating errors that are thrown when running the commands."},{"content":"Two commands are run, and the last command is passed a parameter argument that is not valid.","pos":[7983,8075],"source":"\nTwo commands are run, and the last command is passed a parameter argument that is not valid."},{"content":"As a result, no objects are returned and a terminating error is thrown.","pos":[8076,8147],"source":"\nAs a result, no objects are returned and a terminating error is thrown."},{"pos":[8149,8163],"content":"<bpt id=\"p1\">**</bpt>Runspace05<ept id=\"p1\">**</ept>","source":"**Runspace05**"},{"content":"Shows how to add a snap-in to an <bpt id=\"p1\">[</bpt>InitialSessionState<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.runspaces.initialsessionstate.aspx)</ept> object so that the cmdlet of the snap-in is available when the runspace is opened.","pos":[8165,8405],"source":"Shows how to add a snap-in to an [InitialSessionState](https://technet.microsoft.com/library/system.management.automation.runspaces.initialsessionstate.aspx) object so that the cmdlet of the snap-in is available when the runspace is opened."},{"content":"The snap-in provides a Get-Proc cmdlet (defined by the <bpt id=\"p1\">[</bpt>GetProcessSample01 Sample<ept id=\"p1\">](https://technet.microsoft.com/library/ff602028.aspx)</ept>) that is run synchronously by using a <bpt id=\"p2\">[</bpt>PowerShell<ept id=\"p2\">](https://technet.microsoft.com/library/system.management.automation.powershell.aspx)</ept> object.","pos":[8406,8684],"source":"\nThe snap-in provides a Get-Proc cmdlet (defined by the [GetProcessSample01 Sample](https://technet.microsoft.com/library/ff602028.aspx)) that is run synchronously by using a [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) object."},{"pos":[8686,8700],"content":"<bpt id=\"p1\">**</bpt>Runspace06<ept id=\"p1\">**</ept>","source":"**Runspace06**"},{"content":"Shows how to add a module to an <bpt id=\"p1\">[</bpt>InitialSessionState<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.runspaces.initialsessionstate.aspx)</ept> object so that the module is loaded when the runspace is opened.","pos":[8702,8923],"source":"Shows how to add a module to an [InitialSessionState](https://technet.microsoft.com/library/system.management.automation.runspaces.initialsessionstate.aspx) object so that the module is loaded when the runspace is opened."},{"content":"The module provides a Get-Proc cmdlet (defined by the <bpt id=\"p1\">[</bpt>GetProcessSample02 Sample<ept id=\"p1\">](https://technet.microsoft.com/library/ff602027.aspx)</ept>) that is run synchronously by using a <bpt id=\"p2\">[</bpt>PowerShell<ept id=\"p2\">](https://technet.microsoft.com/library/system.management.automation.powershell.aspx)</ept> object.","pos":[8924,9201],"source":"\nThe module provides a Get-Proc cmdlet (defined by the [GetProcessSample02 Sample](https://technet.microsoft.com/library/ff602027.aspx)) that is run synchronously by using a [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) object."},{"pos":[9203,9217],"content":"<bpt id=\"p1\">**</bpt>Runspace07<ept id=\"p1\">**</ept>","source":"**Runspace07**"},{"pos":[9219,9426],"content":"Shows how to create a runspace, and then use that runspace to run two cmdlets synchronously by using a <bpt id=\"p1\">[</bpt>PowerShell<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.powershell.aspx)</ept> object.","source":"Shows how to create a runspace, and then use that runspace to run two cmdlets synchronously by using a [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) object."},{"pos":[9428,9442],"content":"<bpt id=\"p1\">**</bpt>Runspace08<ept id=\"p1\">**</ept>","source":"**Runspace08**"},{"pos":[9444,9651],"content":"Shows how to add commands and arguments to the pipeline of a <bpt id=\"p1\">[</bpt>PowerShell<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.powershell.aspx)</ept> object and how to run the commands synchronously.","source":"Shows how to add commands and arguments to the pipeline of a [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) object and how to run the commands synchronously."},{"pos":[9653,9667],"content":"<bpt id=\"p1\">**</bpt>Runspace09<ept id=\"p1\">**</ept>","source":"**Runspace09**"},{"content":"Shows how to add a script to the pipeline of a <bpt id=\"p1\">[</bpt>PowerShell<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.powershell.aspx)</ept> object and how to run the script asynchronously.","pos":[9669,9861],"source":"Shows how to add a script to the pipeline of a [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) object and how to run the script asynchronously."},{"content":"Events are used to handle the output of the script.","pos":[9862,9913],"source":"\nEvents are used to handle the output of the script."},{"pos":[9915,9929],"content":"<bpt id=\"p1\">**</bpt>Runspace10<ept id=\"p1\">**</ept>","source":"**Runspace10**"},{"pos":[9931,10341],"content":"Shows how to create a default initial session state, how to add a cmdlet to the <bpt id=\"p1\">[</bpt>InitialSessionState<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.runspaces.initialsessionstate.aspx)</ept>, how to create a runspace that uses the initial session state, and how to run the command by using a <bpt id=\"p2\">[</bpt>PowerShell<ept id=\"p2\">](https://technet.microsoft.com/library/system.management.automation.powershell.aspx)</ept> object.","source":"Shows how to create a default initial session state, how to add a cmdlet to the [InitialSessionState](https://technet.microsoft.com/library/system.management.automation.runspaces.initialsessionstate.aspx), how to create a runspace that uses the initial session state, and how to run the command by using a [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) object."},{"pos":[10343,10357],"content":"<bpt id=\"p1\">**</bpt>Runspace11<ept id=\"p1\">**</ept>","source":"**Runspace11**"},{"content":"Shows how to use the <bpt id=\"p1\">[</bpt>ProxyCommand<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.proxycommand.aspx)</ept> class to create a proxy command that calls an existing cmdlet, but restricts the set of available parameters.","pos":[10359,10590],"source":"Shows how to use the [ProxyCommand](https://technet.microsoft.com/library/system.management.automation.proxycommand.aspx) class to create a proxy command that calls an existing cmdlet, but restricts the set of available parameters."},{"content":"The proxy command is then added to an initial session state that is used to create a constrained runspace.","pos":[10591,10697],"source":"\nThe proxy command is then added to an initial session state that is used to create a constrained runspace."},{"content":"This means that the user can access the functionality of the cmdlet only through the proxy command.","pos":[10698,10797],"source":"\nThis means that the user can access the functionality of the cmdlet only through the proxy command."},{"pos":[10799,10815],"content":"<bpt id=\"p1\">**</bpt>PowerShell01<ept id=\"p1\">**</ept>","source":"**PowerShell01**"},{"pos":[10817,11001],"content":"Shows how to create a constrained runspace using an <bpt id=\"p1\">[</bpt>InitialSessionState<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.runspaces.initialsessionstate.aspx)</ept> object.","source":"Shows how to create a constrained runspace using an [InitialSessionState](https://technet.microsoft.com/library/system.management.automation.runspaces.initialsessionstate.aspx) object."},{"pos":[11003,11019],"content":"<bpt id=\"p1\">**</bpt>PowerShell02<ept id=\"p1\">**</ept>","source":"**PowerShell02**"},{"content":"Shows how to use a runspace pool to run multiple commands concurrently.","pos":[11021,11092]},{"content":"Host samples","pos":[11097,11109]},{"pos":[11111,11121],"content":"<bpt id=\"p1\">**</bpt>Host01<ept id=\"p1\">**</ept>","source":"**Host01**"},{"content":"Shows how to implement a host application that uses a custom host.","pos":[11123,11189]},{"content":"In this sample a runspace is created that uses the custom host, and then the <bpt id=\"p1\">[</bpt>PowerShell<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.powershell.aspx)</ept> API is used to run a script that calls \"exit\".","pos":[11190,11410],"source":"\nIn this sample a runspace is created that uses the custom host, and then the [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) API is used to run a script that calls \"exit\"."},{"content":"The host application then looks at the output of the script and prints out the results.","pos":[11411,11498],"source":"\nThe host application then looks at the output of the script and prints out the results."},{"pos":[11500,11510],"content":"<bpt id=\"p1\">**</bpt>Host02<ept id=\"p1\">**</ept>","source":"**Host02**"},{"content":"Shows how to write a host application that uses the Windows PowerShell runtime along with a custom host implementation.","pos":[11512,11631]},{"content":"The host application sets the host culture to German, runs the <bpt id=\"p1\">[</bpt>Get-Process<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=113324)</ept> cmdlet and displays the results as you would see them by using pwrsh.exe, and then prints out the current data and time in German.","pos":[11632,11886],"source":"\nThe host application sets the host culture to German, runs the [Get-Process](http://go.microsoft.com/fwlink/?LinkId=113324) cmdlet and displays the results as you would see them by using pwrsh.exe, and then prints out the current data and time in German."},{"pos":[11888,11898],"content":"<bpt id=\"p1\">**</bpt>Host03<ept id=\"p1\">**</ept>","source":"**Host03**"},{"content":"Shows how to build an interactive console-based host application that reads commands from the command line, executes the commands, and then displays the results to the console.","pos":[11900,12076]},{"pos":[12078,12088],"content":"<bpt id=\"p1\">**</bpt>Host04<ept id=\"p1\">**</ept>","source":"**Host04**"},{"content":"Shows how to build an interactive console-based host application that reads commands from the command line, executes the commands, and then displays the results to the console.","pos":[12090,12266]},{"content":"This host application also supports displaying prompts that allow the user to specify multiple choices.","pos":[12267,12370],"source":"\nThis host application also supports displaying prompts that allow the user to specify multiple choices."},{"pos":[12372,12382],"content":"<bpt id=\"p1\">**</bpt>Host05<ept id=\"p1\">**</ept>","source":"**Host05**"},{"content":"Shows how to build an interactive console-based host application that reads commands from the command line, executes the commands, and then displays the results to the console.","pos":[12384,12560]},{"content":"This host application also supports calls to remote computers by using the <bpt id=\"p1\">[</bpt>Enter-PsSession<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=135210)</ept> and <bpt id=\"p2\">[</bpt>Exit-PsSession<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkId=135212)</ept> cmdlets.","pos":[12561,12777],"source":"\nThis host application also supports calls to remote computers by using the [Enter-PsSession](http://go.microsoft.com/fwlink/?LinkId=135210) and [Exit-PsSession](http://go.microsoft.com/fwlink/?LinkId=135212) cmdlets."},{"pos":[12779,12789],"content":"<bpt id=\"p1\">**</bpt>Host06<ept id=\"p1\">**</ept>","source":"**Host06**"},{"content":"Shows how to build an interactive console-based host application that reads commands from the command line, executes the commands, and then displays the results to the console.","pos":[12791,12967]},{"content":"In addition, this sample uses the Tokenizer APIs to specify the color of the text that is entered by the user.","pos":[12968,13078],"source":"\nIn addition, this sample uses the Tokenizer APIs to specify the color of the text that is entered by the user."},{"content":"Provider samples","pos":[13083,13099]},{"pos":[13101,13129],"content":"<bpt id=\"p1\">**</bpt>AccessDBProviderSample01<ept id=\"p1\">**</ept>","source":"**AccessDBProviderSample01**"},{"content":"Shows how to declare a provider class that derives directly from the <bpt id=\"p1\">[</bpt>CmdletProvider<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.provider.cmdletprovider.aspx)</ept> class.","pos":[13131,13320],"source":"Shows how to declare a provider class that derives directly from the [CmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.cmdletprovider.aspx) class."},{"content":"It is included here only for completeness.","pos":[13321,13363],"source":"\nIt is included here only for completeness."},{"pos":[13365,13393],"content":"<bpt id=\"p1\">**</bpt>AccessDBProviderSample02<ept id=\"p1\">**</ept>","source":"**AccessDBProviderSample02**"},{"content":"Shows how to overwrite the <bpt id=\"p1\">[</bpt>NewDrive<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.provider.drivecmdletprovider.newdrive.aspx)</ept> and <bpt id=\"p2\">[</bpt>RemoveDrive<ept id=\"p2\">](https://technet.microsoft.com/library/system.management.automation.provider.drivecmdletprovider.removedrive.aspx)</ept> methods to support calls to the New-PSDrive and Remove-PSDrive cmdlets.","pos":[13395,13747],"source":"Shows how to overwrite the [NewDrive](https://technet.microsoft.com/library/system.management.automation.provider.drivecmdletprovider.newdrive.aspx) and [RemoveDrive](https://technet.microsoft.com/library/system.management.automation.provider.drivecmdletprovider.removedrive.aspx) methods to support calls to the New-PSDrive and Remove-PSDrive cmdlets."},{"content":"The provider class in this sample derives from the <bpt id=\"p1\">[</bpt>DriveCmdletProvider<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.provider.drivecmdletprovider.aspx)</ept> class.","pos":[13748,13929],"source":"\nThe provider class in this sample derives from the [DriveCmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.drivecmdletprovider.aspx) class."},{"pos":[13931,13959],"content":"<bpt id=\"p1\">**</bpt>AccessDBProviderSample03<ept id=\"p1\">**</ept>","source":"**AccessDBProviderSample03**"},{"content":"Shows how to overwrite the <bpt id=\"p1\">[</bpt>GetItem<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.provider.itemcmdletprovider.getitem.aspx)</ept> and <bpt id=\"p2\">[</bpt>SetItem<ept id=\"p2\">](https://technet.microsoft.com/library/system.management.automation.provider.itemcmdletprovider.setitem.aspx)</ept> methods to support calls to the Get-Item and Set-Item cmdlets.","pos":[13961,14292],"source":"Shows how to overwrite the [GetItem](https://technet.microsoft.com/library/system.management.automation.provider.itemcmdletprovider.getitem.aspx) and [SetItem](https://technet.microsoft.com/library/system.management.automation.provider.itemcmdletprovider.setitem.aspx) methods to support calls to the Get-Item and Set-Item cmdlets."},{"content":"The provider class in this sample derives from the <bpt id=\"p1\">[</bpt>ItemCmdletProvider<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.provider.itemcmdletprovider.aspx)</ept> class.","pos":[14293,14472],"source":"\nThe provider class in this sample derives from the [ItemCmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.itemcmdletprovider.aspx) class."},{"pos":[14474,14502],"content":"<bpt id=\"p1\">**</bpt>AccessDBProviderSample04<ept id=\"p1\">**</ept>","source":"**AccessDBProviderSample04**"},{"content":"Shows how to overwrite container methods to support calls to the Copy-Item, Get-ChildItem, New-Item, and Remove-Item cmdlets.","pos":[14504,14629]},{"content":"These methods should be implemented when the data store contains items that are containers.","pos":[14630,14721],"source":"\nThese methods should be implemented when the data store contains items that are containers."},{"content":"A container is a group of child items under a common parent item.","pos":[14722,14787],"source":"\nA container is a group of child items under a common parent item."},{"content":"The provider class in this sample derives from the <bpt id=\"p1\">[</bpt>ItemCmdletProvider<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.provider.itemcmdletprovider.aspx)</ept> class.","pos":[14788,14967],"source":"\nThe provider class in this sample derives from the [ItemCmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.itemcmdletprovider.aspx) class."},{"pos":[14969,14997],"content":"<bpt id=\"p1\">**</bpt>AccessDBProviderSample05<ept id=\"p1\">**</ept>","source":"**AccessDBProviderSample05**"},{"content":"Shows how to overwrite container methods to support calls to the Move-Item and Join-Path cmdlets.","pos":[14999,15096]},{"content":"These methods should be implemented when the user needs to move items within a container and if the data store contains nested containers.","pos":[15097,15235],"source":"\nThese methods should be implemented when the user needs to move items within a container and if the data store contains nested containers."},{"content":"The provider class in this sample derives from the <bpt id=\"p1\">[</bpt>NavigationCmdletProvider<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.provider.navigationcmdletprovider.aspx)</ept> class.","pos":[15236,15427],"source":"\nThe provider class in this sample derives from the [NavigationCmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.navigationcmdletprovider.aspx) class."},{"pos":[15429,15457],"content":"<bpt id=\"p1\">**</bpt>AccessDBProviderSample06<ept id=\"p1\">**</ept>","source":"**AccessDBProviderSample06**"},{"content":"Shows how to overwrite content methods to support calls to the Clear-Content, Get-Content, and Set-Content cmdlets.","pos":[15459,15574]},{"content":"These methods should be implemented when the user needs to manage the content of the items in the data store.","pos":[15575,15684],"source":"\nThese methods should be implemented when the user needs to manage the content of the items in the data store."},{"content":"The provider class in this sample derives from the <bpt id=\"p1\">[</bpt>NavigationCmdletProvider<ept id=\"p1\">](https://technet.microsoft.com/library/system.management.automation.provider.navigationcmdletprovider.aspx)</ept> class, and it implements the <bpt id=\"p2\">[</bpt>IContentCmdletProvider<ept id=\"p2\">](https://technet.microsoft.com/library/system.management.automation.provider.icontentcmdletprovider.aspx)</ept> interface.","pos":[15685,16039],"source":"\nThe provider class in this sample derives from the [NavigationCmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.navigationcmdletprovider.aspx) class, and it implements the [IContentCmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.icontentcmdletprovider.aspx) interface."}],"content":"---\ntitle:  Installing the Windows PowerShell SDK\nms.date:  2016-05-11\nkeywords:  powershell,cmdlet\ndescription:  \nms.topic:  article\nauthor:  jpjofre\nmanager:  dongill\nms.prod:  powershell\nms.assetid:  c3636b45-61aa-4720-85f0-58312c4fc8f9\n---\n\n# Installing the Windows PowerShell SDK\n\nThe following topic describes how to install the PowerShell SDK on different versions of Windows.\n\n## Installing Windows PowerShell 3.0 SDK for Windows 8 and Windows Server 2012\n\nWindows PowerShell 3.0 is automatically installed with Windows 8 and Windows Server 2012.\nIn addition, you can download and install the reference assemblies for Windows PowerShell 3.0 as part of the Windows 8 SDK.\nThese assemblies allow you to write cmdlets, providers, and host programs for Windows PowerShell 3.0.\nWhen you install the Windows SDK for Windows 8, the Windows PowerShell assemblies are automatically installed in the reference assembly folder, in \\Program Files (x86)\\Reference Assemblies\\Microsoft\\WindowsPowerShell\\3.0.\nFor more information, see the [Windows 8 SDK download site](http://msdn.microsoft.com/windows/hardware/hh852363.aspx).\nWindows PowerShell code samples are also available on the Development Center.\nFor more information, see the Desktop code sample page on the [Dev center site](http://code.msdn.microsoft.com/windowsdesktop/).\n\nIn addition, Windows PowerShell 3.0 is backwards-compatible with the Windows PowerShell 2.0 SDK, which includes a number of code samples.\nFor more information on how to download the Windows PowerShell 2.0 SDK, see below.\n(Note that while the 2.0 code samples are compatible with Windows 8 and Windows PowerShell 3.0, you cannot install Windows PowerShell 2.0 on a Windows 8 platform.)\n\n##Installing Windows PowerShell 3.0 SDK for Windows 7 and Windows Server 2008 R2\n\nWindows 7 and Windows Server 2008 R2 automatically have PowerShell 2.0 installed.\nIn addition, you can install PowerShell 3.0 on these systems.\n(For more information, see [Installing Windows PowerShell](Installing-Windows-PowerShell.md).).\nAs described above, you can also install the Windows 8 SDK on Windows 7 and Windows Server 2008 R2.\n\n## Installing Windows PowerShell 2.0 SDK for Windows 7, Vista, XP, Server 2003, and Server 2008\n\nThe Windows PowerShell 2.0 SDK provides the reference assemblies needed to write cmdlets, providers, and hosting applications, and it provides C# sample code that can be used as the starting point when you begin writing code.\n\nTo install this SDK, see [Windows PowerShell 2.0 SDK](http://go.microsoft.com/fwlink/?LinkId=184611).\n\n## Reference assemblies\n\nReference assemblies are installed in the following location by default: `c:\\Program Files\\Reference Assemblies\\Microsoft\\WindowsPowerShell\\V1.0`.\n\n> **Note**: Code that is compiled against the Windows PowerShell 2.0 assemblies cannot be loaded into Windows PowerShell 1.0 installations.\n>However, code that is compiled against the Windows PowerShell 1.0 assemblies can be loaded into Windows PowerShell 2.0 installations.\n\n## Samples\n\nCode samples are installed in the following location by default: `C:\\Program Files\\Microsoft SDKs\\Windows\\v7.0\\Samples\\sysmgmt\\WindowsPowerShell\\`.\n\nThe following sections provide a brief description of what each sample does.\n\n## Cmdlet samples\n**GetProcessSample01**\n\nShows how to write a simple cmdlet that gets all the processes on the local computer.\n\n**GetProcessSample02**\n\nShows how to add parameters to the cmdlet.\nThe cmdlet takes one or more process names and returns the matching processes.\n\n**GetProcessSample03**\n\nShows how to add parameters that accept input from the pipeline.\n\n**GetProcessSample04**\n\nShows how to handle nonterminating errors.\n\n**GetProcessSample05**\n\nShows how to display a list of specified processes.\n\n**SelectObject**\n\nShows how to write a filter to select only certain objects.\n\n**SelectString**\n\nShows how to search files for specified patterns.\n\n**StopProcessSample01**\n\nShows how to implement a *PassThru* parameter, and how to request user feedback by calls to the [ShouldProcess](https://technet.microsoft.com/library/system.management.automation.cmdlet.shouldprocess.aspx) and [ShouldContinue](https://technet.microsoft.com/library/system.management.automation.cmdlet.shouldcontinue.aspx) methods.\nUsers specify the *PassThru* parameter when they want to force the cmdlet to return an object,\n\n**StopProcessSample02**\n\nShows how to stop a specific process.\n\n**StopProcessSample03**\n\nShows how to declare aliases for parameters and how to support wildcards.\n\n**StopProcessSample04**\n\nShows how to declare parameter sets, the object that the cmdlet takes as input, and how to specify the default parameter set to use.\n\n## Remoting samples\n\n**RemoteRunspace01**\n\nShows how to create a remote runspace that is used to establish a remote connection.\n\n**RemoteRunspacePool01**\n\nShows how to construct a remote runspace pool and how to run multiple commands concurrently by using this pool.\n\n**Serialization01**\n\nShows how to look at an existing .NET class and make sure that information from selected public properties of this class is preserved across serialization/deserialization.\n\n**Serialization02**\n\nShows how to look at an existing .NET class and make sure that information from instance of this class is preserved across serialization/deserialization when the information is not available in public properties of the class.\n\n**Serialization03**\n\nShows how to look at an existing .NET class and make sure that instances of this class and of derived classes are deserialized (rehydrated) into live .NET objects.\n\n## Event samples\n\n**Event01**\n\nShows how to create a cmdlet for event registration by deriving from ObjectEventRegistrationBase.\n\n**Event02**\n\nShows how to shows how to receive notifications of Windows PowerShell events that are generated on remote computers.\nIt uses the PSEventReceived event exposed through the [Runspace](https://technet.microsoft.com/library/system.management.automation.runspaces.runspace.aspx) class.\n\n## Hosting application samples\n\n**Runspace01**\n\nShows how to use the [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) class to run the [Get-Process](http://go.microsoft.com/fwlink/?LinkId=113324) cmdlet synchronously.\nThe [Get-Process](http://go.microsoft.com/fwlink/?LinkId=113324) cmdlet returns [Process](https://technet.microsoft.com/library/system.diagnostics.process.aspx) objects for each process running on the local computer.\n\n**Runspace02**\n\nShows how to use the [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) class to run the [Get-Process](http://go.microsoft.com/fwlink/?LinkId=113324) and [Sort-Object](http://go.microsoft.com/fwlink/?LinkID=113403) cmdlets synchronously.\nThe [Get-Process](http://go.microsoft.com/fwlink/?LinkId=113324) cmdlet returns [Process](https://technet.microsoft.com/library/system.diagnostics.process.aspx) objects for each process running on the local computer, and the Sort-Object sorts the objects based on their [Id](https://technet.microsoft.com/library/system.diagnostics.process.id.aspx) property.\nThe results of these commands is displayed by using a [DataGridView](https://technet.microsoft.com/library/system.windows.forms.datagridview.aspx) control.\n\n**Runspace03**\n\nShows how to use the [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) class to run a script synchronously, and how to handle non-terminating errors.\nThe script receives a list of process names and then retrieves those processes.\nThe results of the script, including any non-terminating errors that were generated when running the script, are displayed in a console window.\n\n**Runspace04**\n\nShows how to use the [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) class to run commands, and how to catch terminating errors that are thrown when running the commands.\nTwo commands are run, and the last command is passed a parameter argument that is not valid.\nAs a result, no objects are returned and a terminating error is thrown.\n\n**Runspace05**\n\nShows how to add a snap-in to an [InitialSessionState](https://technet.microsoft.com/library/system.management.automation.runspaces.initialsessionstate.aspx) object so that the cmdlet of the snap-in is available when the runspace is opened.\nThe snap-in provides a Get-Proc cmdlet (defined by the [GetProcessSample01 Sample](https://technet.microsoft.com/library/ff602028.aspx)) that is run synchronously by using a [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) object.\n\n**Runspace06**\n\nShows how to add a module to an [InitialSessionState](https://technet.microsoft.com/library/system.management.automation.runspaces.initialsessionstate.aspx) object so that the module is loaded when the runspace is opened.\nThe module provides a Get-Proc cmdlet (defined by the [GetProcessSample02 Sample](https://technet.microsoft.com/library/ff602027.aspx)) that is run synchronously by using a [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) object.\n\n**Runspace07**\n\nShows how to create a runspace, and then use that runspace to run two cmdlets synchronously by using a [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) object.\n\n**Runspace08**\n\nShows how to add commands and arguments to the pipeline of a [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) object and how to run the commands synchronously.\n\n**Runspace09**\n\nShows how to add a script to the pipeline of a [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) object and how to run the script asynchronously.\nEvents are used to handle the output of the script.\n\n**Runspace10**\n\nShows how to create a default initial session state, how to add a cmdlet to the [InitialSessionState](https://technet.microsoft.com/library/system.management.automation.runspaces.initialsessionstate.aspx), how to create a runspace that uses the initial session state, and how to run the command by using a [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) object.\n\n**Runspace11**\n\nShows how to use the [ProxyCommand](https://technet.microsoft.com/library/system.management.automation.proxycommand.aspx) class to create a proxy command that calls an existing cmdlet, but restricts the set of available parameters.\nThe proxy command is then added to an initial session state that is used to create a constrained runspace.\nThis means that the user can access the functionality of the cmdlet only through the proxy command.\n\n**PowerShell01**\n\nShows how to create a constrained runspace using an [InitialSessionState](https://technet.microsoft.com/library/system.management.automation.runspaces.initialsessionstate.aspx) object.\n\n**PowerShell02**\n\nShows how to use a runspace pool to run multiple commands concurrently.\n\n## Host samples\n\n**Host01**\n\nShows how to implement a host application that uses a custom host.\nIn this sample a runspace is created that uses the custom host, and then the [PowerShell](https://technet.microsoft.com/library/system.management.automation.powershell.aspx) API is used to run a script that calls \"exit\".\nThe host application then looks at the output of the script and prints out the results.\n\n**Host02**\n\nShows how to write a host application that uses the Windows PowerShell runtime along with a custom host implementation.\nThe host application sets the host culture to German, runs the [Get-Process](http://go.microsoft.com/fwlink/?LinkId=113324) cmdlet and displays the results as you would see them by using pwrsh.exe, and then prints out the current data and time in German.\n\n**Host03**\n\nShows how to build an interactive console-based host application that reads commands from the command line, executes the commands, and then displays the results to the console.\n\n**Host04**\n\nShows how to build an interactive console-based host application that reads commands from the command line, executes the commands, and then displays the results to the console.\nThis host application also supports displaying prompts that allow the user to specify multiple choices.\n\n**Host05**\n\nShows how to build an interactive console-based host application that reads commands from the command line, executes the commands, and then displays the results to the console.\nThis host application also supports calls to remote computers by using the [Enter-PsSession](http://go.microsoft.com/fwlink/?LinkId=135210) and [Exit-PsSession](http://go.microsoft.com/fwlink/?LinkId=135212) cmdlets.\n\n**Host06**\n\nShows how to build an interactive console-based host application that reads commands from the command line, executes the commands, and then displays the results to the console.\nIn addition, this sample uses the Tokenizer APIs to specify the color of the text that is entered by the user.\n\n## Provider samples\n\n**AccessDBProviderSample01**\n\nShows how to declare a provider class that derives directly from the [CmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.cmdletprovider.aspx) class.\nIt is included here only for completeness.\n\n**AccessDBProviderSample02**\n\nShows how to overwrite the [NewDrive](https://technet.microsoft.com/library/system.management.automation.provider.drivecmdletprovider.newdrive.aspx) and [RemoveDrive](https://technet.microsoft.com/library/system.management.automation.provider.drivecmdletprovider.removedrive.aspx) methods to support calls to the New-PSDrive and Remove-PSDrive cmdlets.\nThe provider class in this sample derives from the [DriveCmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.drivecmdletprovider.aspx) class.\n\n**AccessDBProviderSample03**\n\nShows how to overwrite the [GetItem](https://technet.microsoft.com/library/system.management.automation.provider.itemcmdletprovider.getitem.aspx) and [SetItem](https://technet.microsoft.com/library/system.management.automation.provider.itemcmdletprovider.setitem.aspx) methods to support calls to the Get-Item and Set-Item cmdlets.\nThe provider class in this sample derives from the [ItemCmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.itemcmdletprovider.aspx) class.\n\n**AccessDBProviderSample04**\n\nShows how to overwrite container methods to support calls to the Copy-Item, Get-ChildItem, New-Item, and Remove-Item cmdlets.\nThese methods should be implemented when the data store contains items that are containers.\nA container is a group of child items under a common parent item.\nThe provider class in this sample derives from the [ItemCmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.itemcmdletprovider.aspx) class.\n\n**AccessDBProviderSample05**\n\nShows how to overwrite container methods to support calls to the Move-Item and Join-Path cmdlets.\nThese methods should be implemented when the user needs to move items within a container and if the data store contains nested containers.\nThe provider class in this sample derives from the [NavigationCmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.navigationcmdletprovider.aspx) class.\n\n**AccessDBProviderSample06**\n\nShows how to overwrite content methods to support calls to the Clear-Content, Get-Content, and Set-Content cmdlets.\nThese methods should be implemented when the user needs to manage the content of the items in the data store.\nThe provider class in this sample derives from the [NavigationCmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.navigationcmdletprovider.aspx) class, and it implements the [IContentCmdletProvider](https://technet.microsoft.com/library/system.management.automation.provider.icontentcmdletprovider.aspx) interface.\n"}