{"nodes":[{"content":"Unified and Consistent State and Status Representation","pos":[2,56]},{"content":"A series of enhancements have been made in this release for automations built LCM state and DSC status.","pos":[58,161]},{"content":"These include unified and consistent state and status representations, manageable datetime property of status objects returned by Get-DscConfigurationStatus cmdlet and enhanced LCM state details property returned by Get-DscLocalConfigurationManager cmdlet.","pos":[162,418]},{"content":"The representation of LCM state and DSC operation status are revisited and unified according to following rules:","pos":[420,532]},{"content":"Notprocessed resource does not impact LCM state and DSC status.","pos":[537,600]},{"content":"LCM stop processing further resources once it encounters a resource that requests reboot.","pos":[605,694]},{"content":"A resource that requests reboot is not in desired state until reboot actually happens.","pos":[699,785]},{"content":"After encountering a resource that fails, LCM keeps processing further resources as long as they are not dependent on the failure one.","pos":[790,924]},{"content":"The overall status returned by Get-DscConfigurationStatus cmdlet is the super set of all resources’ status.","pos":[929,1036]},{"content":"The PendingReboot state is a superset of PendingConfiguration state.","pos":[1041,1109]},{"content":"The table below illustrates the resultant state and status related properties under a few typical scenarios.","pos":[1111,1219]},{"pos":[1223,1235],"content":"<bpt id=\"p1\">**</bpt>Scenario<ept id=\"p1\">**</ept>","source":"**Scenario**"},{"pos":[1257,1271],"content":"<bpt id=\"p1\">**</bpt>LCMState\\*<ept id=\"p1\">**</ept>","source":"**LCMState\\***"},{"pos":[1280,1290],"content":"<bpt id=\"p1\">**</bpt>Status<ept id=\"p1\">**</ept>","source":"**Status**"},{"pos":[1293,1313],"content":"<bpt id=\"p1\">**</bpt>Reboot Requested<ept id=\"p1\">**</ept>","source":"**Reboot Requested**"},{"pos":[1317,1344],"content":"<bpt id=\"p1\">**</bpt>ResourcesInDesiredState<ept id=\"p1\">**</ept>","source":"**ResourcesInDesiredState**"},{"pos":[1348,1378],"content":"<bpt id=\"p1\">**</bpt>ResourcesNotInDesiredState<ept id=\"p1\">**</ept>","source":"**ResourcesNotInDesiredState**"},{"pos":[1535,1541],"content":"S<bpt id=\"p1\">**</bpt><ph id=\"ph1\">^</ph><ept id=\"p1\">**</ept>","source":"S**^**"},{"content":"Idle","pos":[1569,1573]},{"content":"Success","pos":[1592,1599]},{"content":"$false","pos":[1605,1611]},{"content":"S","pos":[1621,1622]},{"content":"$null","pos":[1652,1657]},{"pos":[1687,1693],"content":"F<bpt id=\"p1\">**</bpt><ph id=\"ph1\">^</ph><ept id=\"p1\">**</ept>","source":"F**^**"},{"content":"PendingConfiguration","pos":[1721,1741]},{"content":"Failure","pos":[1744,1751]},{"content":"$false","pos":[1757,1763]},{"content":"$null","pos":[1773,1778]},{"content":"F","pos":[1804,1805]},{"content":"S,F","pos":[1839,1842]},{"content":"PendingConfiguration","pos":[1873,1893]},{"content":"Failure","pos":[1896,1903]},{"content":"$false","pos":[1909,1915]},{"content":"S","pos":[1925,1926]},{"content":"F","pos":[1956,1957]},{"content":"F,S","pos":[1991,1994]},{"content":"PendingConfiguration","pos":[2025,2045]},{"content":"Failure","pos":[2048,2055]},{"content":"$false","pos":[2061,2067]},{"content":"S","pos":[2077,2078]},{"content":"F","pos":[2108,2109]},{"pos":[2143,2174],"content":"S<ph id=\"ph1\">&lt;sub&gt;</ph>1<ph id=\"ph2\">&lt;/sub&gt;</ph>, F, S<ph id=\"ph3\">&lt;sub&gt;</ph>2<ph id=\"ph4\">&lt;/sub&gt;</ph>","source":"S<sub>1</sub>, F, S<sub>2</sub>"},{"content":"PendingConfiguration","pos":[2177,2197]},{"content":"Failure","pos":[2200,2207]},{"content":"$false","pos":[2213,2219]},{"pos":[2229,2257],"content":"S<ph id=\"ph1\">&lt;sub&gt;</ph>1<ph id=\"ph2\">&lt;/sub&gt;</ph>, S<ph id=\"ph3\">&lt;sub&gt;</ph>2<ph id=\"ph4\">&lt;/sub&gt;</ph>","source":"S<sub>1</sub>, S<sub>2</sub>"},{"content":"F","pos":[2260,2261]},{"pos":[2295,2326],"content":"F<ph id=\"ph1\">&lt;sub&gt;</ph>1<ph id=\"ph2\">&lt;/sub&gt;</ph>, S, F<ph id=\"ph3\">&lt;sub&gt;</ph>2<ph id=\"ph4\">&lt;/sub&gt;</ph>","source":"F<sub>1</sub>, S, F<sub>2</sub>"},{"content":"PendingConfiguration","pos":[2329,2349]},{"content":"Failure","pos":[2352,2359]},{"content":"$false","pos":[2365,2371]},{"content":"S","pos":[2381,2382]},{"pos":[2412,2440],"content":"F<ph id=\"ph1\">&lt;sub&gt;</ph>1<ph id=\"ph2\">&lt;/sub&gt;</ph>, F<ph id=\"ph3\">&lt;sub&gt;</ph>2<ph id=\"ph4\">&lt;/sub&gt;</ph>","source":"F<sub>1</sub>, F<sub>2</sub>"},{"content":"S, r","pos":[2447,2451]},{"content":"PendingReboot","pos":[2481,2494]},{"content":"Success","pos":[2504,2511]},{"content":"$true","pos":[2517,2522]},{"content":"S","pos":[2533,2534]},{"content":"r","pos":[2564,2565]},{"content":"F, r","pos":[2599,2603]},{"content":"PendingReboot","pos":[2633,2646]},{"content":"Failure","pos":[2656,2663]},{"content":"$true","pos":[2669,2674]},{"content":"$null","pos":[2685,2690]},{"content":"F, r","pos":[2716,2720]},{"content":"r, S","pos":[2751,2755]},{"content":"PendingReboot","pos":[2785,2798]},{"content":"Success","pos":[2808,2815]},{"content":"$true","pos":[2821,2826]},{"content":"$null","pos":[2837,2842]},{"content":"r","pos":[2868,2869]},{"content":"r, F","pos":[2903,2907]},{"content":"PendingReboot","pos":[2937,2950]},{"content":"Success","pos":[2960,2967]},{"content":"$true","pos":[2973,2978]},{"content":"$null","pos":[2989,2994]},{"content":"r","pos":[3020,3021]},{"pos":[3054,3221],"content":"<ph id=\"ph1\">^\n</ph>S<ph id=\"ph2\">&lt;sub&gt;</ph>i<ph id=\"ph3\">&lt;/sub&gt;</ph>: A series of resources that applied successfully F<ph id=\"ph4\">&lt;sub&gt;</ph>i<ph id=\"ph5\">&lt;/sub&gt;</ph>: A series of resources that applied unsuccessfully r: A resource that requires reboot <ph id=\"ph6\">\\*</ph>","source":"^\nS<sub>i</sub>: A series of resources that applied successfully\nF<sub>i</sub>: A series of resources that applied unsuccessfully\nr: A resource that requires reboot\n\\*"},{"content":"Enhancement in Get-DscConfigurationStatus cmdlet","pos":[3579,3627]},{"content":"A few enhancements have been made to Get-DscConfigurationStatus cmdlet in this release.","pos":[3629,3716]},{"content":"Previously, the StartDate property of objects returned by the cmdlet is of String type.","pos":[3717,3804]},{"content":"Now, it is of Datetime type, which enables complex selecting and filtering easier based on the intrinsic properties of a Datetime object.","pos":[3805,3942]},{"content":"Following is an example that returns all DSC operation records happened on the same day of week as today.","pos":[4275,4380]},{"content":"Records of operations that do not make changes to node’s configuration (i.e. read only operations) are eliminated.","pos":[4495,4609]},{"content":"Therefore, Test-DscConfiguration, Get-DscConfiguration operations are no longer adulterated in returned objects from Get-DscConfigurationStatus cmdlet.","pos":[4610,4761]},{"content":"Records of meta configuration setting operation is added to the return of Get-DscConfigurationStatus cmdlet.","pos":[4762,4870],"source":"\nRecords of meta configuration setting operation is added to the return of Get-DscConfigurationStatus cmdlet."},{"content":"Following is an example of result returned from Get-DscConfigurationStatus –All cmdlet.","pos":[4872,4959]},{"content":"Enhancement in Get-DscLocalConfigurationManager cmdlet","pos":[5332,5386]},{"content":"A new field of LCMStateDetail is added to the object returned from Get-DscLocalConfigurationManager cmdlet.","pos":[5387,5494]},{"content":"This field is populated when LCMState is “Busy”.","pos":[5495,5543]},{"content":"It can be retrieved by following cmdlet:","pos":[5544,5584]},{"content":"Following is an example output of a continuous monitoring on a configuration that requires two reboots on a remote node.","pos":[5654,5774]}],"content":"# Unified and Consistent State and Status Representation\n\nA series of enhancements have been made in this release for automations built LCM state and DSC status. These include unified and consistent state and status representations, manageable datetime property of status objects returned by Get-DscConfigurationStatus cmdlet and enhanced LCM state details property returned by Get-DscLocalConfigurationManager cmdlet.\n\nThe representation of LCM state and DSC operation status are revisited and unified according to following rules:\n1.  Notprocessed resource does not impact LCM state and DSC status.\n2.  LCM stop processing further resources once it encounters a resource that requests reboot.\n3.  A resource that requests reboot is not in desired state until reboot actually happens.\n4.  After encountering a resource that fails, LCM keeps processing further resources as long as they are not dependent on the failure one.\n5.  The overall status returned by Get-DscConfigurationStatus cmdlet is the super set of all resources’ status.\n6.  The PendingReboot state is a superset of PendingConfiguration state.\n\nThe table below illustrates the resultant state and status related properties under a few typical scenarios.\n\n| **Scenario**                    | **LCMState\\***       | **Status** | **Reboot Requested**  | **ResourcesInDesiredState**  | **ResourcesNotInDesiredState** |\n|---------------------------------|----------------------|------------|---------------|------------------------------|--------------------------------|\n| S**^**                          | Idle                 | Success    | $false        | S                            | $null                          |\n| F**^**                          | PendingConfiguration | Failure    | $false        | $null                        | F                              |\n| S,F                             | PendingConfiguration | Failure    | $false        | S                            | F                              |\n| F,S                             | PendingConfiguration | Failure    | $false        | S                            | F                              |\n| S<sub>1</sub>, F, S<sub>2</sub> | PendingConfiguration | Failure    | $false        | S<sub>1</sub>, S<sub>2</sub> | F                              |\n| F<sub>1</sub>, S, F<sub>2</sub> | PendingConfiguration | Failure    | $false        | S                            | F<sub>1</sub>, F<sub>2</sub>   |\n| S, r                            | PendingReboot        | Success    | $true         | S                            | r                              |\n| F, r                            | PendingReboot        | Failure    | $true         | $null                        | F, r                           |\n| r, S                            | PendingReboot        | Success    | $true         | $null                        | r                              |\n| r, F                            | PendingReboot        | Success    | $true         | $null                        | r                              |\n\n^\nS<sub>i</sub>: A series of resources that applied successfully\nF<sub>i</sub>: A series of resources that applied unsuccessfully\nr: A resource that requires reboot\n\\*\n\n```powershell\n$LCMState = (Get-DscLocalConfigurationManager).LCMState\n$Status = (Get-DscConfigurationStatus).Status\n\n$RebootRequested = (Get-DscConfigurationStatus).RebootRequested\n\n$ResourcesInDesiredState = (Get-DscConfigurationStatus).ResourcesInDesiredState\n\n$ResourcesNotInDesiredState = (Get-DscConfigurationStatus).ResourcesNotInDesiredState\n```\n## Enhancement in Get-DscConfigurationStatus cmdlet\n\nA few enhancements have been made to Get-DscConfigurationStatus cmdlet in this release. Previously, the StartDate property of objects returned by the cmdlet is of String type. Now, it is of Datetime type, which enables complex selecting and filtering easier based on the intrinsic properties of a Datetime object.\n```powershell\n(Get-DscConfigurationStatus).StartDate | fl \\*\nDateTime : Friday, November 13, 2015 1:39:44 PM\nDate : 11/13/2015 12:00:00 AM\nDay : 13\nDayOfWeek : Friday\nDayOfYear : 317\nHour : 13\nKind : Local\nMillisecond : 886\nMinute : 39\nMonth : 11\nSecond : 44\nTicks : 635830187848860000\nTimeOfDay : 13:39:44.8860000\nYear : 2015\n```\n\nFollowing is an example that returns all DSC operation records happened on the same day of week as today.\n```powershell\n(Get-DscConfigurationStatus –All) | where { $\\_.startdate.dayofweek -eq (Get-Date).DayOfWeek }\n```\n\nRecords of operations that do not make changes to node’s configuration (i.e. read only operations) are eliminated. Therefore, Test-DscConfiguration, Get-DscConfiguration operations are no longer adulterated in returned objects from Get-DscConfigurationStatus cmdlet.\nRecords of meta configuration setting operation is added to the return of Get-DscConfigurationStatus cmdlet.\n\nFollowing is an example of result returned from Get-DscConfigurationStatus –All cmdlet.\n```powershell\nAll configuration operations:\n\nStatus StartDate Type RebootRequested\n------ --------- ---- ---------------\nSuccess 11/13/2015 11:38:16 AM Consistency False\nSuccess 11/13/2015 11:23:16 AM Reboot False\nSuccess 11/13/2015 11:21:43 AM Reboot True\nSuccess 11/13/2015 11:20:44 AM Initial True\nSuccess 11/13/2015 11:20:44 AM LocalConfigurationManager False\n```\n\n## Enhancement in Get-DscLocalConfigurationManager cmdlet\nA new field of LCMStateDetail is added to the object returned from Get-DscLocalConfigurationManager cmdlet. This field is populated when LCMState is “Busy”. It can be retrieved by following cmdlet:\n```powershell\n(Get-DscLocalConfigurationManager).LCMStateDetail\n```\n\nFollowing is an example output of a continuous monitoring on a configuration that requires two reboots on a remote node.\n```powershell\nStart a configuration that requires two reboots\n\nMonitor LCM State:\nLCM State: Busy, LCM is applying a new configuration.\nLCM State: PendingReboot,\nMachine is rebooting...\nLCM State: Busy, LCM is continuing applying configuration after last reboot.\nLCM State: PendingReboot,\nMachine is rebooting...\nLCM State: Busy, LCM is continuing applying configuration after last reboot.\nLCM State: Idle,\nLCM State: Busy, LCM is performing a consistency check.\nLCM State: Idle,\n```\n"}