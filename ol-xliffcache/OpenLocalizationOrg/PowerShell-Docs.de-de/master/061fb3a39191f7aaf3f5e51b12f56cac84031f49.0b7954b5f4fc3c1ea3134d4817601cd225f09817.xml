{"nodes":[{"content":"Creating and Connecting to a JEA Endpoint","pos":[2,43]},{"pos":[44,238],"content":"To create a JEA endpoint, you need to create and register a specially-configured PowerShell Session Configuration file, which can be generated with the <bpt id=\"p1\">**</bpt>New-PSSessionConfigurationFile<ept id=\"p1\">**</ept> cmdlet.","source":"To create a JEA endpoint, you need to create and register a specially-configured PowerShell Session Configuration file, which can be generated with the **New-PSSessionConfigurationFile** cmdlet."},{"content":"This will create a session configuration file that looks like this:","pos":[543,610]},{"content":"When creating a JEA endpoint, the following parameters of the command (and corresponding keys in the file) must be set:","pos":[1867,1986]},{"content":"SessionType to RestrictedRemoteServer","pos":[1991,2028]},{"pos":[2033,2065],"content":"RunAsVirtualAccount to <bpt id=\"p1\">**</bpt>$true<ept id=\"p1\">**</ept>","source":"RunAsVirtualAccount to **$true**"},{"content":"TranscriptPath to the directory where “over the shoulder” transcripts will be saved after each session","pos":[2070,2172]},{"content":"RoleDefinitions to a hashtable that defines which groups have access to which “Role Capabilities.”","pos":[2177,2275]},{"content":"This field defines <bpt id=\"p1\">**</bpt>who<ept id=\"p1\">**</ept> can do <bpt id=\"p2\">**</bpt>what<ept id=\"p2\">**</ept> on this endpoint.","pos":[2277,2337],"source":"  This field defines **who** can do **what** on this endpoint."},{"content":"Role Capabilities are special files that will be explained shortly.","pos":[2340,2407]},{"content":"The RoleDefinitions field defines which groups had access to which Role Capabilities.","pos":[2410,2495]},{"content":"A Role Capability is a file that defines a set of capabilities that will be exposed to connecting users.","pos":[2497,2601]},{"content":"You can create Role Capabilities with the <bpt id=\"p1\">**</bpt>New-PSRoleCapabilityFile<ept id=\"p1\">**</ept> command.","pos":[2603,2682],"source":"  You can create Role Capabilities with the **New-PSRoleCapabilityFile** command."},{"content":"This will generate a template role capability that looks like this:","pos":[2826,2893]},{"content":"To be used by a JEA session configuration, Role Capabilities must be saved as a valid PowerShell module in a directory named “RoleCapabilities”.","pos":[5528,5672]},{"content":"A module may have multiple role capability files, if desired.","pos":[5673,5734]},{"content":"To start configuring which cmdlets, functions, aliases, and scripts a user may access when connecting to a JEA session, add your own rules to the Role Capability file following the commented out templates.","pos":[5736,5941]},{"content":"For a deeper look into how you can configure Role Capabilities, check out the full <bpt id=\"p1\">[</bpt>experience guide<ept id=\"p1\">](http://aka.ms/JEA)</ept>.","pos":[5942,6063],"source":" For a deeper look into how you can configure Role Capabilities, check out the full [experience guide](http://aka.ms/JEA)."},{"pos":[6065,6274],"content":"Finally, once you have finished customizing your session configuration and related Role Capabilities, register this session configuration and create the endpoint by running <bpt id=\"p1\">**</bpt>Register-PSSessionConfiguration<ept id=\"p1\">**</ept>.","source":"Finally, once you have finished customizing your session configuration and related Role Capabilities, register this session configuration and create the endpoint by running **Register-PSSessionConfiguration**."},{"content":"Connect to a JEA Endpoint","pos":[6399,6424]},{"content":"Connecting to a JEA Endpoint works the same way connecting to any other PowerShell endpoint works.","pos":[6425,6523]},{"content":"You simply have to give your JEA endpoint name as the “ConfigurationName” parameter for <bpt id=\"p1\">**</bpt>New-PSSession<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Invoke-Command<ept id=\"p2\">**</ept>, or <bpt id=\"p3\">**</bpt>Enter-PSSession<ept id=\"p3\">**</ept>.","pos":[6525,6675],"source":"  You simply have to give your JEA endpoint name as the “ConfigurationName” parameter for **New-PSSession**, **Invoke-Command**, or **Enter-PSSession**."},{"content":"Once you have connected to the JEA session, you will be limited to running the commands whitelisted in the Role Capabilities that you have access to.","pos":[6766,6915]},{"content":"If you try to run any command not allowed for your role, you will encounter an error.","pos":[6916,7001]}],"content":"# Creating and Connecting to a JEA Endpoint\nTo create a JEA endpoint, you need to create and register a specially-configured PowerShell Session Configuration file, which can be generated with the **New-PSSessionConfigurationFile** cmdlet.\n\n```powershell\nNew-PSSessionConfigurationFile -SessionType RestrictedRemoteServer -TranscriptDirectory \"C:\\ProgramData\\JEATranscripts\" -RunAsVirtualAccount -RoleDefinitions @{ 'CONTOSO\\NonAdmin_Operators' = @{ RoleCapabilities = 'Maintenance' }} -Path \"$env:ProgramData\\JEAConfiguration\\Demo.pssc\" \n```\n\nThis will create a session configuration file that looks like this: \n```powershell\n@{\n\n# Version number of the schema used for this document\nSchemaVersion = '2.0.0.0'\n\n# ID used to uniquely identify this document\nGUID = 'a384fdd3-5830-4a2c-ac86-cdd1822c3afd'\n\n# Author of this document\nAuthor = 'Administrator'\n\n# Description of the functionality provided by these settings\n# Description = ''\n\n# Session type defaults to apply for this session configuration. Can be 'RestrictedRemoteServer' (recommended), 'Empty', or 'Default'\nSessionType = 'RestrictedRemoteServer'\n\n# Directory to place session transcripts for this session configuration\nTranscriptDirectory = 'C:\\ProgramData\\JEATranscripts'\n\n# Whether to run this session configuration as the machine's (virtual) administrator account\nRunAsVirtualAccount = $true\n\n# Groups associated with machine's (virtual) administrator account\n# RunAsVirtualAccountGroups = 'Remote Desktop Users', 'Remote Management Users'\n\n# Scripts to run when applied to a session\n# ScriptsToProcess = 'C:\\ConfigData\\InitScript1.ps1', 'C:\\ConfigData\\InitScript2.ps1'\n\n# User roles (security groups), and the Role Capabilities that should be applied to them when applied to a session\nRoleDefinitions = @{\n    'CONTOSO\\NonAdmin_Operators' = @{\n        'RoleCapabilities' = 'Maintenance' } }\n\n} \n```\nWhen creating a JEA endpoint, the following parameters of the command (and corresponding keys in the file) must be set:\n1.  SessionType to RestrictedRemoteServer\n2.  RunAsVirtualAccount to **$true**\n3.  TranscriptPath to the directory where “over the shoulder” transcripts will be saved after each session\n4.  RoleDefinitions to a hashtable that defines which groups have access to which “Role Capabilities.”  This field defines **who** can do **what** on this endpoint.   Role Capabilities are special files that will be explained shortly.\n\n\nThe RoleDefinitions field defines which groups had access to which Role Capabilities.  A Role Capability is a file that defines a set of capabilities that will be exposed to connecting users.  You can create Role Capabilities with the **New-PSRoleCapabilityFile** command.\n\n```powershell\nNew-PSRoleCapabilityFile -Path \"$env:ProgramFiles\\WindowsPowerShell\\Modules\\DemoModule\\RoleCapabilities\\Maintenance.psrc\" \n```\n\nThis will generate a template role capability that looks like this:\n```\n@{\n\n# ID used to uniquely identify this document\nGUID = '9287a34f-3f0e-4fbe-9dd7-f1361ba9fd65'\n\n# Author of this document\nAuthor = 'Administrator'\n\n# Description of the functionality provided by these settings\n# Description = ''\n\n# Company associated with this document\nCompanyName = 'Unknown'\n\n# Copyright statement for this document\nCopyright = '(c) 2015 Administrator. All rights reserved.'\n\n# Modules to import when applied to a session\n# ModulesToImport = 'MyCustomModule', @{ ModuleName = 'MyCustomModule'; ModuleVersion = '1.0.0.0'; GUID = '4d30d5f0-cb16-4898-812d-f20a6c596bdf' }\n\n# Aliases to make visible when applied to a session\n# VisibleAliases = 'Item1', 'Item2'\n\n# Cmdlets to make visible when applied to a session\n# VisibleCmdlets = 'Invoke-Cmdlet1', @{ Name = 'Invoke-Cmdlet2'; Parameters = @{ Name = 'Parameter1'; ValidateSet = 'Item1', 'Item2' }, @{ Name = 'Parameter2'; ValidatePattern = 'L*' } }\n\n# Functions to make visible when applied to a session\n# VisibleFunctions = 'Invoke-Function1', @{ Name = 'Invoke-Function2'; Parameters = @{ Name = 'Parameter1'; ValidateSet = 'Item1', 'Item2' }, @{ Name = 'Parameter2'; ValidatePattern = 'L*' } }\n\n# External commands (scripts and applications) to make visible when applied to a session\n# VisibleExternalCommands = 'Item1', 'Item2'\n\n# Providers to make visible when applied to a session\n# VisibleProviders = 'Item1', 'Item2'\n\n# Scripts to run when applied to a session\n# ScriptsToProcess = 'C:\\ConfigData\\InitScript1.ps1', 'C:\\ConfigData\\InitScript2.ps1'\n\n# Aliases to be defined when applied to a session\n# AliasDefinitions = @{ Name = 'Alias1'; Value = 'Invoke-Alias1'}, @{ Name = 'Alias2'; Value = 'Invoke-Alias2'}\n\n# Functions to define when applied to a session\n# FunctionDefinitions = @{ Name = 'MyFunction'; ScriptBlock = { param($MyInput) $MyInput } }\n\n# Variables to define when applied to a session\n# VariableDefinitions = @{ Name = 'Variable1'; Value = { 'Dynamic' + 'InitialValue' } }, @{ Name = 'Variable2'; Value = 'StaticInitialValue' }\n\n# Environment variables to define when applied to a session\n# EnvironmentVariables = @{ Variable1 = 'Value1'; Variable2 = 'Value2' }\n\n# Type files (.ps1xml) to load when applied to a session\n# TypesToProcess = 'C:\\ConfigData\\MyTypes.ps1xml', 'C:\\ConfigData\\OtherTypes.ps1xml'\n\n# Format files (.ps1xml) to load when applied to a session\n# FormatsToProcess = 'C:\\ConfigData\\MyFormats.ps1xml', 'C:\\ConfigData\\OtherFormats.ps1xml'\n\n# Assemblies to load when applied to a session\n# AssembliesToLoad = 'System.Web', 'System.OtherAssembly, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\n\n} \n\n```\nTo be used by a JEA session configuration, Role Capabilities must be saved as a valid PowerShell module in a directory named “RoleCapabilities”. A module may have multiple role capability files, if desired.\n\nTo start configuring which cmdlets, functions, aliases, and scripts a user may access when connecting to a JEA session, add your own rules to the Role Capability file following the commented out templates. For a deeper look into how you can configure Role Capabilities, check out the full [experience guide](http://aka.ms/JEA).\n\nFinally, once you have finished customizing your session configuration and related Role Capabilities, register this session configuration and create the endpoint by running **Register-PSSessionConfiguration**.\n\n```powershell\nRegister-PSSessionConfiguration -Name Maintenance -Path \"C:\\ProgramData\\JEAConfiguration\\Demo.pssc\" \n```\n\n## Connect to a JEA Endpoint\nConnecting to a JEA Endpoint works the same way connecting to any other PowerShell endpoint works.  You simply have to give your JEA endpoint name as the “ConfigurationName” parameter for **New-PSSession**, **Invoke-Command**, or **Enter-PSSession**.\n\n```powershell\nEnter-PSSession -ConfigurationName Maintenance -ComputerName localhost\n```\nOnce you have connected to the JEA session, you will be limited to running the commands whitelisted in the Role Capabilities that you have access to. If you try to run any command not allowed for your role, you will encounter an error."}