{"nodes":[{"content":"Cryptographic Message Syntax (CMS) cmdlets","pos":[2,44]},{"pos":[46,268],"content":"The Cryptographic Message Syntax cmdlets support encryption and decryption of content using the IETF standard format for cryptographically protecting messages as documented by <bpt id=\"p1\">[</bpt>RFC5652<ept id=\"p1\">](http://tools.ietf.org/html/rfc5652)</ept>.","source":"The Cryptographic Message Syntax cmdlets support encryption and decryption of content using the IETF standard format for cryptographically protecting messages as documented by [RFC5652](http://tools.ietf.org/html/rfc5652)."},{"pos":[1049,1241],"content":"The CMS encryption standard implements public key cryptography, where the keys used to encrypt content (the <bpt id=\"p1\">*</bpt>public key<ept id=\"p1\">*</ept>) and the keys used to decrypt content (the <bpt id=\"p2\">*</bpt>private key<ept id=\"p2\">*</ept>) are separate.","source":"The CMS encryption standard implements public key cryptography, where the keys used to encrypt content (the *public key*) and the keys used to decrypt content (the *private key*) are separate."},{"content":"Your public key can be shared widely, and is not sensitive data.","pos":[1243,1307]},{"content":"If any content is encrypted with this public key, only your private key can decrypt it.","pos":[1308,1395]},{"content":"For more information about Public Key Cryptography, see: <bpt id=\"p1\">&lt;</bpt>http://en.wikipedia.org/wiki/Public-key_cryptography<ept id=\"p1\">&gt;</ept>.","pos":[1396,1508],"source":" For more information about Public Key Cryptography, see: <http://en.wikipedia.org/wiki/Public-key_cryptography>."},{"content":"To be recognized in PowerShell, encryption certificates require a unique key usage identifier (EKU) to identify them as data encryption certificates (like the identifiers for 'Code Signing', 'Encrypted Mail').","pos":[1510,1719]},{"content":"Here is an example of creating a certificate that is good for Document Encryption:","pos":[1721,1803]},{"content":"Then run:","pos":[2486,2495]},{"content":"And you can now encrypt and decrypt content:","pos":[2574,2618]},{"pos":[3424,3516],"content":"Any parameter of type <bpt id=\"p1\">**</bpt>CMSMessageRecipient<ept id=\"p1\">**</ept> supports identifiers in the following formats:","source":"Any parameter of type **CMSMessageRecipient** supports identifiers in the following formats:"},{"content":"An actual certificate (as retrieved from the certificate provider)","pos":[3519,3585]},{"content":"Path to the a file containing the certificate","pos":[3588,3633]},{"content":"Path to a directory containing the certificate","pos":[3636,3682]},{"content":"Thumbprint of the certificate (used to look in the certificate store)","pos":[3685,3754]},{"content":"Subject name of the certificate (used to look in the certificate store)","pos":[3757,3828]},{"pos":[3830,3962],"content":"To view document encryption certificates in the certificate provider, you can use the <bpt id=\"p1\">**</bpt>-DocumentEncryptionCert<ept id=\"p1\">**</ept> dynamic parameter:","source":"To view document encryption certificates in the certificate provider, you can use the **-DocumentEncryptionCert** dynamic parameter:"}],"content":"# Cryptographic Message Syntax (CMS) cmdlets\n\nThe Cryptographic Message Syntax cmdlets support encryption and decryption of content using the IETF standard format for cryptographically protecting messages as documented by [RFC5652](http://tools.ietf.org/html/rfc5652).\n\n```powershell\nGet-CmsMessage [-Content] <string>\nGet-CmsMessage [-Path] <string>\nGet-CmsMessage [-LiteralPath] <string>\nProtect-CmsMessage [-To] <CmsMessageRecipient[]> [-Content] <string> [[-OutFile] <string>]\nProtect-CmsMessage [-To] <CmsMessageRecipient[]> [-Path] <string> [[-OutFile] <string>]\nProtect-CmsMessage [-To] <CmsMessageRecipient[]> [-LiteralPath] <string> [[-OutFile] <string>]\nUnprotect-CmsMessage [-EventLogRecord] <EventLogRecord> [[-To] <CmsMessageRecipient[]>] [-IncludeContext]\nUnprotect-CmsMessage [-Content] <string> [[-To] <CmsMessageRecipient[]>] [-IncludeContext]\nUnprotect-CmsMessage [-Path] <string> [[-To] <CmsMessageRecipient[]>] [-IncludeContext]\nUnprotect-CmsMessage [-LiteralPath] <string> [[-To] <CmsMessageRecipient[]>] [-IncludeContext]\n```\n\nThe CMS encryption standard implements public key cryptography, where the keys used to encrypt content (the *public key*) and the keys used to decrypt content (the *private key*) are separate.\n\nYour public key can be shared widely, and is not sensitive data. If any content is encrypted with this public key, only your private key can decrypt it. For more information about Public Key Cryptography, see: <http://en.wikipedia.org/wiki/Public-key_cryptography>.\n\nTo be recognized in PowerShell, encryption certificates require a unique key usage identifier (EKU) to identify them as data encryption certificates (like the identifiers for 'Code Signing', 'Encrypted Mail').\n\nHere is an example of creating a certificate that is good for Document Encryption:\n\n```powershell\n(Change the text in **Subject** to your name, email, or other identifier), and put in a file (i.e.: DocumentEncryption.inf):\n[Version]\nSignature = \"$Windows NT$\"\n[Strings]\nszOID\\_ENHANCED\\_KEY\\_USAGE = \"2.5.29.37\"\nszOID\\_DOCUMENT\\_ENCRYPTION = \"1.3.6.1.4.1.311.80.1\"\n[NewRequest]\nSubject = \"<cn=me@somewhere.com>\"\nMachineKeySet = false\nKeyLength = 2048\nKeySpec = AT\\_KEYEXCHANGE\nHashAlgorithm = Sha1\nExportable = true\nRequestType = Cert\nKeyUsage = \"CERT\\_KEY\\_ENCIPHERMENT\\_KEY\\_USAGE | CERT\\_DATA\\_ENCIPHERMENT\\_KEY\\_USAGE\"\nValidityPeriod = \"Years\"\nValidityPeriodUnits = \"1000\"\n[Extensions]\n%szOID\\_ENHANCED\\_KEY\\_USAGE% = \"{text}%szOID\\_DOCUMENT\\_ENCRYPTION%\"\n```\n\nThen run:\n```powershell\ncertreq -new DocumentEncryption.inf DocumentEncryption.cer\n```\n\nAnd you can now encrypt and decrypt content:\n\n```powershell\n$protected = \"Hello World\" | Protect-CmsMessage -To \"\\*me@somewhere.com\\*[](mailto:*leeholm@microsoft.com*)\"\n$protected\n-----BEGIN CMS-----\nMIIBqAYJKoZIhvcNAQcDoIIBmTCCAZUCAQAxggFQMIIBTAIBADA0MCAxHjAcBgNVBAMMFWxlZWhv\nbG1AbWljcm9zb2Z0LmNvbQIQQYHsbcXnjIJCtH+OhGmc1DANBgkqhkiG9w0BAQcwAASCAQAnkFHM\nproJnFy4geFGfyNmxH3yeoPvwEYzdnsoVqqDPAd8D3wao77z7OhJEXwz9GeFLnxD6djKV/tF4PxR\nE27aduKSLbnxfpf/sepZ4fUkuGibnwWFrxGE3B1G26MCenHWjYQiqv+Nq32Gc97qEAERrhLv6S4R\nG+2dJEnesW8A+z9QPo+DwYU5FzD0Td0ExrkswVckpLNR6j17Yaags3ltNVmbdEXekhi6Psf2MLMP\nTSO79lv2L0KeXFGuPOrdzPAwCkV0vNEqTEBeDnZGrjv/5766bM3GW34FXApod9u+VSFpBnqVOCBA\nDVDraA6k+xwBt66cV84OHLkh0kT02SIHMDwGCSqGSIb3DQEHATAdBglghkgBZQMEASoEEJbJaiRl\nKMnBoD1dkb/FzSWAEBaL8xkFwCu0e1ZtDj7nSJc=\n-----END CMS-----\n\n$protected | Unprotect-CmsMessage\nHello World\n```\n\nAny parameter of type **CMSMessageRecipient** supports identifiers in the following formats:\n- An actual certificate (as retrieved from the certificate provider)\n- Path to the a file containing the certificate\n- Path to a directory containing the certificate\n- Thumbprint of the certificate (used to look in the certificate store)\n- Subject name of the certificate (used to look in the certificate store)\n\nTo view document encryption certificates in the certificate provider, you can use the **-DocumentEncryptionCert** dynamic parameter:\n\n```powershell\ndir -DocumentEncryptionCert\n```"}