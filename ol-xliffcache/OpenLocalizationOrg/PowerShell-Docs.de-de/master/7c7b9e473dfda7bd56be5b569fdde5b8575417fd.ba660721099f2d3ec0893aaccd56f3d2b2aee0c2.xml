{"nodes":[{"pos":[13,67],"content":"Writing a single-instance DSC resource (best practice)","needQuote":true,"nodes":[{"content":"Writing a single-instance DSC resource (best practice)","pos":[0,54]}]},{"pos":[100,114],"content":"powershell,DSC","needQuote":true,"nodes":[{"content":"powershell,DSC","pos":[0,14]}]},{"content":"Writing a single-instance DSC resource (best practice)","pos":[212,266]},{"pos":[269,488],"content":"**Note:** This topic describes a best practice for defining a DSC resource that allows only a single instance in a configuration. Currently, there is no built-in DSC feature to do this. That might\nchange in the future.","leadings":["",">"],"nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> This topic describes a best practice for defining a DSC resource that allows only a single instance in a configuration.","pos":[0,129],"source":"**Note:** This topic describes a best practice for defining a DSC resource that allows only a single instance in a configuration."},{"content":"Currently, there is no built-in DSC feature to do this.","pos":[130,185]},{"content":"That might change in the future.","pos":[186,218],"source":" That might\nchange in the future."}]},{"content":"There are situations where you don't want to allow a resource to be used multiple times in a configuration.","pos":[490,597]},{"content":"For example, in a previous implementation of the <bpt id=\"p1\">[</bpt>xTimeZone<ept id=\"p1\">](https://github.com/PowerShell/xTimeZone)</ept> resource, a configuration could call the resource multiple times, setting the time zone to a different setting in each resource block:","pos":[598,835],"source":" For example, in a previous implementation of the \n[xTimeZone](https://github.com/PowerShell/xTimeZone) resource, a configuration could call the resource multiple times, setting the time zone to a different setting in each resource block:"},{"content":"This is because of the way DSC resource keys work.","pos":[1283,1333]},{"content":"A resource must have at least one key property.","pos":[1334,1381]},{"content":"A resource instance is considered unique if the combination of the values of all of its key properties is unique.","pos":[1382,1496],"source":" A resource instance is considered unique if the combination of the values of all of \nits key properties is unique."},{"content":"In its previous implementation, the <bpt id=\"p1\">[</bpt>xTimeZone<ept id=\"p1\">](https://github.com/PowerShell/xTimeZone)</ept> resource had only one property--<bpt id=\"p2\">**</bpt>TimeZone<ept id=\"p2\">**</ept>, which was required to be a key.","pos":[1497,1664],"source":" In its previous implementation, the [xTimeZone](https://github.com/PowerShell/xTimeZone) resource had only one property--**TimeZone**, which was required \nto be a key."},{"content":"Because of this, a configuration such as the one above would compile and run without warning.","pos":[1665,1758]},{"content":"Each of the <bpt id=\"p1\">**</bpt>xTimeZone<ept id=\"p1\">**</ept> resource blocks is considered unique.","pos":[1759,1822],"source":" Each of the **xTimeZone** resource blocks is considered unique."},{"content":"This would cause the configuration to be repeatedly applied to the node, cycling the timezone back and forth.","pos":[1823,1933],"source":" This would cause the \nconfiguration to be repeatedly applied to the node, cycling the timezone back and forth."},{"content":"To ensure that a configuration could set the time zone for a target node only once, the resource was updated to add a second property, <bpt id=\"p1\">**</bpt>IsSingleInstance<ept id=\"p1\">**</ept>, that became the key property.","pos":[1935,2121],"source":"To ensure that a configuration could set the time zone for a target node only once, the resource was updated to add a second property, **IsSingleInstance**, that became the key property."},{"content":"The <bpt id=\"p1\">**</bpt>IsSingleInstance<ept id=\"p1\">**</ept> was limited to a single value, \"Yes\" by using a <bpt id=\"p2\">**</bpt>ValueMap<ept id=\"p2\">**</ept>.","pos":[2122,2209],"source":" \nThe **IsSingleInstance** was limited to a single value, \"Yes\" by using a **ValueMap**."},{"content":"The old MOF schema for the resource was:","pos":[2210,2250]},{"content":"The updated MOF schema for the resource is:","pos":[2431,2474]},{"content":"The resource script was also updated to use the new parameter.","pos":[2812,2874]},{"content":"Here is the old resource script:","pos":[2875,2907]},{"content":"Notice that the <bpt id=\"p1\">**</bpt>TimeZone<ept id=\"p1\">**</ept> property is no longer a key.","pos":[5382,5439],"source":"Notice that the **TimeZone** property is no longer a key."},{"content":"Now, if a configuration attempts to set the time zone twice (by using two different <bpt id=\"p1\">**</bpt>xTimeZone<ept id=\"p1\">**</ept> blocks with different <bpt id=\"p2\">**</bpt>TimeZone<ept id=\"p2\">**</ept> values), attempting to compile the configuration will cause an error:","pos":[5440,5642],"source":" Now, if a configuration attempts to set the time zone twice (by using two different **xTimeZone** blocks with different **TimeZone**\nvalues), attempting to compile the configuration will cause an error:"}],"content":"---\ntitle:   Writing a single-instance DSC resource (best practice)\nms.date:  2016-05-16\nkeywords:  powershell,DSC\ndescription:  \nms.topic:  article\nauthor:  eslesar\nmanager:  dongill\nms.prod:  powershell\n---\n\n# Writing a single-instance DSC resource (best practice)\n\n>**Note:** This topic describes a best practice for defining a DSC resource that allows only a single instance in a configuration. Currently, there is no built-in DSC feature to do this. That might\n>change in the future.\n\nThere are situations where you don't want to allow a resource to be used multiple times in a configuration. For example, in a previous implementation of the \n[xTimeZone](https://github.com/PowerShell/xTimeZone) resource, a configuration could call the resource multiple times, setting the time zone to a different setting in each resource block:\n\n```powershell\nConfiguration SetTimeZone \n{ \n    Param \n    ( \n        [String[]]$NodeName = $env:COMPUTERNAME \n\n    ) \n\n    Import-DSCResource -ModuleName xTimeZone \n \n \n    Node $NodeName \n    { \n         xTimeZone TimeZoneExample \n         { \n        \n            TimeZone = 'Eastern Standard Time' \n         } \n\n         xTimeZone TimeZoneExample2\n         {\n\n            TimeZone = 'Pacific Standard Time'\n\n         }        \n\n    } \n} \n```\n\nThis is because of the way DSC resource keys work. A resource must have at least one key property. A resource instance is considered unique if the combination of the values of all of \nits key properties is unique. In its previous implementation, the [xTimeZone](https://github.com/PowerShell/xTimeZone) resource had only one property--**TimeZone**, which was required \nto be a key. Because of this, a configuration such as the one above would compile and run without warning. Each of the **xTimeZone** resource blocks is considered unique. This would cause the \nconfiguration to be repeatedly applied to the node, cycling the timezone back and forth.\n\nTo ensure that a configuration could set the time zone for a target node only once, the resource was updated to add a second property, **IsSingleInstance**, that became the key property. \nThe **IsSingleInstance** was limited to a single value, \"Yes\" by using a **ValueMap**. The old MOF schema for the resource was:\n\n```powershell\n[ClassVersion(\"1.0.0.0\"), FriendlyName(\"xTimeZone\")]\nclass xTimeZone : OMI_BaseResource\n{\n    [Key, Description(\"Specifies the TimeZone.\")] String TimeZone;\n};\n```\n\nThe updated MOF schema for the resource is:\n\n```powershell\n[ClassVersion(\"1.0.0.0\"), FriendlyName(\"xTimeZone\")]\nclass xTimeZone : OMI_BaseResource\n{\n    [Key, Description(\"Specifies the resource is a single instance, the value must be 'Yes'\"), ValueMap{\"Yes\"}, Values{\"Yes\"}] String IsSingleInstance;\n    [Required, Description(\"Specifies the TimeZone.\")] String TimeZone;\n};\n```\n\nThe resource script was also updated to use the new parameter. Here is the old resource script:\n\n```powershell\nfunction Get-TargetResource\n{\n    [CmdletBinding()]\n    [OutputType([Hashtable])]\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [ValidateSet('Yes')]\n        [String]\n        $IsSingleInstance,\n\n        [parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $TimeZone\n    )\n\n    #Get the current TimeZone\n    $CurrentTimeZone = Get-TimeZone\n\n    $returnValue = @{\n        TimeZone = $CurrentTimeZone\n        IsSingleInstance = 'Yes'\n    }\n\n    #Output the target resource\n    $returnValue\n}\n\n\nfunction Set-TargetResource\n{\n    [CmdletBinding(SupportsShouldProcess=$true)]\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [ValidateSet('Yes')]\n        [String]\n        $IsSingleInstance,\n\n        [parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $TimeZone\n    )\n    \n    #Output the result of Get-TargetResource function.\n    $CurrentTimeZone = Get-TimeZone\n    \n    if($PSCmdlet.ShouldProcess(\"'$TimeZone'\",\"Replace the System Time Zone\"))\n    {\n        try\n        {\n            if($CurrentTimeZone -ne $TimeZone)\n            {\n                Write-Verbose -Verbose \"Setting the TimeZone\"\n                Set-TimeZone -TimeZone $TimeZone}\n            else\n            {\n                Write-Verbose -Verbose \"TimeZone already set to $TimeZone\"\n            }\n        }\n        catch\n        {\n            $ErrorMsg = $_.Exception.Message\n            Write-Verbose -Verbose $ErrorMsg\n        }\n    }\n}\n\n\nfunction Test-TargetResource\n{\n    [CmdletBinding()]\n    [OutputType([Boolean])]\n    param\n    (\n        [parameter(Mandatory = $true)]\n        [ValidateSet('Yes')]\n        [String]\n        $IsSingleInstance, \n\n        [parameter(Mandatory = $true)]\n        [ValidateNotNullOrEmpty()]\n        [String]\n        $TimeZone\n    )\n\n    #Output from Get-TargetResource\n    $CurrentTimeZone = Get-TimeZone\n\n    if($TimeZone -eq $CurrentTimeZone)\n    {\n        return $true\n    }\n    else\n    {\n        return $false\n    }\n}\n\nFunction Get-TimeZone {\n    [CmdletBinding()]\n    param()\n\n    & tzutil.exe /g\n}\n\nFunction Set-TimeZone {\n    [CmdletBinding()]\n    param(\n        [Parameter(Mandatory=$true)]\n        [System.String]\n        $TimeZone\n    )\n\n    try\n    {\n        & tzutil.exe /s $TimeZone\n    }\n    catch\n    {\n        $ErrorMsg = $_.Exception.Message\n        Write-Verbose $ErrorMsg\n    }\n}\n\nExport-ModuleMember -Function *-TargetResource\n```\n\nNotice that the **TimeZone** property is no longer a key. Now, if a configuration attempts to set the time zone twice (by using two different **xTimeZone** blocks with different **TimeZone**\nvalues), attempting to compile the configuration will cause an error:\n\n```powershell\nTest-ConflictingResources : A conflict was detected between resources '[xTimeZone]TimeZoneExample (::15::10::xTimeZone)' and \n'[xTimeZone]TimeZoneExample2 (::22::10::xTimeZone)' in node 'CONTOSO-CLIENT'. Resources have identical key properties but there are differences in the \nfollowing non-key properties: 'TimeZone'. Values 'Eastern Standard Time' don't match values 'Pacific Standard Time'. Please update these property \nvalues so that they are identical in both cases.\nAt line:271 char:9\n+         Test-ConflictingResources $keywordName $canonicalizedValue $k ...\n+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidOperation: (:) [Write-Error], InvalidOperationException\n    + FullyQualifiedErrorId : ConflictingDuplicateResource,Test-ConflictingResources\nErrors occurred while processing configuration 'SetTimeZone'.\nAt C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\PSDesiredStateConfiguration\\PSDesiredStateConfiguration.psm1:3705 char:5\n+     throw $ErrorRecord\n+     ~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidOperation: (SetTimeZone:String) [], InvalidOperationException\n    + FullyQualifiedErrorId : FailToProcessConfiguration\n```\n   \n"}