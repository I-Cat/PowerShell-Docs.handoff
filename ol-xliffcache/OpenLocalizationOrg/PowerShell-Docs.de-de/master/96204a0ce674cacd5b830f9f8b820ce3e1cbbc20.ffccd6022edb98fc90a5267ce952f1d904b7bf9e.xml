{"nodes":[{"pos":[12,50],"content":"Collecting Information About Computers","needQuote":true,"nodes":[{"content":"Collecting Information About Computers","pos":[0,38]}]},{"pos":[83,100],"content":"powershell,cmdlet","needQuote":true,"nodes":[{"content":"powershell,cmdlet","pos":[0,17]}]},{"content":"Collecting Information About Computers","pos":[248,286]},{"content":"<bpt id=\"p1\">**</bpt>Get-WmiObject<ept id=\"p1\">**</ept> is the most important cmdlet for general system management tasks.","pos":[287,370],"source":"**Get-WmiObject** is the most important cmdlet for general system management tasks."},{"content":"All critical subsystem settings are exposed through WMI.","pos":[371,427]},{"content":"Furthermore, WMI treats data as objects that are in collections of one or more items.","pos":[428,513]},{"content":"Because Windows PowerShell also works with objects and has a pipeline that allows you to treat single or multiple objects in the same way, generic WMI access allows you to perform some advanced tasks with very little work.","pos":[514,736]},{"content":"The following examples demonstrate how to collect specific information by using <bpt id=\"p1\">**</bpt>Get-WmiObject<ept id=\"p1\">**</ept> against an arbitrary computer.","pos":[738,866],"source":"The following examples demonstrate how to collect specific information by using **Get-WmiObject** against an arbitrary computer."},{"content":"We specify the <bpt id=\"p1\">**</bpt>ComputerName<ept id=\"p1\">**</ept> parameter with the dot value (<bpt id=\"p2\">**</bpt>.<ept id=\"p2\">**</ept>), which represents the local computer.","pos":[867,973],"source":" We specify the **ComputerName** parameter with the dot value (**.**), which represents the local computer."},{"content":"You can specify a name or IP address associated with any computer you can reach through WMI.","pos":[974,1066]},{"content":"To retrieve information about the local computer, you could omit the <bpt id=\"p1\">**</bpt>-ComputerName.<ept id=\"p1\">**</ept>","pos":[1067,1154],"source":" To retrieve information about the local computer, you could omit the **-ComputerName.**"},{"content":"Listing Desktop Settings","pos":[1160,1184]},{"content":"We'll begin with a command that collects information about the desktops on the local computer.","pos":[1185,1279]},{"content":"This returns information for all desktops, whether they are in use or not.","pos":[1341,1415]},{"pos":[1419,1798],"content":"[!NOTE]\nInformation returned by some WMI classes can be very detailed, and often include metadata about the WMI class. Because most of these metadata properties have names that begin with a double underscore, you can filter the properties using Select-Object. Specify only properties that begin with alphabetic characters by using **[a-z]*** as the Property value. For example:","leadings":["","> "],"nodes":[{"content":"Information returned by some WMI classes can be very detailed, and often include metadata about the WMI class. Because most of these metadata properties have names that begin with a double underscore, you can filter the properties using Select-Object. Specify only properties that begin with alphabetic characters by using **[a-z]*** as the Property value. For example:","pos":[8,377],"nodes":[{"content":"Information returned by some WMI classes can be very detailed, and often include metadata about the WMI class.","pos":[0,110]},{"content":"Because most of these metadata properties have names that begin with a double underscore, you can filter the properties using Select-Object.","pos":[111,251]},{"content":"Specify only properties that begin with alphabetic characters by using <bpt id=\"p1\">**</bpt>[a-z]<ept id=\"p1\">**</ept>* as the Property value.","pos":[252,356],"source":" Specify only properties that begin with alphabetic characters by using **[a-z]*** as the Property value."},{"content":"For example:","pos":[357,369]}]}]},{"pos":[1893,2036],"content":"To filter out the metadata, use a pipeline operator (|) to send the results of the Get-WmiObject command to <bpt id=\"p1\">**</bpt>Select-Object -Property [a-z]<ept id=\"p1\">**</ept>*.","source":"To filter out the metadata, use a pipeline operator (|) to send the results of the Get-WmiObject command to **Select-Object -Property [a-z]***."},{"content":"Listing BIOS Information","pos":[2042,2066]},{"content":"The WMI Win32_BIOS class returns fairly compact and complete information about the system BIOS on the local computer:","pos":[2067,2184]},{"content":"Listing Processor Information","pos":[2247,2276]},{"pos":[2277,2422],"content":"You can retrieve general processor information by using WMI's <bpt id=\"p1\">**</bpt>Win32_Processor<ept id=\"p1\">**</ept> class, although you will likely want to filter the information:","source":"You can retrieve general processor information by using WMI's **Win32_Processor** class, although you will likely want to filter the information:"},{"pos":[2519,2625],"content":"For a generic description string of the processor family, you can just return the <bpt id=\"p1\">**</bpt>SystemType<ept id=\"p1\">**</ept> property:","source":"For a generic description string of the processor family, you can just return the **SystemType** property:"},{"content":"Listing Computer Manufacturer and Model","pos":[2774,2813]},{"content":"Computer model information is also available from <bpt id=\"p1\">**</bpt>Win32_ComputerSystem<ept id=\"p1\">**</ept>.","pos":[2814,2889],"source":"Computer model information is also available from **Win32_ComputerSystem**."},{"content":"The standard displayed output will not need any filtering to provide OEM data:","pos":[2890,2968]},{"content":"Your output from commands such as this, which return information directly from some hardware, is only as good as the data you have.","pos":[3234,3365]},{"content":"Some information is not correctly configured by hardware manufacturers and may therefore be unavailable.","pos":[3366,3470]},{"content":"Listing Installed Hotfixes","pos":[3476,3502]},{"pos":[3503,3578],"content":"You can list all installed hotfixes by using <bpt id=\"p1\">**</bpt>Win32_QuickFixEngineering<ept id=\"p1\">**</ept>:","source":"You can list all installed hotfixes by using **Win32_QuickFixEngineering**:"},{"content":"This class returns a list of hotfixes that looks like this:","pos":[3652,3711]},{"content":"For more succinct output, you may want to exclude some properties.","pos":[3998,4064]},{"content":"Although you can use the <bpt id=\"p1\">**</bpt>Get-WmiObject's Property<ept id=\"p1\">**</ept> parameter to choose only the <bpt id=\"p2\">**</bpt>HotFixID<ept id=\"p2\">**</ept>, doing so will actually return more information, because all the metadata is displayed by default:","pos":[4065,4259],"source":" Although you can use the **Get-WmiObject's Property** parameter to choose only the **HotFixID**, doing so will actually return more information, because all the metadata is displayed by default:"},{"content":"The additional data is returned, because the Property parameter in <bpt id=\"p1\">**</bpt>Get-WmiObject<ept id=\"p1\">**</ept> restricts the properties returned from WMI class instances, not the object returned to Windows PowerShell.","pos":[4607,4798],"source":"The additional data is returned, because the Property parameter in **Get-WmiObject** restricts the properties returned from WMI class instances, not the object returned to Windows PowerShell."},{"content":"To reduce the output, use <bpt id=\"p1\">**</bpt>Select-Object<ept id=\"p1\">**</ept>:","pos":[4799,4843],"source":" To reduce the output, use **Select-Object**:"},{"content":"Listing Operating System Version Information","pos":[5007,5051]},{"content":"The <bpt id=\"p1\">**</bpt>Win32_OperatingSystem<ept id=\"p1\">**</ept> class properties include version and service pack information.","pos":[5052,5144],"source":"The **Win32_OperatingSystem** class properties include version and service pack information."},{"content":"You can explicitly select only these properties to get a version information summary from <bpt id=\"p1\">**</bpt>Win32_OperatingSystem<ept id=\"p1\">**</ept>:","pos":[5145,5261],"source":" You can explicitly select only these properties to get a version information summary from **Win32_OperatingSystem**:"},{"content":"You can also use wildcards with the <bpt id=\"p1\">**</bpt>Select-Object's Property<ept id=\"p1\">**</ept> parameter.","pos":[5434,5509],"source":"You can also use wildcards with the **Select-Object's Property** parameter."},{"content":"Because all the properties beginning with either <bpt id=\"p1\">**</bpt>Build<ept id=\"p1\">**</ept> or <bpt id=\"p2\">**</bpt>ServicePack<ept id=\"p2\">**</ept> are important to use here, we can shorten this to the following form:","pos":[5510,5657],"source":" Because all the properties beginning with either **Build** or **ServicePack** are important to use here, we can shorten this to the following form:"},{"content":"Listing Local Users and Owner","pos":[5949,5978]},{"content":"Local general user information—number of licensed users, current number of users, and owner name—can be found with a selection of <bpt id=\"p1\">**</bpt>Win32_OperatingSystem<ept id=\"p1\">**</ept> properties.","pos":[5979,6146],"source":"Local general user information—number of licensed users, current number of users, and owner name—can be found with a selection of **Win32_OperatingSystem** properties."},{"content":"You can explicitly select the properties to display like this:","pos":[6147,6209]},{"content":"A more succinct version using wildcards is:","pos":[6356,6399]},{"content":"Getting Available Disk Space","pos":[6506,6534]},{"content":"To see the disk space and free space for local drives, you can use the WMI Win32_LogicalDisk class.","pos":[6535,6634]},{"content":"You need to see only instances with a DriveType of 3—the value WMI uses for fixed hard disks.","pos":[6635,6728]},{"content":"Getting Logon Session Information","pos":[7248,7281]},{"content":"You can get general information about logon sessions associated with users through the WMI Win32_LogonSession class:","pos":[7282,7398]},{"content":"Getting the User Logged on to a Computer","pos":[7469,7509]},{"content":"You can display the user logged on to a particular computer system using Win32_ComputerSystem.","pos":[7510,7604]},{"content":"This command returns only the user logged on to the system desktop:","pos":[7605,7672]},{"content":"Getting Local Time from a Computer","pos":[7764,7798]},{"content":"You can retrieve the current local time on a specific computer by using the WMI Win32_LocalTime class.","pos":[7799,7901]},{"content":"Because this class by default displays all metadata, you may want to filter it using <bpt id=\"p1\">**</bpt>Select-Object<ept id=\"p1\">**</ept>:","pos":[7902,8005],"source":" Because this class by default displays all metadata, you may want to filter it using **Select-Object**:"},{"content":"Displaying Service Status","pos":[8286,8311]},{"content":"To view the status of all services on a specific computer, you can locally use the <bpt id=\"p1\">**</bpt>Get-Service<ept id=\"p1\">**</ept> cmdlet as mentioned earlier.","pos":[8312,8439],"source":"To view the status of all services on a specific computer, you can locally use the **Get-Service** cmdlet as mentioned earlier."},{"content":"For remote systems, you can use the WMI Win32_Service class.","pos":[8440,8500]},{"content":"If you also use <bpt id=\"p1\">**</bpt>Select-Object<ept id=\"p1\">**</ept> to filter the results to <bpt id=\"p2\">**</bpt>Status<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Name<ept id=\"p3\">**</ept>, and <bpt id=\"p4\">**</bpt>DisplayName<ept id=\"p4\">**</ept>, the output format will be almost identical to that from <bpt id=\"p5\">**</bpt>Get-Service<ept id=\"p5\">**</ept>:","pos":[8501,8675],"source":" If you also use **Select-Object** to filter the results to **Status**, **Name**, and **DisplayName**, the output format will be almost identical to that from **Get-Service**:"},{"pos":[8787,9046],"content":"To allow the complete display of names for the occasional services with extremely long names, you may want to use <bpt id=\"p1\">**</bpt>Format-Table<ept id=\"p1\">**</ept> with the <bpt id=\"p2\">**</bpt>AutoSize<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>Wrap<ept id=\"p3\">**</ept> parameters, to optimize column width and allow long names to wrap instead of being truncated:","source":"To allow the complete display of names for the occasional services with extremely long names, you may want to use **Format-Table** with the **AutoSize** and **Wrap** parameters, to optimize column width and allow long names to wrap instead of being truncated:"}],"content":"---\ntitle:  Collecting Information About Computers\nms.date:  2016-05-11\nkeywords:  powershell,cmdlet\ndescription:  \nms.topic:  article\nauthor:  jpjofre\nmanager:  dongill\nms.prod:  powershell\nms.assetid:  9e7b6a2d-34f7-4731-a92c-8b3382eb51bb\n---\n\n# Collecting Information About Computers\n**Get-WmiObject** is the most important cmdlet for general system management tasks. All critical subsystem settings are exposed through WMI. Furthermore, WMI treats data as objects that are in collections of one or more items. Because Windows PowerShell also works with objects and has a pipeline that allows you to treat single or multiple objects in the same way, generic WMI access allows you to perform some advanced tasks with very little work.\n\nThe following examples demonstrate how to collect specific information by using **Get-WmiObject** against an arbitrary computer. We specify the **ComputerName** parameter with the dot value (**.**), which represents the local computer. You can specify a name or IP address associated with any computer you can reach through WMI. To retrieve information about the local computer, you could omit the **-ComputerName.**\n\n### Listing Desktop Settings\nWe'll begin with a command that collects information about the desktops on the local computer.\n\n```\nGet-WmiObject -Class Win32_Desktop -ComputerName .\n```\n\nThis returns information for all desktops, whether they are in use or not.\n\n> [!NOTE]\n> Information returned by some WMI classes can be very detailed, and often include metadata about the WMI class. Because most of these metadata properties have names that begin with a double underscore, you can filter the properties using Select-Object. Specify only properties that begin with alphabetic characters by using **[a-z]*** as the Property value. For example:\n\n```\nGet-WmiObject -Class Win32_Desktop -ComputerName . | Select-Object -Property [a-z]*\n```\n\nTo filter out the metadata, use a pipeline operator (|) to send the results of the Get-WmiObject command to **Select-Object -Property [a-z]***.\n\n### Listing BIOS Information\nThe WMI Win32_BIOS class returns fairly compact and complete information about the system BIOS on the local computer:\n\n```\nGet-WmiObject -Class Win32_BIOS -ComputerName .\n```\n\n### Listing Processor Information\nYou can retrieve general processor information by using WMI's **Win32_Processor** class, although you will likely want to filter the information:\n\n```\nGet-WmiObject -Class Win32_Processor -ComputerName . | Select-Object -Property [a-z]*\n```\n\nFor a generic description string of the processor family, you can just return the **SystemType** property:\n\n```\nPS> Get-WmiObject -Class Win32_ComputerSystem -ComputerName . | Select-Object -Property SystemType\nSystemType\n----------\nX86-based PC\n```\n\n### Listing Computer Manufacturer and Model\nComputer model information is also available from **Win32_ComputerSystem**. The standard displayed output will not need any filtering to provide OEM data:\n\n```\nPS> Get-WmiObject -Class Win32_ComputerSystem\nDomain              : WORKGROUP\nManufacturer        : Compaq Presario 06\nModel               : DA243A-ABA 6415cl NA910\nName                : MyPC\nPrimaryOwnerName    : Jane Doe\nTotalPhysicalMemory : 804765696\n```\n\nYour output from commands such as this, which return information directly from some hardware, is only as good as the data you have. Some information is not correctly configured by hardware manufacturers and may therefore be unavailable.\n\n### Listing Installed Hotfixes\nYou can list all installed hotfixes by using **Win32_QuickFixEngineering**:\n\n```\nGet-WmiObject -Class Win32_QuickFixEngineering -ComputerName .\n```\n\nThis class returns a list of hotfixes that looks like this:\n\n```\nDescription         : Update for Windows XP (KB910437)\nFixComments         : Update\nHotFixID            : KB910437\nInstall Date        :\nInstalledBy         : Administrator\nInstalledOn         : 12/16/2005\nName                :\nServicePackInEffect : SP3\nStatus              :\n```\n\nFor more succinct output, you may want to exclude some properties. Although you can use the **Get-WmiObject's Property** parameter to choose only the **HotFixID**, doing so will actually return more information, because all the metadata is displayed by default:\n\n```\nPS> Get-WmiObject -Class Win32_QuickFixEngineering -ComputerName . -Property HotFixID\nHotFixID         : KB910437\n__GENUS          : 2\n__CLASS          : Win32_QuickFixEngineering\n__SUPERCLASS     :\n__DYNASTY        :\n__RELPATH        :\n__PROPERTY_COUNT : 1\n__DERIVATION     : {}\n__SERVER         :\n__NAMESPACE      :\n__PATH           :\n```\n\nThe additional data is returned, because the Property parameter in **Get-WmiObject** restricts the properties returned from WMI class instances, not the object returned to Windows PowerShell. To reduce the output, use **Select-Object**:\n\n```\nPS> Get-WmiObject -Class Win32_QuickFixEngineering -ComputerName . -Property Hot\nFixId | Select-Object -Property HotFixId\nHotFixId\n--------\nKB910437\n```\n\n### Listing Operating System Version Information\nThe **Win32_OperatingSystem** class properties include version and service pack information. You can explicitly select only these properties to get a version information summary from **Win32_OperatingSystem**:\n\n```\nGet-WmiObject -Class Win32_OperatingSystem -ComputerName . | Select-Object -Property BuildNumber,BuildType,OSType,ServicePackMajorVersion,ServicePackMinorVersion\n```\n\nYou can also use wildcards with the **Select-Object's Property** parameter. Because all the properties beginning with either **Build** or **ServicePack** are important to use here, we can shorten this to the following form:\n\n```\nPS> Get-WmiObject -Class Win32_OperatingSystem -ComputerName . | Select-Object -Property Build*,OSType,ServicePack*\n\nBuildNumber             : 2600\nBuildType               : Uniprocessor Free\nOSType                  : 18\nServicePackMajorVersion : 2\nServicePackMinorVersion : 0\n```\n\n### Listing Local Users and Owner\nLocal general user information—number of licensed users, current number of users, and owner name—can be found with a selection of **Win32_OperatingSystem** properties. You can explicitly select the properties to display like this:\n\n```\nGet-WmiObject -Class Win32_OperatingSystem -ComputerName . | Select-Object -Property NumberOfLicensedUsers,NumberOfUsers,RegisteredUser\n```\n\nA more succinct version using wildcards is:\n\n```\nGet-WmiObject -Class Win32_OperatingSystem -ComputerName . | Select-Object -Property *user*\n```\n\n### Getting Available Disk Space\nTo see the disk space and free space for local drives, you can use the WMI Win32_LogicalDisk class. You need to see only instances with a DriveType of 3—the value WMI uses for fixed hard disks.\n\n```\nGet-WmiObject -Class Win32_LogicalDisk -Filter \"DriveType=3\" -ComputerName .\n\nDeviceID     : C:\nDriveType    : 3\nProviderName :\nFreeSpace    : 65541357568\nSize         : 203912880128\nVolumeName   : Local Disk\n\nDeviceID     : Q:\nDriveType    : 3\nProviderName :\nFreeSpace    : 44298250240\nSize         : 122934034432\nVolumeName   : New Volume\n\nGet-WmiObject -Class Win32_LogicalDisk -Filter \"DriveType=3\" -ComputerName . | Measure-Object -Property FreeSpace,Size -Sum | Select-Object -Property Property,Sum\n```\n\n### Getting Logon Session Information\nYou can get general information about logon sessions associated with users through the WMI Win32_LogonSession class:\n\n```\nGet-WmiObject -Class Win32_LogonSession -ComputerName .\n```\n\n### Getting the User Logged on to a Computer\nYou can display the user logged on to a particular computer system using Win32_ComputerSystem. This command returns only the user logged on to the system desktop:\n\n```\nGet-WmiObject -Class Win32_ComputerSystem -Property UserName -ComputerName .\n```\n\n### Getting Local Time from a Computer\nYou can retrieve the current local time on a specific computer by using the WMI Win32_LocalTime class. Because this class by default displays all metadata, you may want to filter it using **Select-Object**:\n\n```\nPS> Get-WmiObject -Class Win32_LocalTime -ComputerName . | Select-Object -Property [a-z]*\n\nDay          : 15\nDayOfWeek    : 4\nHour         : 12\nMilliseconds :\nMinute       : 11\nMonth        : 6\nQuarter      : 2\nSecond       : 52\nWeekInMonth  : 3\nYear         : 2006\n```\n\n### Displaying Service Status\nTo view the status of all services on a specific computer, you can locally use the **Get-Service** cmdlet as mentioned earlier. For remote systems, you can use the WMI Win32_Service class. If you also use **Select-Object** to filter the results to **Status**, **Name**, and **DisplayName**, the output format will be almost identical to that from **Get-Service**:\n\n```\nGet-WmiObject -Class Win32_Service -ComputerName . | Select-Object -Property Status,Name,DisplayName\n```\n\nTo allow the complete display of names for the occasional services with extremely long names, you may want to use **Format-Table** with the **AutoSize** and **Wrap** parameters, to optimize column width and allow long names to wrap instead of being truncated:\n\n```\nGet-WmiObject -Class Win32_Service -ComputerName . | Format-Table -Property Status,Name,DisplayName -AutoSize -Wrap\n```\n\n"}