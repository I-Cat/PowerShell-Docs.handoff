{"nodes":[{"content":"title:   Composite resources: Using a DSC configuration as a resource ms.date:  2016-05-16 keywords:  powershell,DSC description:","pos":[4,133],"source":"title:   Composite resources: Using a DSC configuration as a resource\nms.date:  2016-05-16\nkeywords:  powershell,DSC\ndescription:"},{"content":"ms.topic:  article author:  eslesar manager:  dongill ms.prod:  powershell","pos":[136,210],"source":"ms.topic:  article\nauthor:  eslesar\nmanager:  dongill\nms.prod:  powershell"},{"content":"Composite resources: Using a DSC configuration as a resource","pos":[218,278]},{"content":"Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0","pos":[282,340]},{"content":"In real-world situations, configurations can become long and complex, calling many different resources and setting a vast number of properties.","pos":[342,485]},{"content":"To help address this complexity, you can use a Windows PowerShell Desired State Configuration (DSC) configuration as a resource for other configurations.","pos":[486,639]},{"content":"We call this a composite resource.","pos":[640,674]},{"content":"A composite resource is a DSC configuration that takes parameters.","pos":[675,741]},{"content":"The parameters of the configuration act as the properties of the resource.","pos":[742,816]},{"content":"The configuration is saved as a file with a <bpt id=\"p1\">**</bpt>.schema.psm1<ept id=\"p1\">**</ept> extension, and takes the place of both the MOF schema and the resource script in a typical DSC resource (for more information about DSC resources, see <bpt id=\"p2\">[</bpt>Windows PowerShell Desired State Configuration Resources<ept id=\"p2\">](resources.md)</ept>.","pos":[817,1102],"source":" The configuration is saved as a file with a **.schema.psm1** extension, and takes the place of both the MOF schema and the resource script in a typical DSC resource (for more information about DSC resources, see [Windows PowerShell Desired State Configuration Resources](resources.md)."},{"content":"Creating the composite resource","pos":[1107,1138]},{"content":"In our example, we create a configuration that invokes a number of existing resources to configure virtual machines.","pos":[1140,1256]},{"content":"Instead of specifying the values to be set in configuration blocks, the configuration takes a number of parameters that are then used in the configuration blocks.","pos":[1257,1419]},{"content":"Saving the configuration as a composite resource","pos":[4107,4155]},{"content":"To use the parameterized configuration as a DSC resource, save it in a directory structure like that of any other MOF-based resource, and name it with a <bpt id=\"p1\">**</bpt>.schema.psm1<ept id=\"p1\">**</ept> extension.","pos":[4157,4337],"source":"To use the parameterized configuration as a DSC resource, save it in a directory structure like that of any other MOF-based resource, and name it with a **.schema.psm1** extension."},{"content":"For this example, we’ll name the file <bpt id=\"p1\">**</bpt>xVirtualMachine.schema.psm1<ept id=\"p1\">**</ept>.","pos":[4338,4408],"source":" For this example, we’ll name the file **xVirtualMachine.schema.psm1**."},{"content":"You also need to create a manifest named <bpt id=\"p1\">**</bpt>xVirtualMachine.psd1<ept id=\"p1\">**</ept> that contains the following line.","pos":[4409,4508],"source":" You also need to create a manifest named **xVirtualMachine.psd1** that contains the following line."},{"content":"Note that this is in addition to <bpt id=\"p1\">**</bpt>MyDscResources.psd1<ept id=\"p1\">**</ept>, the module manifest for all resources under the <bpt id=\"p2\">**</bpt>MyDscResources<ept id=\"p2\">**</ept> folder.","pos":[4509,4641],"source":" Note that this is in addition to **MyDscResources.psd1**, the module manifest for all resources under the **MyDscResources** folder."},{"content":"When you are done, the folder structure should be as follows.","pos":[4705,4766]},{"pos":[4991,5190],"content":"The resource is now discoverable by using the Get-DscResource cmdlet, and its properties are discoverable by either that cmdlet or by using <bpt id=\"p1\">**</bpt>Ctrl+Space<ept id=\"p1\">**</ept> auto-complete in the Windows PowerShell ISE.","source":"The resource is now discoverable by using the Get-DscResource cmdlet, and its properties are discoverable by either that cmdlet or by using **Ctrl+Space** auto-complete in the Windows PowerShell ISE."},{"content":"Using the composite resource","pos":[5195,5223]},{"content":"Next we create a configuration that calls the composite resource.","pos":[5225,5290]},{"content":"This configuration calls the xVirtualMachine composite resource to create a virtual machine, and then calls the <bpt id=\"p1\">**</bpt>xComputer<ept id=\"p1\">**</ept> resource to rename it.","pos":[5291,5439],"source":" This configuration calls the xVirtualMachine composite resource to create a virtual machine, and then calls the **xComputer** resource to rename it."},{"content":"See Also","pos":[6029,6037]},{"content":"Concepts","pos":[6042,6050]},{"pos":[6053,6118],"content":"<bpt id=\"p1\">[</bpt>Writing a custom DSC resource with MOF<ept id=\"p1\">](authoringResourceMOF.md)</ept>","source":"[Writing a custom DSC resource with MOF](authoringResourceMOF.md)"},{"pos":[6121,6199],"content":"<bpt id=\"p1\">[</bpt>Get Started with Windows PowerShell Desired State Configuration<ept id=\"p1\">](overview.md)</ept>","source":"[Get Started with Windows PowerShell Desired State Configuration](overview.md)"}],"content":"---\ntitle:   Composite resources: Using a DSC configuration as a resource\nms.date:  2016-05-16\nkeywords:  powershell,DSC\ndescription:  \nms.topic:  article\nauthor:  eslesar\nmanager:  dongill\nms.prod:  powershell\n---\n\n# Composite resources: Using a DSC configuration as a resource\n\n> Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0\n\nIn real-world situations, configurations can become long and complex, calling many different resources and setting a vast number of properties. To help address this complexity, you can use a Windows PowerShell Desired State Configuration (DSC) configuration as a resource for other configurations. We call this a composite resource. A composite resource is a DSC configuration that takes parameters. The parameters of the configuration act as the properties of the resource. The configuration is saved as a file with a **.schema.psm1** extension, and takes the place of both the MOF schema and the resource script in a typical DSC resource (for more information about DSC resources, see [Windows PowerShell Desired State Configuration Resources](resources.md).\n\n## Creating the composite resource\n\nIn our example, we create a configuration that invokes a number of existing resources to configure virtual machines. Instead of specifying the values to be set in configuration blocks, the configuration takes a number of parameters that are then used in the configuration blocks.\n\n```powershell\nConfiguration xVirtualMachine\n{\n    param\n    (\n        # Name of VMs\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [String[]] $VMName,\n\n        # Name of Switch to create\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [String] $SwitchName,\n\n        # Type of Switch to create\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [String] $SwitchType,\n\n        # Source Path for VHD\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [String] $VHDParentPath,\n\n        # Destination path for diff VHD\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [String] $VHDPath,\n\n        # Startup Memory for VM\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [String] $VMStartupMemory,\n\n        # State of the VM\n        [Parameter(Mandatory)]\n        [ValidateNotNullOrEmpty()]\n        [String] $VMState\n    )\n\n    # Import the module that defines custom resources\n    Import-DscResource -Module xComputerManagement,xHyper-V\n\n    # Install the Hyper-V role\n    WindowsFeature HyperV\n    {\n        Ensure = \"Present\"\n        Name = \"Hyper-V\"\n    }\n\n    # Create the virtual switch\n    xVMSwitch $SwitchName\n    {\n        Ensure = \"Present\"\n        Name = $SwitchName\n        Type = $SwitchType\n        DependsOn = \"[WindowsFeature]HyperV\"\n    }\n\n    # Check for Parent VHD file\n    File ParentVHDFile\n    {\n        Ensure = \"Present\"\n        DestinationPath = $VHDParentPath\n        Type = \"File\"\n        DependsOn = \"[WindowsFeature]HyperV\"\n    }\n\n    # Check the destination VHD folder\n    File VHDFolder\n    {\n        Ensure = \"Present\"\n        DestinationPath = $VHDPath\n        Type = \"Directory\"\n        DependsOn = \"[File]ParentVHDFile\"\n    }\n\n    # Creae VM specific diff VHD\n    foreach ($Name in $VMName)\n    {\n        xVHD \"VHD$Name\"\n        {\n            Ensure = \"Present\"\n            Name = $Name\n            Path = $VHDPath\n            ParentPath = $VHDParentPath\n            DependsOn = @(\"[WindowsFeature]HyperV\",\n                          \"[File]VHDFolder\")\n        }\n    }\n\n    # Create VM using the above VHD\n    foreach($Name in $VMName)\n    {\n        xVMHyperV \"VMachine$Name\"\n        {\n            Ensure = \"Present\"\n            Name = $Name\n            VhDPath = (Join-Path -Path $VHDPath -ChildPath $Name)\n            SwitchName = $SwitchName\n            StartupMemory = $VMStartupMemory\n            State = $VMState\n            MACAddress = $MACAddress\n            WaitForIP = $true\n            DependsOn = @(\"[WindowsFeature]HyperV\",\n                          \"[xVHD]VHD$Name\")\n        }\n    }\n}\n```\n\n### Saving the configuration as a composite resource\n\nTo use the parameterized configuration as a DSC resource, save it in a directory structure like that of any other MOF-based resource, and name it with a **.schema.psm1** extension. For this example, we’ll name the file **xVirtualMachine.schema.psm1**. You also need to create a manifest named **xVirtualMachine.psd1** that contains the following line. Note that this is in addition to **MyDscResources.psd1**, the module manifest for all resources under the **MyDscResources** folder.\n\n```powershell\nRootModule = 'xVirtualMachine.schema.psm1'\n```\n\nWhen you are done, the folder structure should be as follows.\n\n```\n$env: psmodulepath\n    |- MyDscResources\n           MyDscResources.psd1\n        |- DSCResources\n            |- xVirtualMachine\n                |- xVirtualMachine.psd1\n                |- xVirtualMachine.schema.psm1\n```\n\nThe resource is now discoverable by using the Get-DscResource cmdlet, and its properties are discoverable by either that cmdlet or by using **Ctrl+Space** auto-complete in the Windows PowerShell ISE.\n\n## Using the composite resource\n\nNext we create a configuration that calls the composite resource. This configuration calls the xVirtualMachine composite resource to create a virtual machine, and then calls the **xComputer** resource to rename it.\n\n```powershell\n\nconfiguration RenameVM\n{\n\n    Import-DscResource -Module TestCompositeResource\n    Node localhost\n    {\n        xVirtualMachine VM\n        {\n            VMName = \"Test\"\n            SwitchName = \"Internal\"\n            SwitchType = \"Internal\"\n            VhdParentPath = \"C:\\Demo\\VHD\\RTM.vhd\"\n            VHDPath = \"C:\\Demo\\VHD\"\n            VMStartupMemory = 1024MB\n            VMState = \"Running\"\n        }\n    }\n\n    Node \"192.168.10.1\"\n    {\n        xComputer Name\n        {\n            Name = \"SQL01\"\n            DomainName = \"fourthcoffee.com\"\n        }\n    }\n}\n```\n\n## See Also\n### Concepts\n* [Writing a custom DSC resource with MOF](authoringResourceMOF.md)\n* [Get Started with Windows PowerShell Desired State Configuration](overview.md)\n\n"}