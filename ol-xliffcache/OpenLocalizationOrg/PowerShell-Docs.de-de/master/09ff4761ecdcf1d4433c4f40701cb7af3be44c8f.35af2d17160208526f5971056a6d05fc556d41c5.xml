{"nodes":[{"content":"Call Base Class Method","pos":[2,24]},{"content":"You can override existing methods in subclasses.","pos":[26,74]},{"content":"To do this, declare methods by using the same name and signature:","pos":[75,140]},{"content":"To call base class methods from overridden implementations, cast to the base class ([baseClass]$this) on invocation:","pos":[322,438]},{"content":"All PowerShell methods are virtual.","pos":[608,643]},{"content":"You can hide non-virtual .NET methods in a subclass by using the same syntax as you do for an override: just declare methods with same name and signature.","pos":[644,798]}],"content":"# Call Base Class Method\n\nYou can override existing methods in subclasses. To do this, declare methods by using the same name and signature:\n\n```PowerShell\nclass baseClass\n{\n    [int]foo() {return 100500}\n}\n\nclass childClass1 : baseClass\n{\n    [int]foo() {return 200600}\n}\n\n[childClass1]::new().foo() # return 200600\n```\n\nTo call base class methods from overridden implementations, cast to the base class ([baseClass]$this) on invocation:\n\n```PowerShell\nclass childClass2 : baseClass\n{\n    [int]foo()\n    {\n        return 3 * ([baseClass]$this).foo()\n    }\n}\n\n[childClass2]::new().foo() # return 301500\n```\n\nAll PowerShell methods are virtual. You can hide non-virtual .NET methods in a subclass by using the same syntax as you do for an override: just declare methods with same name and signature.\n\n```PowerShell\nclass MyIntList : system.collections.generic.list[int]\n{\n    # Add is final in system.collections.generic.list\n    [void] Add([int]$arg)\n    {\n        ([system.collections.generic.list[int]]$this).Add($arg * 2)\n    }\n}\n\n$list = [MyIntList]::new()\n$list.Add(100)\n$list[0] # return 200\n```"}