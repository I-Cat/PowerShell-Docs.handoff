{"nodes":[{"pos":[11,49],"content":"Enhancements to the console experience","needQuote":true,"nodes":[{"content":"Enhancements to the console experience","pos":[0,38]}]},{"content":"Note: provide a proposed descriptive title and a brief description","pos":[72,138]},{"content":"PowerShell Console Enhancements","pos":[143,174]},{"content":"The following changes have been made to powershell.exe to improve the console experience:","pos":[176,265]},{"content":"VT100 support","pos":[270,283]},{"content":"Windows 10 added support for <bpt id=\"p1\">[</bpt>VT100 escape sequences<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/desktop/mt638032(v=vs.85).aspx)</ept>.","pos":[285,420],"source":"Windows 10 added support for [VT100 escape sequences](https://msdn.microsoft.com/en-us/library/windows/desktop/mt638032(v=vs.85).aspx)."},{"content":"PowerShell will ignore certain VT100 formatting escape sequences when calculating table widths.","pos":[421,516],"source":"\nPowerShell will ignore certain VT100 formatting escape sequences when calculating table widths."},{"content":"PowerShell also added a new api that can be used in formatting code to determine if VT100 is supported.","pos":[518,621]},{"content":"For example:","pos":[623,635]},{"content":"Here is a complete <bpt id=\"p1\">[</bpt>example<ept id=\"p1\">](https://gist.github.com/lzybkr/dcb973dccd54900b67783c48083c28f7)</ept> that can be used to highlight matches from Select-String.","pos":[780,931],"source":"Here is a complete [example](https://gist.github.com/lzybkr/dcb973dccd54900b67783c48083c28f7) that can be used to highlight matches from Select-String."},{"content":"Save the example in a file named <ph id=\"ph1\">`MatchInfo.format.ps1xml`</ph>, the to use it, in your profile or elsewhere, run <ph id=\"ph2\">`Update-FormatData -Prepend MatchInfo.format.ps1xml`</ph>.","pos":[932,1094],"source":"\nSave the example in a file named `MatchInfo.format.ps1xml`, the to use it, in your profile or elsewhere, run `Update-FormatData -Prepend MatchInfo.format.ps1xml`."},{"content":"Note that VT100 escape sequences are only supported starting with the Aniversary update to Windows 10, they are not supported on earlier systems.","pos":[1096,1241]},{"content":"Vi mode support in PSReadline","pos":[1249,1278]},{"content":"<bpt id=\"p1\">[</bpt>PSReadline<ept id=\"p1\">](https://github.com/lzybkr/PSReadLine)</ept> adds support for vi mode.","pos":[1280,1356],"source":"[PSReadline](https://github.com/lzybkr/PSReadLine) adds support for vi mode."},{"content":"To use vi mode, run <ph id=\"ph1\">`Set-PSReadline -EditMode vi`</ph>.","pos":[1357,1407],"source":" To use vi mode, run `Set-PSReadline -EditMode vi`."},{"content":"Redirected stdin w/ interactive input","pos":[1412,1449]},{"pos":[1452,1605],"content":"In earlier versions, starting PowerShell with <ph id=\"ph1\">`powershell -File -`</ph> was required when stdin was redirected and you wanted to enter commands interactively.","source":"In earlier versions, starting PowerShell with `powershell -File -` was required when stdin was redirected and\nyou wanted to enter commands interactively."},{"pos":[1607,1738],"content":"With WMF 5.1, this hard to discover option is no longer necessary, you can start powershell without any options, e.g. <ph id=\"ph1\">`powershell`</ph>.","source":"With WMF 5.1, this hard to discover option is no longer necessary, you can start powershell without any options, e.g. `powershell`."},{"content":"Note that PSReadline does not currently supported redirected stdin, and the builtin commanding line editing experience with redirected stdin is extremely limited, e.g. arrow keys don't work.","pos":[1740,1930],"source":"Note that PSReadline does not currently supported redirected stdin, and the builtin commanding line editing experience with redirected\nstdin is extremely limited, e.g. arrow keys don't work."},{"content":"A future release of PSReadline should address this issue.","pos":[1932,1989]}],"content":"---\ntitle: Enhancements to the console experience\nauthor: jasonsh\n---\n\n>Note: provide a proposed descriptive title and a brief description\n\n## PowerShell Console Enhancements\n\nThe following changes have been made to powershell.exe to improve the console experience:\n\n1. VT100 support\n\nWindows 10 added support for [VT100 escape sequences](https://msdn.microsoft.com/en-us/library/windows/desktop/mt638032(v=vs.85).aspx).\nPowerShell will ignore certain VT100 formatting escape sequences when calculating table widths.\n\nPowerShell also added a new api that can be used in formatting code to determine if VT100 is supported.  For example:\n\n```\nif ($host.UI.SupportsVirtualTerminal)\n{\n    $esc = [char]0x1b\n    \"A yellow ${esc}[93mhello${esc}[0m\"\n}\nelse\n{\n    \"A default hello\"\n}\n```\nHere is a complete [example](https://gist.github.com/lzybkr/dcb973dccd54900b67783c48083c28f7) that can be used to highlight matches from Select-String.\nSave the example in a file named `MatchInfo.format.ps1xml`, the to use it, in your profile or elsewhere, run `Update-FormatData -Prepend MatchInfo.format.ps1xml`.\n\nNote that VT100 escape sequences are only supported starting with the Aniversary update to Windows 10, they are not supported on earlier systems.   \n\n2. Vi mode support in PSReadline\n\n[PSReadline](https://github.com/lzybkr/PSReadLine) adds support for vi mode. To use vi mode, run `Set-PSReadline -EditMode vi`.\n\n3. Redirected stdin w/ interactive input \n\nIn earlier versions, starting PowerShell with `powershell -File -` was required when stdin was redirected and\nyou wanted to enter commands interactively.\n\nWith WMF 5.1, this hard to discover option is no longer necessary, you can start powershell without any options, e.g. `powershell`.\n\nNote that PSReadline does not currently supported redirected stdin, and the builtin commanding line editing experience with redirected\nstdin is extremely limited, e.g. arrow keys don't work.  A future release of PSReadline should address this issue.   "}