{"nodes":[{"pos":[13,54],"content":"Credentials Options in Configuration Data","needQuote":true,"nodes":[{"content":"Credentials Options in Configuration Data","pos":[0,41]}]},{"pos":[87,101],"content":"powershell,DSC","needQuote":true,"nodes":[{"content":"powershell,DSC","pos":[0,14]}]},{"content":"Credentials Options in Configuration Data","pos":[199,240]},{"content":"Applies To: Windows PowerShell 5.0","pos":[242,276]},{"content":"Plain Text Passwords and Domain Users","pos":[281,318]},{"content":"DSC configurations containing a credential without encryption will generate an error messages about plain text passwords.","pos":[320,441]},{"content":"Also, DSC will generate a warning when using domain credentials.","pos":[442,506],"source":"\nAlso, DSC will generate a warning when using domain credentials."},{"content":"To suppress these error and warning messages use the DSC configuration data keywords:","pos":[507,592],"source":"\nTo suppress these error and warning messages use the DSC configuration data keywords:"},{"pos":[595,626],"content":"<bpt id=\"p1\">**</bpt>PsDscAllowPlainTextPassword<ept id=\"p1\">**</ept>","source":"**PsDscAllowPlainTextPassword**"},{"pos":[629,653],"content":"<bpt id=\"p1\">**</bpt>PsDscAllowDomainUser<ept id=\"p1\">**</ept>","source":"**PsDscAllowDomainUser**"},{"content":"Handling Credentials in DSC","pos":[658,685]},{"content":"DSC configuration resources run as <ph id=\"ph1\">`Local System`</ph> by default.","pos":[687,748],"source":"DSC configuration resources run as `Local System` by default."},{"content":"However, some resources need a credential, for example when the <ph id=\"ph1\">`Package`</ph> resource needs to install software under a specific user account.","pos":[749,888],"source":"\nHowever, some resources need a credential, for example when the `Package` resource needs to install software under a specific user account."},{"content":"Earlier resources used a hard-coded <ph id=\"ph1\">`Credential`</ph> property name to handle this.","pos":[890,968],"source":"Earlier resources used a hard-coded `Credential` property name to handle this."},{"content":"WMF 5.0 added an automatic <ph id=\"ph1\">`PsDscRunAsCredential`</ph> property for all resources.","pos":[969,1046],"source":"\nWMF 5.0 added an automatic `PsDscRunAsCredential` property for all resources."},{"content":"For information about using <ph id=\"ph1\">`PsDscRunAsCredential`</ph>, see <bpt id=\"p1\">[</bpt>Running DSC with user credentials<ept id=\"p1\">](runAsUser.md)</ept>.","pos":[1047,1153],"source":" For information about using `PsDscRunAsCredential`, see [Running DSC with user credentials](runAsUser.md)."},{"content":"Newer resources and custom resources can use this automatic property instead of creating their own property for credentials.","pos":[1154,1278],"source":"\nNewer resources and custom resources can use this automatic property instead of creating their own property for credentials."},{"pos":[1280,1427],"content":"<bpt id=\"p1\">*</bpt>Note that the design of some resources are to use multiple credentials for a specific reason, and they will have their own credential properties.<ept id=\"p1\">*</ept>","source":"*Note that the design of some resources are to use multiple credentials for a specific reason, and they will have their own credential properties.*"},{"pos":[1429,1589],"content":"To find the available credential properties on a resource use either <ph id=\"ph1\">`Get-DscResource -Name ResourceName -Syntax`</ph> or the Intellisense in the ISE (<ph id=\"ph2\">`CTRL+SPACE`</ph>).","source":"To find the available credential properties on a resource use either `Get-DscResource -Name ResourceName -Syntax` or the Intellisense in the ISE (`CTRL+SPACE`)."},{"content":"This example uses a <bpt id=\"p1\">[</bpt>Group<ept id=\"p1\">](https://msdn.microsoft.com/en-us/powershell/dsc/groupresource)</ept> resource from the <ph id=\"ph1\">`PSDesiredStateConfiguration`</ph> built-in DSC resource module.","pos":[1991,2159],"source":"This example uses a [Group](https://msdn.microsoft.com/en-us/powershell/dsc/groupresource) resource from the `PSDesiredStateConfiguration` built-in DSC resource module."},{"content":"It can create local groups and add or remove members.","pos":[2160,2213],"source":"\nIt can create local groups and add or remove members."},{"content":"It accepts both the <ph id=\"ph1\">`Credential`</ph> property and the automatic <ph id=\"ph2\">`PsDscRunAsCredential`</ph> property.","pos":[2214,2306],"source":"\nIt accepts both the `Credential` property and the automatic `PsDscRunAsCredential` property."},{"content":"However, the resource only uses the <ph id=\"ph1\">`Credential`</ph> property.","pos":[2307,2365],"source":"\nHowever, the resource only uses the `Credential` property."},{"content":"Read more about <ph id=\"ph1\">`PsDscRunAsCredential`</ph> in the <bpt id=\"p1\">[</bpt>WMF Release Notes<ept id=\"p1\">](https://msdn.microsoft.com/en-us/powershell/wmf/dsc_runas)</ept>.","pos":[2366,2491],"source":"\nRead more about `PsDscRunAsCredential` in the [WMF Release Notes](https://msdn.microsoft.com/en-us/powershell/wmf/dsc_runas)."},{"content":"Example: The Group resource Credential property","pos":[2496,2543]},{"content":"DSC runs under <ph id=\"ph1\">`Local System`</ph>, so it already has permissions to change local users and groups.","pos":[2545,2639],"source":"DSC runs under `Local System`, so it already has permissions to change local users and groups."},{"content":"If the member added is a local account, then no credential is necessary.","pos":[2640,2712],"source":"\nIf the member added is a local account, then no credential is necessary."},{"content":"If the <ph id=\"ph1\">`Group`</ph> resource adds a domain account to the local group, then a credential is necessary.","pos":[2713,2810],"source":"\nIf the `Group` resource adds a domain account to the local group, then a credential is necessary."},{"content":"Anonymous queries to Active Directory are not allowed.","pos":[2812,2866]},{"content":"The <ph id=\"ph1\">`Credential`</ph> property of the <ph id=\"ph2\">`Group`</ph> resource is the domain account used to query Active Directory.","pos":[2867,2970],"source":"\nThe `Credential` property of the `Group` resource is the domain account used to query Active Directory."},{"content":"For most purposes this could be a generic user account, because by default users can <bpt id=\"p1\">*</bpt>read<ept id=\"p1\">*</ept> most of the objects in Active Directory.","pos":[2971,3103],"source":"\nFor most purposes this could be a generic user account, because by default users can *read* most of the objects in Active Directory."},{"content":"Example Configuration","pos":[3108,3129]},{"content":"The following example code uses DSC to populate a local group with a domain user:","pos":[3131,3212]},{"content":"This code generates both an error and warning message:","pos":[3766,3820]},{"content":"This example has two issues:","pos":[4752,4780]},{"content":"An error explains that plain text passwords are not recommended","pos":[4785,4848]},{"content":"A warning advises against using a domain credential","pos":[4853,4904]},{"content":"PsDscAllowPlainTextPassword","pos":[4909,4936]},{"content":"The first error message has a URL with documentation.","pos":[4938,4991]},{"content":"This link explains how to encrypt passwords using a <bpt id=\"p1\">[</bpt>ConfigurationData<ept id=\"p1\">](https://msdn.microsoft.com/en-us/powershell/dsc/configdata)</ept> structure and a certificate.","pos":[4992,5152],"source":"\nThis link explains how to encrypt passwords using a [ConfigurationData](https://msdn.microsoft.com/en-us/powershell/dsc/configdata) structure and a certificate."},{"content":"For more information on certificates and DSC <bpt id=\"p1\">[</bpt>read this post<ept id=\"p1\">](http://aka.ms/certs4dsc)</ept>.","pos":[5153,5240],"source":"\nFor more information on certificates and DSC [read this post](http://aka.ms/certs4dsc)."},{"pos":[5242,5383],"content":"To force a plain text password, the resource requires the <ph id=\"ph1\">`PsDscAllowPlainTextPassword`</ph> keyword in the configuration data section as follows:","source":"To force a plain text password, the resource requires the `PsDscAllowPlainTextPassword` keyword in the configuration data section as follows:"},{"pos":[6100,6180],"content":"<bpt id=\"p1\">*</bpt>Note that <ph id=\"ph1\">`NodeName`</ph> cannot equal asterisk, a specific node name is mandatory.<ept id=\"p1\">*</ept>","source":"*Note that `NodeName` cannot equal asterisk, a specific node name is mandatory.*"},{"pos":[6182,6271],"content":"<bpt id=\"p1\">**</bpt>Microsoft advises to avoid plain text passwords due to the significant security risk.<ept id=\"p1\">**</ept>","source":"**Microsoft advises to avoid plain text passwords due to the significant security risk.**"},{"content":"Domain Credentials","pos":[6276,6294]},{"content":"Running the example configuration script again (with or without encryption), still generates the warning that using a domain account for a credential is not recommended.","pos":[6296,6465]},{"content":"Using a local account eliminates potential exposure of domain credentials that could be used on other servers.","pos":[6466,6576],"source":"\nUsing a local account eliminates potential exposure of domain credentials that could be used on other servers."},{"pos":[6578,6684],"content":"<bpt id=\"p1\">**</bpt>When using credentials with DSC resources, prefer a local account over a domain account when possible.<ept id=\"p1\">**</ept>","source":"**When using credentials with DSC resources, prefer a local account over a domain account when possible.**"},{"content":"If there is a '\\' or <ph id=\"ph1\">'@'</ph> in the <ph id=\"ph2\">`Username`</ph> property of the credential, then DSC will treat it as a domain account.","pos":[6686,6800],"source":"If there is a '\\' or '@' in the `Username` property of the credential, then DSC will treat it as a domain account."},{"content":"There is an exception for \"localhost\", \"127.0.0.1\", and \"::1\" in the domain portion of the user name.","pos":[6801,6902],"source":"\nThere is an exception for \"localhost\", \"127.0.0.1\", and \"::1\" in the domain portion of the user name."},{"content":"PSDscAllowDomainUser","pos":[6907,6927]},{"content":"In the DSC <ph id=\"ph1\">`Group`</ph> resource example above, querying an Active Directory domain <bpt id=\"p1\">*</bpt>requires<ept id=\"p1\">*</ept> a domain account.","pos":[6929,7036],"source":"In the DSC `Group` resource example above, querying an Active Directory domain *requires* a domain account."},{"content":"In this case add the <ph id=\"ph1\">`PSDscAllowDomainUser`</ph> property to the <ph id=\"ph2\">`ConfigurationData`</ph> block as follows:","pos":[7037,7134],"source":"\nIn this case add the `PSDscAllowDomainUser` property to the `ConfigurationData` block as follows:"},{"content":"Now the configuration script will generate the MOF file with no errors or warnings.","pos":[7395,7478]}],"content":"---\ntitle:   Credentials Options in Configuration Data\nms.date:  2016-05-16\nkeywords:  powershell,DSC\ndescription:  \nms.topic:  article\nauthor:  eslesar\nmanager:  dongill\nms.prod:  powershell\n---\n\n# Credentials Options in Configuration Data\n>Applies To: Windows PowerShell 5.0\n\n## Plain Text Passwords and Domain Users\n\nDSC configurations containing a credential without encryption will generate an error messages about plain text passwords.\nAlso, DSC will generate a warning when using domain credentials.\nTo suppress these error and warning messages use the DSC configuration data keywords:\n* **PsDscAllowPlainTextPassword**\n* **PsDscAllowDomainUser**\n\n## Handling Credentials in DSC\n\nDSC configuration resources run as `Local System` by default.\nHowever, some resources need a credential, for example when the `Package` resource needs to install software under a specific user account.\n\nEarlier resources used a hard-coded `Credential` property name to handle this.\nWMF 5.0 added an automatic `PsDscRunAsCredential` property for all resources. For information about using `PsDscRunAsCredential`, see [Running DSC with user credentials](runAsUser.md).\nNewer resources and custom resources can use this automatic property instead of creating their own property for credentials.\n\n*Note that the design of some resources are to use multiple credentials for a specific reason, and they will have their own credential properties.*\n\nTo find the available credential properties on a resource use either `Get-DscResource -Name ResourceName -Syntax` or the Intellisense in the ISE (`CTRL+SPACE`).\n\n```PowerShell\nPS C:\\> Get-DscResource -Name Group -Syntax\nGroup [String] #ResourceName\n{\n    GroupName = [string]\n    [Credential = [PSCredential]]\n    [DependsOn = [string[]]]\n    [Description = [string]]\n    [Ensure = [string]{ Absent | Present }]\n    [Members = [string[]]]\n    [MembersToExclude = [string[]]]\n    [MembersToInclude = [string[]]]\n    [PsDscRunAsCredential = [PSCredential]]\n}\n```\n\nThis example uses a [Group](https://msdn.microsoft.com/en-us/powershell/dsc/groupresource) resource from the `PSDesiredStateConfiguration` built-in DSC resource module.\nIt can create local groups and add or remove members.\nIt accepts both the `Credential` property and the automatic `PsDscRunAsCredential` property.\nHowever, the resource only uses the `Credential` property.\nRead more about `PsDscRunAsCredential` in the [WMF Release Notes](https://msdn.microsoft.com/en-us/powershell/wmf/dsc_runas).\n\n## Example: The Group resource Credential property\n\nDSC runs under `Local System`, so it already has permissions to change local users and groups.\nIf the member added is a local account, then no credential is necessary.\nIf the `Group` resource adds a domain account to the local group, then a credential is necessary.\n\nAnonymous queries to Active Directory are not allowed.\nThe `Credential` property of the `Group` resource is the domain account used to query Active Directory.\nFor most purposes this could be a generic user account, because by default users can *read* most of the objects in Active Directory.\n\n## Example Configuration\n\nThe following example code uses DSC to populate a local group with a domain user:\n\n```PowerShell\nConfiguration DomainCredentialExample\n{\n    param\n    (\n        [PSCredential] $DomainCredential\n    )\n    Import-DscResource -ModuleName PSDesiredStateConfiguration\n\n    node localhost\n    {\n        Group DomainUserToLocalGroup\n        {\n            GroupName        = 'ApplicationAdmins'\n            MembersToInclude = 'contoso\\alice'\n            Credential       = $DomainCredential\n        }\n    }\n}\n\n$cred = Get-Credential -UserName contoso\\genericuser -Message \"Password please\"\nDomainCredentialExample -DomainCredential $cred\n```\n\nThis code generates both an error and warning message:\n\n```\nConvertTo-MOFInstance : System.InvalidOperationException error processing\nproperty 'Credential' OF TYPE 'Group': Converting and storing encrypted\npasswords as plain text is not recommended. For more information on securing\ncredentials in MOF file, please refer to MSDN blog:\nhttp://go.microsoft.com/fwlink/?LinkId=393729\n\nAt line:11 char:9\n+   Group\nAt line:297 char:16\n+     $aliasId = ConvertTo-MOFInstance $keywordName $canonicalizedValue\n+                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : InvalidOperation: (:) [Write-Error], InvalidOperationException\n    + FullyQualifiedErrorId : FailToProcessProperty,ConvertTo-MOFInstance\n\nWARNING: It is not recommended to use domain credential for node 'localhost'.\nIn order to suppress the warning, you can add a property named\n'PSDscAllowDomainUser' with a value of $true to your DSC configuration data\nfor node 'localhost'.\n```\n\nThis example has two issues:\n1.  An error explains that plain text passwords are not recommended\n2.  A warning advises against using a domain credential\n\n## PsDscAllowPlainTextPassword\n\nThe first error message has a URL with documentation.\nThis link explains how to encrypt passwords using a [ConfigurationData](https://msdn.microsoft.com/en-us/powershell/dsc/configdata) structure and a certificate.\nFor more information on certificates and DSC [read this post](http://aka.ms/certs4dsc).\n\nTo force a plain text password, the resource requires the `PsDscAllowPlainTextPassword` keyword in the configuration data section as follows:\n\n```PowerShell\nConfiguration DomainCredentialExample\n{\n    param\n    (\n        [PSCredential] $DomainCredential\n    )\n    Import-DscResource -ModuleName PSDesiredStateConfiguration\n\n    node localhost\n    {\n        Group DomainUserToLocalGroup\n        {\n            GroupName        = 'ApplicationAdmins'\n            MembersToInclude = 'contoso\\alice'\n            Credential       = $DomainCredential\n        }\n    }\n}\n\n$cd = @{\n    AllNodes = @(\n        @{\n            NodeName = 'localhost'\n            PSDscAllowPlainTextPassword = $true\n        }\n    )\n}\n\n$cred = Get-Credential -UserName contoso\\genericuser -Message \"Password please\"\nDomainCredentialExample -DomainCredential $cred -ConfigurationData $cd\n```\n\n*Note that `NodeName` cannot equal asterisk, a specific node name is mandatory.*\n\n**Microsoft advises to avoid plain text passwords due to the significant security risk.**\n\n## Domain Credentials\n\nRunning the example configuration script again (with or without encryption), still generates the warning that using a domain account for a credential is not recommended.\nUsing a local account eliminates potential exposure of domain credentials that could be used on other servers.\n\n**When using credentials with DSC resources, prefer a local account over a domain account when possible.**\n\nIf there is a '\\' or '@' in the `Username` property of the credential, then DSC will treat it as a domain account.\nThere is an exception for \"localhost\", \"127.0.0.1\", and \"::1\" in the domain portion of the user name.\n\n## PSDscAllowDomainUser\n\nIn the DSC `Group` resource example above, querying an Active Directory domain *requires* a domain account.\nIn this case add the `PSDscAllowDomainUser` property to the `ConfigurationData` block as follows:\n\n```PowerShell\n$cd = @{\n    AllNodes = @(\n        @{\n            NodeName = 'localhost'\n            PSDscAllowDomainUser = $true\n            # PSDscAllowPlainTextPassword = $true\n            CertificateFile = \"C:\\PublicKeys\\server1.cer\"\n        }\n    )\n}\n```\n\nNow the configuration script will generate the MOF file with no errors or warnings.\n\n"}