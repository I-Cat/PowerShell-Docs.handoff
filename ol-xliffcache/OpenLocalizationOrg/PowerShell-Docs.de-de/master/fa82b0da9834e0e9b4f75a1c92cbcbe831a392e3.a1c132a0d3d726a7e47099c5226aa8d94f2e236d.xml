{"nodes":[{"content":"PackageManagement Cmdlets","pos":[2,27]},{"content":"This is the core of PackageManagement to support software discovery, installation, and inventory (SDII).","pos":[28,132]},{"content":"Try out the cmdlets for these operations:","pos":[133,174]},{"content":"Find-Package","pos":[179,191]},{"content":"Find-PackageProvider","pos":[196,216]},{"content":"Get-Package","pos":[221,232]},{"content":"Get-PackageProvider","pos":[237,256]},{"content":"Get-PackageSource","pos":[261,278]},{"content":"Import-PackageProvider","pos":[283,305]},{"content":"Install-Package","pos":[310,325]},{"content":"Install-PackageProvider","pos":[330,353]},{"content":"Register-PackageSource","pos":[358,380]},{"content":"Save-Package","pos":[385,397]},{"content":"Set-PackageSource","pos":[402,419]},{"content":"Uninstall-Package","pos":[424,441]},{"content":"Unregister-PackageSource","pos":[446,470]},{"content":"As PackageManagement is a PowerShell module, you can do the following to update PackageManagement itself:","pos":[472,577]},{"content":"In this case, you will have to re-enter PowerShell session to switch to the new version of PackageManagement.","pos":[644,753]},{"pos":[758,838],"content":"<bpt id=\"p1\">[</bpt>Find-Package Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn890709.aspx)</ept>","source":"[Find-Package Cmdlet](https://technet.microsoft.com/en-us/library/dn890709.aspx)"},{"content":"This cmdlet allows discovery of software packages in available package sources using loaded package providers.","pos":[839,949]},{"pos":[1809,1897],"content":"<bpt id=\"p1\">[</bpt>Find-PackageProvider Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/mt676544.aspx)</ept>","source":"[Find-PackageProvider Cmdlet](https://technet.microsoft.com/en-us/library/mt676544.aspx)"},{"content":"The Find-PackageProvider cmdlet finds matching PackageManagement providers that are available in package sources registered with PowerShellGet.","pos":[1898,2041]},{"content":"These are package providers available for installation with the Install-PackageProvider cmdlet.","pos":[2042,2137]},{"content":"By default, this includes modules available in the PowerShell Gallery with the 'PackageManagement' and 'Provider' Tags.","pos":[2138,2257]},{"content":"Find-PackageProvider also finds matching PackageManagement providers that are available in the PackageManagement azure blob store where we use the PackageManagement boostrapper provider for finding and installing them.","pos":[2260,2478]},{"pos":[3135,3214],"content":"<bpt id=\"p1\">[</bpt>Get-Package Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn890704.aspx)</ept>","source":"[Get-Package Cmdlet](https://technet.microsoft.com/en-us/library/dn890704.aspx)"},{"content":"This cmdlet returns a list of all software packages that have been installed using PackageManagement.","pos":[3215,3316]},{"pos":[3578,3665],"content":"<bpt id=\"p1\">[</bpt>Get-PackageProvider Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn890703.aspx)</ept>","source":"[Get-PackageProvider Cmdlet](https://technet.microsoft.com/en-us/library/dn890703.aspx)"},{"content":"Package providers that are loaded and ready to be used on the local machine can be inventoried by using the cmdlet.","pos":[3666,3781]},{"pos":[4028,4113],"content":"<bpt id=\"p1\">[</bpt>Get-PackageSource Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn890705.aspx)</ept>","source":"[Get-PackageSource Cmdlet](https://technet.microsoft.com/en-us/library/dn890705.aspx)"},{"content":"This cmdlet gets a list of package sources that are registered for a package provider.","pos":[4114,4200]},{"pos":[4365,4455],"content":"<bpt id=\"p1\">[</bpt>Import-PackageProvider Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/mt676545.aspx)</ept>","source":"[Import-PackageProvider Cmdlet](https://technet.microsoft.com/en-us/library/mt676545.aspx)"},{"content":"This cmdlet adds Package Management package providers to the current session.","pos":[4456,4533]},{"pos":[6175,6259],"content":"<bpt id=\"p1\">[</bpt> Install-Package Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn890711.aspx)</ept>","source":"[ Install-Package Cmdlet](https://technet.microsoft.com/en-us/library/dn890711.aspx)"},{"content":"This cmdlet allows installation of software packages in available package sources using loaded package providers.","pos":[6261,6374]},{"pos":[6823,6914],"content":"<bpt id=\"p1\">[</bpt>Install-PackageProvider Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/mt676543.aspx)</ept>","source":"[Install-PackageProvider Cmdlet](https://technet.microsoft.com/en-us/library/mt676543.aspx)"},{"content":"This cmdlet installs one or more Package Management package providers.","pos":[6915,6985]},{"pos":[7534,7624],"content":"<bpt id=\"p1\">[</bpt>Register-PackageSource Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn890701.aspx)</ept>","source":"[Register-PackageSource Cmdlet](https://technet.microsoft.com/en-us/library/dn890701.aspx)"},{"content":"This cmdlet adds a package source for a specified package provider.","pos":[7625,7692]},{"content":"Each PackageManagement provider may have one or multiple software sources, or repositories.","pos":[7693,7784],"source":"\nEach PackageManagement provider may have one or multiple software sources, or repositories."},{"content":"PackageManagement provides PowerShell cmdlets to add/remove/query the source.","pos":[7785,7862]},{"content":"For example, you can register a package source for the NuGet provider:","pos":[7863,7933]},{"pos":[8059,8139],"content":"<bpt id=\"p1\">[</bpt>Save-Package Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn890708.aspx)</ept>","source":"[Save-Package Cmdlet](https://technet.microsoft.com/en-us/library/dn890708.aspx)"},{"content":"This cmdlet saves packages to the local computer without installing them.","pos":[8140,8213]},{"pos":[8564,8649],"content":"<bpt id=\"p1\">[</bpt>Set-PackageSource Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn890710.aspx)</ept>","source":"[Set-PackageSource Cmdlet](https://technet.microsoft.com/en-us/library/dn890710.aspx)"},{"content":"This cmdlet changes information about an existing package source.","pos":[8650,8715]},{"pos":[9078,9163],"content":"<bpt id=\"p1\">[</bpt>Uninstall-Package Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn890702.aspx)</ept>","source":"[Uninstall-Package Cmdlet](https://technet.microsoft.com/en-us/library/dn890702.aspx)"},{"content":"This cmdlet uninstalls packages installed on the local computer.","pos":[9164,9228]},{"pos":[9487,9579],"content":"<bpt id=\"p1\">[</bpt>Unregister-PackageSource Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn890707.aspx)</ept>","source":"[Unregister-PackageSource Cmdlet](https://technet.microsoft.com/en-us/library/dn890707.aspx)"}],"content":"# PackageManagement Cmdlets\nThis is the core of PackageManagement to support software discovery, installation, and inventory (SDII). Try out the cmdlets for these operations:\n-   Find-Package\n-   Find-PackageProvider\n-   Get-Package\n-   Get-PackageProvider\n-   Get-PackageSource\n-   Import-PackageProvider\n-   Install-Package\n-   Install-PackageProvider\n-   Register-PackageSource\n-   Save-Package\n-   Set-PackageSource\n-   Uninstall-Package\n-   Unregister-PackageSource\n\nAs PackageManagement is a PowerShell module, you can do the following to update PackageManagement itself:\n```powershell\nPS C:\\> Install-Module PackageManagement –Force\n```\nIn this case, you will have to re-enter PowerShell session to switch to the new version of PackageManagement.\n\n## [Find-Package Cmdlet](https://technet.microsoft.com/en-us/library/dn890709.aspx)\nThis cmdlet allows discovery of software packages in available package sources using loaded package providers.\n```powershell\n# Find all available Windows PowerShell module packages from galleries registered\n# with PowerShellGet provider\nFind-Package -Provider PowerShellGet -Source PSGallery\n\n# Find a package from a provider that is not yet installed\n# This will bootstrap NuGet provider and then search for jquery package using NuGet\n# with <http://www.nuget.org/api/v2/> as source\nFind-Package -Name jquery –Provider NuGet -Source http://www.nuget.org/api/v2/\n\n# Find package with name and version\n# Here we are assuming that the user already registered nuget.org using\n# Register-PackageSource. You can specify either the provider or the source, or\n# neither. For the latter, performance may be less optimal as it searches through all\n# the providers and registered sources.\nFind-Package -Name jquery –Provider NuGet –RequiredVersion 2.1.4 -Source nuget.org\n```\n\n## [Find-PackageProvider Cmdlet](https://technet.microsoft.com/en-us/library/mt676544.aspx)\nThe Find-PackageProvider cmdlet finds matching PackageManagement providers that are available in package sources registered with PowerShellGet. These are package providers available for installation with the Install-PackageProvider cmdlet. By default, this includes modules available in the PowerShell Gallery with the 'PackageManagement' and 'Provider' Tags. \n\nFind-PackageProvider also finds matching PackageManagement providers that are available in the PackageManagement azure blob store where we use the PackageManagement boostrapper provider for finding and installing them.\n```powershell\n#Find all available package providers in PackageManagement azure blob store as well as in PowerShellGallery.com\nFind-PackageProvider\n\n#Find all versions of a provider\nFind-PackageProvider -Name \"Nuget\" -AllVersions\n\n#Find a provider from a specified source\nFind-PackageProvider -Name \"Gistprovider\" -Source \"PSGallery\"\n\n#For machines without internet, you can download the nuget provider first, put it to you file share and then use the following to install the nuget provider (TP5 or later).\n\nFind-PackageProvider -Source  C:\\sharedfolder\\Providers\\\nInstall-PackageProvider -Source C:\\sharedfolder\\Providers\\ -Name nuget -force\n    \n```\n\n## [Get-Package Cmdlet](https://technet.microsoft.com/en-us/library/dn890704.aspx)\nThis cmdlet returns a list of all software packages that have been installed using PackageManagement.\n```powershell\n# Get all the packages installed by Programs provider\nGet-Package –Provider Programs\n\n# Get all the packages installed by NuGet provider at c:\\test using the dynamic\n# parameter destination\nGet-Package –Provider NuGet -Destination c:\\test\n```\n\n## [Get-PackageProvider Cmdlet](https://technet.microsoft.com/en-us/library/dn890703.aspx)\nPackage providers that are loaded and ready to be used on the local machine can be inventoried by using the cmdlet.\n```powershell\n# Get all currently loaded package providers\nGet-PackageProvider\n\n# The following cmdlet will show all the package providers available on the machine (including those that are not loaded):\nGet-PackageProvider -ListAvailable\n```\n\n## [Get-PackageSource Cmdlet](https://technet.microsoft.com/en-us/library/dn890705.aspx)\nThis cmdlet gets a list of package sources that are registered for a package provider.\n```powershelll\n# Get all package sources\nGet-PackageSource\n\n# Get all package sources for a specific provider\nGet-PackageSource –ProviderName PowerShellGet\n```\n\n## [Import-PackageProvider Cmdlet](https://technet.microsoft.com/en-us/library/mt676545.aspx)\nThis cmdlet adds Package Management package providers to the current session.\n```powershell\n# Import a package provider from the local machine\nImport-PackageProvider –Name MyProvider\n\n#The -Name parameter can be either the name of the provider or the full path to the provider. Currently, we support .dll, .exe and.psm1 for the full path case. If the name of the provider is used for the -Name parameter, then additional version parameters such as -RequiredVersion, -MinimumVersion and -MaximumVersion may be specified. Otherwise, the latest version of the provider will be imported.\n\n#If a package provider is not yet loaded to your system, we can discover and install on-demand. You can use explicit discovery and install cmdlets to do so:\n Find-PackageProvider\n Install-PackageProvider –Name MyProvider\n\n#After installed, follow the Import-PackageProvider to load it to your system.\n\n# Import a specific version of a package provider. PackageManagement supports installations of multiple versions of a package provider using PackageProvider cmdlets (not by bootstrapper provider). You can install another version of a package provider given that you already have one up running by:\nFind-PackageProvider –Name \"Nuget\" -AllVersions\nInstall-PackageProvider -Name \"Nuget\" -RequiredVersion \"2.8.5.201\" -Force\nGet-PackageProvider –ListAvailable\nImport-PackageProvider –Name \"Nuget\" -RequiredVersion \"2.8.5.201\" -Verbose\nImport-PackageProvider –Name MyProvider –RequiredVersion xxxx -force\n\nAs of the Windows Server Technical Preview(TP5), Install-PackageProvider does install as well as import the provider. Hence after you run find-packageprovider and install-packageprovider, the provider should be ready to use \n```\n\n##[ Install-Package Cmdlet](https://technet.microsoft.com/en-us/library/dn890711.aspx)\n\nThis cmdlet allows installation of software packages in available package sources using loaded package providers.\n```powershell\n# Install a package by name.\n# NuGet provider requires us to provide the dynamic parameter destination path\n# when we use this provider to install. Not all providers will require you to supply\n# dynamic parameters for PackageManagement cmdlets.\nInstall-Package -Name jquery -Source nuget.org -Destination c:\\test\n\n# Install a package by piping.\nFind-Package -Name jquery –Provider NuGet | Install-Package -Destination c:\\test\n```\n\n## [Install-PackageProvider Cmdlet](https://technet.microsoft.com/en-us/library/mt676543.aspx)\nThis cmdlet installs one or more Package Management package providers.\n```powershell\n# Install a package provider from the PowerShell Gallery\nInstall-PackageProvider –Name \"Gistprovider\" -Verbose\n\n# Install a specified version of a package provider\nFind-PackageProvider –Name \"Nuget\" -AllVersions\nInstall-PackageProvider -Name \"Nuget\" -RequiredVersion \"2.8.5.201\" -Force\n\n# Find a provider and install it\nFind-PackageProvider –Name \"Gistprovider\" | Install-PackageProvider -Verbose\n\n# Install a provider to the current user’s module folder\nInstall-PackageProvider –Name Gistprovider –Verbose –Scope CurrentUser\n```\n\n## [Register-PackageSource Cmdlet](https://technet.microsoft.com/en-us/library/dn890701.aspx)\nThis cmdlet adds a package source for a specified package provider.\nEach PackageManagement provider may have one or multiple software sources, or repositories. PackageManagement provides PowerShell cmdlets to add/remove/query the source. For example, you can register a package source for the NuGet provider:\n```powershell\nRegister-PackageSource -Name \"NugetSource\" -Location \"http://www.nuget.org/api/v2\" –ProviderName nuget\n```\n\n## [Save-Package Cmdlet](https://technet.microsoft.com/en-us/library/dn890708.aspx)\nThis cmdlet saves packages to the local computer without installing them.\n```powershell\n# Saves jquery package to c:\\test using NuGetProvider\n# Notes that the -Path parameter must point to an existing location\nSave-Package -Name jquery –Provider NuGet -Path c:\\test\n\n# Save a package by piping.\nFind-Package -Name jquery -Source http://www.nuget.org/api/v2/ | Save-Package -Path c:\\test\nFind-Package -source c:\\test\n```\n\n## [Set-PackageSource Cmdlet](https://technet.microsoft.com/en-us/library/dn890710.aspx)\nThis cmdlet changes information about an existing package source. \n```powershell\n#Set-PackageSource changes the values for a source that has already been registered by running the Register-PackageSource cmdlet. By #running Set-PackageSource, you can change the source name and location.\nSet-PackageSource  -Name nuget.org -Location  http://www.nuget.org/api/v2 -NewName nuget2 -NewLocation https://www.nuget.org/api/v2 \n```\n\n## [Uninstall-Package Cmdlet](https://technet.microsoft.com/en-us/library/dn890702.aspx)\nThis cmdlet uninstalls packages installed on the local computer.\n```powershell\n# Uninstall jquery using nuget\nUninstall-Package -Name jquery –Provider NuGet -Destination c:\\test\n\n# Uninstall a package with by piping with Get-Package\nGet-Package -Name jquery –Provider NuGet -Destination c:\\test | Uninstall-Package\n```\n\n## [Unregister-PackageSource Cmdlet](https://technet.microsoft.com/en-us/library/dn890707.aspx)\n```powershell\n# Unregister a package source for the NuGet provider. You can use command Unregister-PackageSource, to disconnect with a repository, and Get-PackageSource, to discover what the repositories are associated with that provider.\nUnregister-PackageSource  -Name \"NugetSource\"\n```\n\n"}