{"nodes":[{"content":"Desired State Configuration (DSC) Known Issues and Limitations","pos":[2,64]},{"content":"Breaking Change: Certificates used to encrypt/decrypt passwords in DSC configurations may not work after installing WMF 5.0 RTM","pos":[66,193]},{"content":"In WMF 4.0 and WMF 5.0 Preview releases, DSC would not allow passwords in the configuration to be of length more than 121 characters.","pos":[324,457]},{"content":"DSC was forcing to use short passwords even if lengthy and strong password was desired.","pos":[458,545]},{"content":"This breaking change allows passwords to be of arbitrary length in the DSC configuration.","pos":[546,635]},{"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> Re-create the certificate with Data Encipherment or Key Encipherment Key usage, and Document Encryption Enhanced Key usage (1.3.6.1.4.1.311.80.1).","pos":[637,799],"source":"**Resolution:** Re-create the certificate with Data Encipherment or Key Encipherment Key usage, and Document Encryption Enhanced Key usage (1.3.6.1.4.1.311.80.1)."},{"content":"Technet article <bpt id=\"p1\">&lt;</bpt>https://technet.microsoft.com/en-us/library/dn807171.aspx<ept id=\"p1\">&gt;</ept> has more information.","pos":[800,897],"source":" Technet article <https://technet.microsoft.com/en-us/library/dn807171.aspx> has more information."},{"content":"DSC cmdlets may fail after installing WMF 5.0 RTM","pos":[900,949]},{"content":"Start-DscConfiguration and other DSC cmdlets may fail after installing WMF 5.0 RTM with the following error:","pos":[1035,1143]},{"pos":[1434,1566],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> Delete DSCEngineCache.mof by running the following command in an elevated PowerShell session (Run as Administrator):","source":"**Resolution:** Delete DSCEngineCache.mof by running the following command in an elevated PowerShell session (Run as Administrator):"},{"content":"DSC cmdlets may not work if WMF 5.0 RTM is installed on top of WMF 5.0 Production Preview","pos":[1668,1757]},{"pos":[1813,1912],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> Run the following command in an elevated PowerShell session (run as administrator):","source":"**Resolution:** Run the following command in an elevated PowerShell session (run as administrator):"},{"content":"LCM can go into an unstable state while using Get-DscConfiguration in DebugMode","pos":[1991,2070]},{"content":"If LCM is in DebugMode, pressing CTRL+C to stop the processing of Get-DscConfiguration can cause LCM to go into an unstable state such that majority of DSC cmdlets won’t work.","pos":[2152,2327]},{"pos":[2329,2408],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> Don’t press CTRL+C while debugging Get-DscConfiguration cmdlet.","source":"**Resolution:** Don’t press CTRL+C while debugging Get-DscConfiguration cmdlet."},{"content":"Stop-DscConfiguration may hang in DebugMode","pos":[2411,2454]},{"content":"If LCM is in DebugMode, Stop-DscConfiguration may hang while trying to stop an operation started by Get-DscConfiguration","pos":[2576,2696]},{"pos":[2698,2873],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> Finish the debugging of the operation started by Get-DscConfiguration as outlined in section ‘<bpt id=\"p2\">[</bpt>DSC RESOURCE SCRIPT DEBUGGING<ept id=\"p2\">](#dsc-resource-script-debugging)</ept>’.","source":"**Resolution:** Finish the debugging of the operation started by Get-DscConfiguration as outlined in section ‘[DSC RESOURCE SCRIPT DEBUGGING](#dsc-resource-script-debugging)’."},{"content":"No Verbose Error Messages are shown in DebugMode","pos":[2876,2924]},{"content":"If LCM is in DebugMode, no verbose error messages are displayed from DSC Resources.","pos":[3009,3092]},{"pos":[3094,3171],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> Disable <bpt id=\"p2\">*</bpt>DebugMode<ept id=\"p2\">*</ept> to see verbose messages from the resource","source":"**Resolution:** Disable *DebugMode* to see verbose messages from the resource"},{"content":"Invoke-DscResource operations cannot be retrieved by Get-DscConfigurationStatus cmdlet","pos":[3174,3260]},{"content":"After using Invoke-DscResource cmdlet to directly invoke any resource’s methods, the records of such operation cannot be retrieved through Get-DscConfigurationStatus at a later time.","pos":[3348,3530]},{"pos":[3532,3553],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> None.","source":"**Resolution:** None."},{"pos":[3556,3634],"content":"Get-DscConfigurationStatus returns pull cycle operations as type <bpt id=\"p1\">*</bpt>Consistency<ept id=\"p1\">*</ept>","source":"Get-DscConfigurationStatus returns pull cycle operations as type *Consistency*"},{"pos":[3717,3891],"content":"When a node is set to PULL refresh mode, for each pull operation performed, Get-DscConfigurationStatus cmdlet reports the operation type as <bpt id=\"p1\">*</bpt>Consistency<ept id=\"p1\">*</ept> instead of <bpt id=\"p2\">*</bpt>Initial<ept id=\"p2\">*</ept>","source":"When a node is set to PULL refresh mode, for each pull operation performed, Get-DscConfigurationStatus cmdlet reports the operation type as *Consistency* instead of *Initial*"},{"pos":[3893,3914],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> None.","source":"**Resolution:** None."},{"content":"Invoke-DscResource cmdlet does not return message in the order they were produced","pos":[3916,3997]},{"content":"The Invoke-DscResource cmdlet does not return verbose, warning, and error messages in the order they were produced by LCM or the DSC resource.","pos":[4080,4222]},{"pos":[4224,4245],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> None.","source":"**Resolution:** None."},{"content":"DSC Resources cannot be debugged easily when used with Invoke-DscResource","pos":[4248,4321]},{"content":"When LCM is running in debug mode (see <bpt id=\"p1\">[</bpt>DSC RESOURCE SCRIPT DEBUGGING<ept id=\"p1\">](#dsc-resource-script-debugging)</ept> for more details), Invoke-DscResource cmdlet does not give information about runspace to connect to for debugging.","pos":[4394,4611],"source":"When LCM is running in debug mode (see [DSC RESOURCE SCRIPT DEBUGGING](#dsc-resource-script-debugging) for more details), Invoke-DscResource cmdlet does not give information about runspace to connect to for debugging."},{"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> Discover and attach to the runspace using cmdlets <bpt id=\"p2\">**</bpt>Get-PSHostProcessInfo<ept id=\"p2\">**</ept>, <bpt id=\"p3\">**</bpt>Enter-PSHostProcess<ept id=\"p3\">**</ept> , <bpt id=\"p4\">**</bpt>Get-Runspace<ept id=\"p4\">**</ept> and <bpt id=\"p5\">**</bpt>Debug-Runspace<ept id=\"p5\">**</ept> to debug the DSC resource.","pos":[4612,4797],"source":"**Resolution:** Discover and attach to the runspace using cmdlets **Get-PSHostProcessInfo**, **Enter-PSHostProcess** , **Get-Runspace** and **Debug-Runspace** to debug the DSC resource."},{"content":"Various Partial Configuration documents for same node cannot have identical resource names","pos":[5564,5654]},{"content":"For several partial configurations that are deployed onto a single node, identical names of resources cause run time error.","pos":[5747,5870]},{"pos":[5872,5968],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> Use different names for even same resources in different partial configurations.","source":"**Resolution:** Use different names for even same resources in different partial configurations."},{"content":"Start-DscConfiguration –UseExisting does not work with -Credential","pos":[5971,6037]},{"content":"When using Start-DscConfiguration with –UseExisting parameter, the –Credential parameter is ignored.","pos":[6106,6206]},{"content":"DSC uses default process identity to proceed the operation.","pos":[6207,6266]},{"content":"This causes error when a different credential is needed to proceed on remote node.","pos":[6267,6349]},{"pos":[6351,6409],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> Use CIM session for remote DSC operations:","source":"**Resolution:** Use CIM session for remote DSC operations:"},{"content":"IPv6 Addresses as Node Names in DSC configurations","pos":[6557,6607]},{"content":"IPv6 addresses as node names in DSC configuration scripts are not supported in this release.","pos":[6659,6751]},{"pos":[6753,6774],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> None.","source":"**Resolution:** None."},{"content":"Debugging of Class-Based DSC Resources","pos":[6777,6815]},{"content":"Debugging of class-based DSC Resources is not supported in this release.","pos":[6855,6927]},{"pos":[6929,6950],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> None.","source":"**Resolution:** None."},{"content":"Variables &amp; Functions defined in $script scope in DSC Class-Based Resource are not preserved across multiple calls to a DSC Resource","pos":[6953,7085],"source":"Variables & Functions defined in $script scope in DSC Class-Based Resource are not preserved across multiple calls to a DSC Resource"},{"content":"Multiple consecutive calls to Start-DSCConfiguration will fail if configuration is using any class-based resource which has variables or functions defined in $script scope.","pos":[7222,7394]},{"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> Define all variables and functions in DSC Resource class itself.","pos":[7396,7476],"source":"**Resolution:** Define all variables and functions in DSC Resource class itself."},{"content":"No $script scope variables/functions.","pos":[7477,7514]},{"content":"DSC Resource Debugging when a resource is using PSDscRunAsCredential","pos":[7517,7585]},{"pos":[7657,7794],"content":"DSC Resource debugging when a resource is using the <bpt id=\"p1\">*</bpt>PSDscRunAsCredential<ept id=\"p1\">*</ept> property in the configuration is not suported in this release.","source":"DSC Resource debugging when a resource is using the *PSDscRunAsCredential* property in the configuration is not suported in this release."},{"pos":[7796,7817],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> None.","source":"**Resolution:** None."},{"content":"PsDscRunAsCredential is not supported for DSC Composite Resources","pos":[7820,7885]},{"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> Use Credential property if available.","pos":[7952,8005],"source":"**Resolution:** Use Credential property if available."},{"content":"Example ServiceSet and WindowsFeatureSet","pos":[8006,8046]},{"pos":[8049,8122],"content":"<bpt id=\"p1\">*</bpt>Get-DscResource -Syntax<ept id=\"p1\">*</ept> does not reflect PsDscRunAsCredential correctly","source":"*Get-DscResource -Syntax* does not reflect PsDscRunAsCredential correctly"},{"content":"Get-DscResource -Syntax does not reflect PsDscRunAsCredential correctly when resource marks it as mandatory or does not support it.","pos":[8197,8328]},{"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> None.","pos":[8330,8351],"source":"**Resolution:** None."},{"content":"However, authoring configuration in ISE reflects correct metadata about PsDscRunAsCredential property when using IntelliSense.","pos":[8352,8478]},{"content":"WindowsOptionalFeature is not available in Windows 7","pos":[8481,8533]},{"content":"The WindowsOptionalFeature DSC resource is not available in Windows 7.","pos":[8589,8659]},{"content":"This resource requires the DISM module, and DISM cmdlets that are available starting in Windows 8 and newer releases of the Windows operating system.","pos":[8660,8809]},{"content":"For Class-based DSC resources, Import-DscResource -ModuleVersion may not work as expected","pos":[8811,8900]},{"pos":[8995,9193],"content":"If the compilation node has multiple version of a class-based DSC resource module, <ph id=\"ph1\">`Import-DscResource -ModuleVersion`</ph> does not pick the specified version and results in following compilation error.","source":"If the compilation node has multiple version of a class-based DSC resource module, `Import-DscResource -ModuleVersion` does not pick the specified version and results in following compilation error."},{"pos":[9856,10014],"content":"<bpt id=\"p1\">**</bpt>Resolution:<ept id=\"p1\">**</ept> Import the required version by defining the <bpt id=\"p2\">*</bpt>ModuleSpecification<ept id=\"p2\">*</ept> object to the <ph id=\"ph1\">`-ModuleName`</ph> with <ph id=\"ph2\">`RequiredVersion`</ph> key specified as follows:","source":"**Resolution:** Import the required version by defining the *ModuleSpecification* object to the `-ModuleName` with `RequiredVersion` key specified as follows:"},{"content":"Some DSC resources like registry resource may start to take a long time to process the request.","pos":[10123,10218]},{"pos":[10349,10438],"content":"<bpt id=\"p1\">**</bpt>Resolution1:<ept id=\"p1\">**</ept> Create a schedule task that cleans up the following folder periodically.","source":"**Resolution1:** Create a schedule task that cleans up the following folder periodically."},{"pos":[10562,10681],"content":"<bpt id=\"p1\">**</bpt>Resolution2:<ept id=\"p1\">**</ept> Change the DSC configuration to clean up the <bpt id=\"p2\">*</bpt>CommandAnalysis<ept id=\"p2\">*</ept> folder at the end of the configuration.","source":"**Resolution2:** Change the DSC configuration to clean up the *CommandAnalysis* folder at the end of the configuration."}],"content":"# Desired State Configuration (DSC) Known Issues and Limitations\n\nBreaking Change: Certificates used to encrypt/decrypt passwords in DSC configurations may not work after installing WMF 5.0 RTM\n--------------------------------------------------------------------------------------------------------------------------------\n\nIn WMF 4.0 and WMF 5.0 Preview releases, DSC would not allow passwords in the configuration to be of length more than 121 characters. DSC was forcing to use short passwords even if lengthy and strong password was desired. This breaking change allows passwords to be of arbitrary length in the DSC configuration.\n\n**Resolution:** Re-create the certificate with Data Encipherment or Key Encipherment Key usage, and Document Encryption Enhanced Key usage (1.3.6.1.4.1.311.80.1). Technet article <https://technet.microsoft.com/en-us/library/dn807171.aspx> has more information.\n\n\nDSC cmdlets may fail after installing WMF 5.0 RTM\n------------------------------------------------------------------------------------\nStart-DscConfiguration and other DSC cmdlets may fail after installing WMF 5.0 RTM with the following error:\n```powershell\n    LCM failed to retrieve the property PendingJobStep from the object of class dscInternalCache .\n    + CategoryInfo : ObjectNotFound: (root/Microsoft/...gurationManager:String) [], CimException\n    + FullyQualifiedErrorId : MI RESULT 6\n    + PSComputerName : localhost\n```\n\n**Resolution:** Delete DSCEngineCache.mof by running the following command in an elevated PowerShell session (Run as Administrator):\n    \n```powershell\nRemove-Item -Path $env:SystemRoot\\system32\\Configuration\\DSCEngineCache.mof\n```\n\n\nDSC cmdlets may not work if WMF 5.0 RTM is installed on top of WMF 5.0 Production Preview\n------------------------------------------------------\n**Resolution:** Run the following command in an elevated PowerShell session (run as administrator):\n```powershell\n    mofcomp $env:windir\\system32\\wbem\\DscCoreConfProv.mof\n```\n\n\nLCM can go into an unstable state while using Get-DscConfiguration in DebugMode\n-------------------------------------------------------------------------------\n\nIf LCM is in DebugMode, pressing CTRL+C to stop the processing of Get-DscConfiguration can cause LCM to go into an unstable state such that majority of DSC cmdlets won’t work.\n\n**Resolution:** Don’t press CTRL+C while debugging Get-DscConfiguration cmdlet.\n\n\nStop-DscConfiguration may hang in DebugMode\n------------------------------------------------------------------------------------------------------------------------\nIf LCM is in DebugMode, Stop-DscConfiguration may hang while trying to stop an operation started by Get-DscConfiguration\n\n**Resolution:** Finish the debugging of the operation started by Get-DscConfiguration as outlined in section ‘[DSC RESOURCE SCRIPT DEBUGGING](#dsc-resource-script-debugging)’.\n\n\nNo Verbose Error Messages are shown in DebugMode\n-----------------------------------------------------------------------------------\nIf LCM is in DebugMode, no verbose error messages are displayed from DSC Resources.\n\n**Resolution:** Disable *DebugMode* to see verbose messages from the resource\n\n\nInvoke-DscResource operations cannot be retrieved by Get-DscConfigurationStatus cmdlet\n--------------------------------------------------------------------------------------\nAfter using Invoke-DscResource cmdlet to directly invoke any resource’s methods, the records of such operation cannot be retrieved through Get-DscConfigurationStatus at a later time.\n\n**Resolution:** None.\n\n\nGet-DscConfigurationStatus returns pull cycle operations as type *Consistency*\n---------------------------------------------------------------------------------\nWhen a node is set to PULL refresh mode, for each pull operation performed, Get-DscConfigurationStatus cmdlet reports the operation type as *Consistency* instead of *Initial*\n\n**Resolution:** None.\n\nInvoke-DscResource cmdlet does not return message in the order they were produced\n---------------------------------------------------------------------------------\nThe Invoke-DscResource cmdlet does not return verbose, warning, and error messages in the order they were produced by LCM or the DSC resource.\n\n**Resolution:** None.\n\n\nDSC Resources cannot be debugged easily when used with Invoke-DscResource\n-----------------------------------------------------------------------\nWhen LCM is running in debug mode (see [DSC RESOURCE SCRIPT DEBUGGING](#dsc-resource-script-debugging) for more details), Invoke-DscResource cmdlet does not give information about runspace to connect to for debugging.\n**Resolution:** Discover and attach to the runspace using cmdlets **Get-PSHostProcessInfo**, **Enter-PSHostProcess** , **Get-Runspace** and **Debug-Runspace** to debug the DSC resource.\n\n```powershell\n# Find all the processes hosting PowerShell\nGet-PSHostProcessInfo\n\nProcessName ProcessId AppDomainName\n----------- --------- -------------\npowershell 3932 DefaultAppDomain\npowershell_ise 2304 DefaultAppDomain\nWmiPrvSE 3396 DscPsPluginWkr_AppDomain\n\n# Enter the process that is hosting DSC engine (WMI process with DscPsPluginWkr_Appdomain)\nEnter-PSHostProcess -Id 3396 -AppDomainName DscPsPluginWkr_AppDomain\n\n# Find all the available rusnspaces in that process\nGet-Runspace\n\nId Name ComputerName Type State Availability\n-- ---- ------------ ---- ----- ------------\n2 Runspace2 localhost Local Opened InBreakpoint\n5 RemoteHost localhost Local Opened Busy\n\n# Debug the runspace that is in **InBreakpoint** availability state\nDebug-Runspace -Id 2\n```\n\n\nVarious Partial Configuration documents for same node cannot have identical resource names\n------------------------------------------------------------------------------------------\n\nFor several partial configurations that are deployed onto a single node, identical names of resources cause run time error.\n\n**Resolution:** Use different names for even same resources in different partial configurations.\n\n\nStart-DscConfiguration –UseExisting does not work with -Credential\n------------------------------------------------------------------\n\nWhen using Start-DscConfiguration with –UseExisting parameter, the –Credential parameter is ignored. DSC uses default process identity to proceed the operation. This causes error when a different credential is needed to proceed on remote node.\n\n**Resolution:** Use CIM session for remote DSC operations:\n```powershell\n$session = New-CimSession -ComputerName $node -Credential $credential\nStart-DscConfiguration -UseExisting -CimSession $session\n```\n\n\nIPv6 Addresses as Node Names in DSC configurations\n--------------------------------------------------\nIPv6 addresses as node names in DSC configuration scripts are not supported in this release.\n\n**Resolution:** None.\n\n\nDebugging of Class-Based DSC Resources\n--------------------------------------\nDebugging of class-based DSC Resources is not supported in this release.\n\n**Resolution:** None.\n\n\nVariables & Functions defined in $script scope in DSC Class-Based Resource are not preserved across multiple calls to a DSC Resource \n-------------------------------------------------------------------------------------------------------------------------------------\n\nMultiple consecutive calls to Start-DSCConfiguration will fail if configuration is using any class-based resource which has variables or functions defined in $script scope.\n\n**Resolution:** Define all variables and functions in DSC Resource class itself. No $script scope variables/functions.\n\n\nDSC Resource Debugging when a resource is using PSDscRunAsCredential\n----------------------------------------------------------------------\nDSC Resource debugging when a resource is using the *PSDscRunAsCredential* property in the configuration is not suported in this release.\n\n**Resolution:** None.\n\n\nPsDscRunAsCredential is not supported for DSC Composite Resources\n----------------------------------------------------------------\n\n**Resolution:** Use Credential property if available. Example ServiceSet and WindowsFeatureSet\n\n\n*Get-DscResource -Syntax* does not reflect PsDscRunAsCredential correctly\n-------------------------------------------------------------------------\nGet-DscResource -Syntax does not reflect PsDscRunAsCredential correctly when resource marks it as mandatory or does not support it.\n\n**Resolution:** None. However, authoring configuration in ISE reflects correct metadata about PsDscRunAsCredential property when using IntelliSense.\n\n\nWindowsOptionalFeature is not available in Windows 7\n-----------------------------------------------------\n\nThe WindowsOptionalFeature DSC resource is not available in Windows 7. This resource requires the DISM module, and DISM cmdlets that are available starting in Windows 8 and newer releases of the Windows operating system.\n\nFor Class-based DSC resources, Import-DscResource -ModuleVersion may not work as expected   \n------------------------------------------------------------------------------------------\nIf the compilation node has multiple version of a class-based DSC resource module, `Import-DscResource -ModuleVersion` does not pick the specified version and results in following compilation error.\n\n```\nImportClassResourcesFromModule : Exception calling \"ImportClassResourcesFromModule\" with \"3\" argument(s): \"Keyword 'MyTestResource' already defined in the configuration.\"\nAt C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\PSDesiredStateConfiguration\\PSDesiredStateConfiguration.psm1:2035 char:35\n+ ... rcesFound = ImportClassResourcesFromModule -Module $mod -Resources $r ...\n+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [ImportClassResourcesFromModule], MethodInvocationException\n    + FullyQualifiedErrorId : PSInvalidOperationException,ImportClassResourcesFromModule\n```\n\n**Resolution:** Import the required version by defining the *ModuleSpecification* object to the `-ModuleName` with `RequiredVersion` key specified as follows:\n``` PowerShell  \nImport-DscResource -ModuleName @{ModuleName='MyModuleName';RequiredVersion='1.2'}  \n```  \n\nSome DSC resources like registry resource may start to take a long time to process the request.\n--------------------------------------------------------------------------------------------------------------------------------\n\n**Resolution1:** Create a schedule task that cleans up the following folder periodically.\n``` PowerShell \n$env:windir\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Windows\\PowerShell\\CommandAnalysis \n```\n\n**Resolution2:** Change the DSC configuration to clean up the *CommandAnalysis* folder at the end of the configuration.\n``` PowerShell\nConfiguration $configName\n{\n\n   # User Data\n    Registry SetRegisteredOwner\n    {\n        Ensure = 'Present'\n        Force = $True\n        Key = $Node.RegisteredKey\n        ValueName = $Node.RegisteredOwnerValue\n        ValueType = 'String'\n        ValueData = $Node.RegisteredOwnerData\n    }\n    #\n    # Script to delete the config \n    #\n    script DeleteCommandAnalysisCache\n    {\n        DependsOn=\"[Registry]SetRegisteredOwner\"\n        getscript=\"@{}\"\n        testscript = 'Remove-Item -Path $env:windir\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Windows\\PowerShell\\CommandAnalysis -Force -Recurse -ErrorAction SilentlyContinue -ErrorVariable ev | out-null;$true'\n        setscript = '$true'\n    }\n}\n```\n"}