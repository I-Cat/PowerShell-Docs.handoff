{"nodes":[{"pos":[13,60],"content":"New Scenarios and Features in WMF 5.1 (Preview)","needQuote":true,"nodes":[{"content":"New Scenarios and Features in WMF 5.1 (Preview)","pos":[0,47]}]},{"pos":[93,113],"content":"PowerShell, DSC, WMF","needQuote":true,"nodes":[{"content":"PowerShell, DSC, WMF","pos":[0,20]}]},{"content":"New Scenarios and Features in WMF 5.1 (Preview)","pos":[229,276]},{"content":"Note: This information is preliminary and subject to change.","pos":[282,342]},{"content":"PowerShell Editions","pos":[347,366]},{"content":"Starting with version 5.1, PowerShell is available in different editions which denote varying feature sets and platform compatibility.","pos":[370,504]},{"pos":[508,724],"content":"<bpt id=\"p1\">**</bpt>Desktop Edition:<ept id=\"p1\">**</ept> Built on .NET Framework and provides compatibility with scripts and modules targeting versions of PowerShell running on full footprint editions of Windows such as Server Core and Windows Desktop.","source":"**Desktop Edition:** Built on .NET Framework and provides compatibility with scripts and modules targeting versions of PowerShell running on full footprint editions of Windows such as Server Core and Windows Desktop."},{"pos":[727,934],"content":"<bpt id=\"p1\">**</bpt>Core Edition:<ept id=\"p1\">**</ept> Built on .NET Core and provides compatibility with scripts and modules targeting versions of PowerShell running on reduced footprint editions of Windows such as Nano Server and Windows IoT.","source":"**Core Edition:** Built on .NET Core and provides compatibility with scripts and modules targeting versions of PowerShell running on reduced footprint editions of Windows such as Nano Server and Windows IoT."},{"pos":[936,982],"content":"<bpt id=\"p1\">**</bpt>Learn more about using PowerShell Editions<ept id=\"p1\">**</ept>","source":"**Learn more about using PowerShell Editions**"},{"pos":[985,1028],"content":"<bpt id=\"p1\">[</bpt>Determine running edition of PowerShell<ept id=\"p1\">]()</ept>","source":"[Determine running edition of PowerShell]()"},{"pos":[1031,1099],"content":"<bpt id=\"p1\">[</bpt>Declare a module's compatibility to specific PowerShell versions<ept id=\"p1\">]()</ept>","source":"[Declare a module's compatibility to specific PowerShell versions]()"},{"pos":[1102,1155],"content":"<bpt id=\"p1\">[</bpt>Filter Get-Module results by CompatiblePSEditions<ept id=\"p1\">]()</ept>","source":"[Filter Get-Module results by CompatiblePSEditions]()"},{"pos":[1158,1235],"content":"<bpt id=\"p1\">[</bpt>Prevent script execution unless run on a compatible edition of PowerShell<ept id=\"p1\">]()</ept>","source":"[Prevent script execution unless run on a compatible edition of PowerShell]()"},{"content":"Catalog Cmdlets","pos":[1240,1255]},{"pos":[1259,1447],"content":"Two new cmdlets have been added in the <bpt id=\"p1\">[</bpt>Microsoft.PowerShell.Security<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/hh847877.aspx)</ept> module; these generate and validate Windows catalog files.","source":"Two new cmdlets have been added in the [Microsoft.PowerShell.Security](https://technet.microsoft.com/en-us/library/hh847877.aspx) module; these generate and validate Windows catalog files."},{"content":"New-FileCatalog","pos":[1454,1469]},{"content":"New-FileCatalog creates a Windows catalog file for set of folders and files.","pos":[1505,1581]},{"content":"This catalog file contains hashes for all files in specified paths.","pos":[1582,1650],"source":" \nThis catalog file contains hashes for all files in specified paths."},{"content":"Users can distribute the set of folders along with corresponding catalog file representing those folders.","pos":[1651,1757],"source":" \nUsers can distribute the set of folders along with corresponding catalog file representing those folders."},{"content":"This information is useful to validate whether any changes have been made to the folders since catalog creation time.","pos":[1758,1876],"source":" \nThis information is useful to validate whether any changes have been made to the folders since catalog creation time."},{"content":"Catalog versions 1 and 2 are supported.","pos":[2031,2070]},{"content":"Version 1 uses the SHA1 hashing algorithm to create file hashes; version 2 uses SHA256.","pos":[2071,2159],"source":" \nVersion 1 uses the SHA1 hashing algorithm to create file hashes; version 2 uses SHA256."},{"content":"Catalog version 2 is not supported on <bpt id=\"p1\">*</bpt>Windows Server 2008 R2<ept id=\"p1\">*</ept> or <bpt id=\"p2\">*</bpt>Windows 7<ept id=\"p2\">*</ept>.","pos":[2160,2239],"source":" \nCatalog version 2 is not supported on *Windows Server 2008 R2* or *Windows 7*."},{"content":"You should use catalog version 2 on <bpt id=\"p1\">*</bpt>Windows 8<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>Windows Server 2012<ept id=\"p2\">*</ept>, and later operating systems.","pos":[2240,2341],"source":" \nYou should use catalog version 2 on *Windows 8*, *Windows Server 2012*, and later operating systems."},{"content":"This creates the catalog file.","pos":[2380,2410]},{"pos":[2482,2655],"content":"To verify the integrity of catalog file (Pester.cat in above example), sign it using <bpt id=\"p1\">[</bpt>Set-AuthenticodeSignature<ept id=\"p1\">](https://technet.microsoft.com/library/hh849819.aspx)</ept> cmdlet.","source":"To verify the integrity of catalog file (Pester.cat in above example), sign it using [Set-AuthenticodeSignature](https://technet.microsoft.com/library/hh849819.aspx) cmdlet."},{"content":"Test-FileCatalog","pos":[2664,2680]},{"content":"Test-FileCatalog validates the catalog representing a set of folders.","pos":[2716,2785]},{"content":"This cmdlet compares all the files hashes and their relative paths found in <bpt id=\"p1\">*</bpt>catalog<ept id=\"p1\">*</ept> with ones on <bpt id=\"p2\">*</bpt>disk<ept id=\"p2\">*</ept>.","pos":[2989,3095],"source":"This cmdlet compares all the files hashes and their relative paths found in *catalog* with ones on *disk*."},{"content":"If it detects any mismatch between file hashes and paths it returns the status as <bpt id=\"p1\">*</bpt>ValidationFailed<ept id=\"p1\">*</ept>.","pos":[3096,3198],"source":" \nIf it detects any mismatch between file hashes and paths it returns the status as *ValidationFailed*."},{"content":"Users can retrieve all this information by using the <bpt id=\"p1\">*</bpt>-Detailed<ept id=\"p1\">*</ept> parameter.","pos":[3199,3275],"source":" \nUsers can retrieve all this information by using the *-Detailed* parameter."},{"content":"It also displays signing status of catalog in <bpt id=\"p1\">*</bpt>Signature<ept id=\"p1\">*</ept> property which is equivalent to calling <bpt id=\"p2\">[</bpt>Get-AuthenticodeSignature<ept id=\"p2\">](https://technet.microsoft.com/en-us/library/hh849805.aspx)</ept> cmdlet on the catalog file.","pos":[3276,3489],"source":" \nIt also displays signing status of catalog in *Signature* property which is equivalent to calling [Get-AuthenticodeSignature](https://technet.microsoft.com/en-us/library/hh849805.aspx) cmdlet on the catalog file."},{"content":"Users can also skip any file during validation by using the <bpt id=\"p1\">*</bpt>-FilesToSkip<ept id=\"p1\">*</ept> parameter.","pos":[3490,3576],"source":" \nUsers can also skip any file during validation by using the *-FilesToSkip* parameter."},{"content":"Module Analysis Cache","pos":[3583,3604]},{"pos":[3608,3748],"content":"Starting with WMF 5.1, PowerShell provides control over the file that is used to cache data about a module, such as the commands it exports.","source":"Starting with WMF 5.1, PowerShell provides control\nover the file that is used to cache data about a module, such as the commands it exports."},{"content":"By default, this cache is stored in the file <ph id=\"ph1\">`${env:LOCALAPPDATA}\\Microsoft\\Windows\\PowerShell\\ModuleAnalysisCache`</ph>.","pos":[3750,3866],"source":"By default, this cache is stored in the file `${env:LOCALAPPDATA}\\Microsoft\\Windows\\PowerShell\\ModuleAnalysisCache`."},{"content":"The cache is typically read at startup while searching for a command and is written on a background thread sometime after a module is imported.","pos":[3867,4010],"source":"\nThe cache is typically read at startup while searching for a command\nand is written on a background thread sometime after a module is imported."},{"content":"To change the default location of the cache, set the <ph id=\"ph1\">`$env:PSModuleAnalysisCachePath`</ph> environment variable before starting PowerShell.","pos":[4012,4146],"source":"To change the default location of the cache, set the `$env:PSModuleAnalysisCachePath` environment variable before starting PowerShell."},{"content":"Changes to this environment variable will only affect children processes.","pos":[4147,4221],"source":" \nChanges to this environment variable will only affect children processes."},{"content":"The value should name a full path (including filename) that PowerShell has permission to create and write files.","pos":[4222,4335],"source":" \nThe value should name a full path (including filename) that PowerShell has permission to create and write files."},{"content":"To disable the file cache, set this value to an invalid location, for example:","pos":[4336,4415],"source":" \nTo disable the file cache, set this value to an invalid location, for example:"},{"content":"This sets the path to an invalid device.","pos":[4475,4515]},{"content":"If PowerShell can't write to the path, no error is returned, but you can see error reporting by using a tracer:","pos":[4516,4628],"source":" \nIf PowerShell can't write to the path, no error is returned, but you can see error reporting by using a tracer:"},{"content":"When writing out the cache, PowerShell will check for modules that no longer exist to avoid an unnecessarily large cache.","pos":[4754,4875],"source":"When writing out the cache, PowerShell will check for modules that no longer exist\nto avoid an unnecessarily large cache."},{"content":"Sometimes these checks are not desirable, in which case you can turn them off by setting:","pos":[4876,4965],"source":"\nSometimes these checks are not desirable, in which case you can turn them off by setting:"},{"content":"Setting this environment variable will take effect immediately in the current process.","pos":[5031,5117]},{"content":"Specifying module version","pos":[5121,5146]},{"content":"In WMF 5.1, <ph id=\"ph1\">`using module`</ph> behaves the same way as other module-related constructions in PowerShell.","pos":[5148,5248],"source":"In WMF 5.1, `using module` behaves the same way as other module-related constructions in PowerShell."},{"content":"Previously, you had no way to specify a particular module version; if there were multiple versions present, this resulted in an error.","pos":[5249,5384],"source":" \nPreviously, you had no way to specify a particular module version; if there were multiple versions present, this resulted in an error."},{"content":"In WMF 5.1:","pos":[5387,5398]},{"content":"You can use <ph id=\"ph1\">`ModuleSpecification`</ph> <bpt id=\"p1\">[</bpt>hash table<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/jj136290(v=vs.85).aspx)</ept>.","pos":[5402,5514],"source":"You can use `ModuleSpecification` [hash table](https://msdn.microsoft.com/en-us/library/jj136290(v=vs.85).aspx)."},{"content":"This hash table has the same format as <ph id=\"ph1\">`Get-Module -FullyQualifiedName`</ph>.","pos":[5515,5588],"source":" \nThis hash table has the same format as `Get-Module -FullyQualifiedName`."},{"pos":[5590,5671],"content":"<bpt id=\"p1\">**</bpt>Example:<ept id=\"p1\">**</ept> <ph id=\"ph1\">`using module @{ModuleName = 'PSReadLine'; RequiredVersion = '1.1'}`</ph>","source":"**Example:** `using module @{ModuleName = 'PSReadLine'; RequiredVersion = '1.1'}`"},{"pos":[5675,5877],"content":"If there are multiple versions of the module, PowerShell uses the <bpt id=\"p1\">**</bpt>same resolution logic<ept id=\"p1\">**</ept> as <ph id=\"ph1\">`Import-Module`</ph> and doesn't return an error--the same behavior as <ph id=\"ph2\">`Import-Module`</ph> and <ph id=\"ph3\">`Import-DscResource`</ph>.","source":"If there are multiple versions of the module, PowerShell uses the **same resolution logic** as `Import-Module` and doesn't return an error--the same behavior as `Import-Module` and `Import-DscResource`."},{"content":"Improvements to Pester","pos":[5882,5904]},{"content":"In WMF 5.1, the version of Pester that ships with PowerShell has been updated from 3.3.5 to 3.4.0, with the addition of commit https://github.com/pester/Pester/pull/484/commits/3854ae8a1f215b39697ac6c2607baf42257b102e, which enables better behavior for Pester on Nano Server.","pos":[5905,6180]},{"content":"You can review the changes in versions 3.3.5 to 3.4.0 by inspecting the ChangeLog.md file at: https://github.com/pester/Pester/blob/master/CHANGELOG.md","pos":[6183,6334]}],"content":"---\ntitle:   New Scenarios and Features in WMF 5.1 (Preview)\nms.date:  2016-07-13\nkeywords:  PowerShell, DSC, WMF\ndescription:  \nms.topic:  article\nauthor:  keithb\nmanager:  dongill\nms.prod:  powershell\nms.technology: WMF\n---\n\n# New Scenarios and Features in WMF 5.1 (Preview) #\n\n> Note: This information is preliminary and subject to change.\n\n## PowerShell Editions ##\nStarting with version 5.1, PowerShell is available in different editions which denote varying feature sets and platform compatibility.\n\n- **Desktop Edition:** Built on .NET Framework and provides compatibility with scripts and modules targeting versions of PowerShell running on full footprint editions of Windows such as Server Core and Windows Desktop.\n- **Core Edition:** Built on .NET Core and provides compatibility with scripts and modules targeting versions of PowerShell running on reduced footprint editions of Windows such as Nano Server and Windows IoT.\n\n**Learn more about using PowerShell Editions**\n- [Determine running edition of PowerShell]()\n- [Declare a module's compatibility to specific PowerShell versions]()\n- [Filter Get-Module results by CompatiblePSEditions]()\n- [Prevent script execution unless run on a compatible edition of PowerShell]()\n\n## Catalog Cmdlets  \n\nTwo new cmdlets have been added in the [Microsoft.PowerShell.Security](https://technet.microsoft.com/en-us/library/hh847877.aspx) module; these generate and validate Windows catalog files.  \n\n###New-FileCatalog \n--------------------------------\n\nNew-FileCatalog creates a Windows catalog file for set of folders and files. \nThis catalog file contains hashes for all files in specified paths. \nUsers can distribute the set of folders along with corresponding catalog file representing those folders. \nThis information is useful to validate whether any changes have been made to the folders since catalog creation time.    \n\n```PowerShell\nNew-FileCatalog [-CatalogFilePath] <string> [[-Path] <string[]>] [-CatalogVersion <int>] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\nCatalog versions 1 and 2 are supported. \nVersion 1 uses the SHA1 hashing algorithm to create file hashes; version 2 uses SHA256. \nCatalog version 2 is not supported on *Windows Server 2008 R2* or *Windows 7*. \nYou should use catalog version 2 on *Windows 8*, *Windows Server 2012*, and later operating systems.  \n\n![](../images/NewFileCatalog.jpg)\n\nThis creates the catalog file. \n\n![](../images/CatalogFile1.jpg)  \n\n![](../images/CatalogFile2.jpg) \n\nTo verify the integrity of catalog file (Pester.cat in above example), sign it using [Set-AuthenticodeSignature](https://technet.microsoft.com/library/hh849819.aspx) cmdlet.   \n\n\n###Test-FileCatalog \n--------------------------------\n\nTest-FileCatalog validates the catalog representing a set of folders. \n\n```PowerShell\nTest-FileCatalog [-CatalogFilePath] <string> [[-Path] <string[]>] [-Detailed] [-FilesToSkip <string[]>] [-WhatIf] [-Confirm] [<CommonParameters>]\n```\n\n![](../images/TestFileCatalog.jpg)\n\nThis cmdlet compares all the files hashes and their relative paths found in *catalog* with ones on *disk*. \nIf it detects any mismatch between file hashes and paths it returns the status as *ValidationFailed*. \nUsers can retrieve all this information by using the *-Detailed* parameter. \nIt also displays signing status of catalog in *Signature* property which is equivalent to calling [Get-AuthenticodeSignature](https://technet.microsoft.com/en-us/library/hh849805.aspx) cmdlet on the catalog file. \nUsers can also skip any file during validation by using the *-FilesToSkip* parameter. \n\n\n## Module Analysis Cache ##\nStarting with WMF 5.1, PowerShell provides control\nover the file that is used to cache data about a module, such as the commands it exports.\n\nBy default, this cache is stored in the file `${env:LOCALAPPDATA}\\Microsoft\\Windows\\PowerShell\\ModuleAnalysisCache`.\nThe cache is typically read at startup while searching for a command\nand is written on a background thread sometime after a module is imported.\n\nTo change the default location of the cache, set the `$env:PSModuleAnalysisCachePath` environment variable before starting PowerShell. \nChanges to this environment variable will only affect children processes. \nThe value should name a full path (including filename) that PowerShell has permission to create and write files. \nTo disable the file cache, set this value to an invalid location, for example:\n\n```PowerShell\n$env:PSModuleAnalysisCachePath = 'nul'\n```\n\nThis sets the path to an invalid device. \nIf PowerShell can't write to the path, no error is returned, but you can see error reporting by using a tracer:\n\n```PowerShell\nTrace-Command -PSHost -Name Modules -Expression { Import-Module Microsoft.PowerShell.Management -Force }\n```\n\nWhen writing out the cache, PowerShell will check for modules that no longer exist\nto avoid an unnecessarily large cache.\nSometimes these checks are not desirable, in which case you can turn them off by setting:\n\n```PowerShell\n$env:PSDisableModuleAnalysisCacheCleanup = 1\n```\n\nSetting this environment variable will take effect immediately in the current process.\n\n##Specifying module version\n\nIn WMF 5.1, `using module` behaves the same way as other module-related constructions in PowerShell. \nPreviously, you had no way to specify a particular module version; if there were multiple versions present, this resulted in an error.\n\n\nIn WMF 5.1:\n\n* You can use `ModuleSpecification` [hash table](https://msdn.microsoft.com/en-us/library/jj136290(v=vs.85).aspx). \nThis hash table has the same format as `Get-Module -FullyQualifiedName`.\n\n**Example:** `using module @{ModuleName = 'PSReadLine'; RequiredVersion = '1.1'}`\n\n* If there are multiple versions of the module, PowerShell uses the **same resolution logic** as `Import-Module` and doesn't return an error--the same behavior as `Import-Module` and `Import-DscResource`.\n\n\n##Improvements to Pester\nIn WMF 5.1, the version of Pester that ships with PowerShell has been updated from 3.3.5 to 3.4.0, with the addition of commit https://github.com/pester/Pester/pull/484/commits/3854ae8a1f215b39697ac6c2607baf42257b102e, which enables better behavior for Pester on Nano Server. \n\nYou can review the changes in versions 3.3.5 to 3.4.0 by inspecting the ChangeLog.md file at: https://github.com/pester/Pester/blob/master/CHANGELOG.md\n"}