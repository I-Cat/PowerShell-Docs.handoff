{"nodes":[{"pos":[12,33],"content":"WinRMSecurityRedirect","needQuote":true,"nodes":[{"content":"WinRMSecurityRedirect","pos":[0,21]}]},{"pos":[66,83],"content":"powershell,cmdlet","needQuote":true,"nodes":[{"content":"powershell,cmdlet","pos":[0,17]}]},{"content":"PowerShell Remoting Security Considerations","pos":[263,306]},{"content":"PowerShell Remoting is the recommended way to manage Windows systems.","pos":[308,377]},{"content":"PowerShell Remoting is enabled by default in Windows Server 2012 R2.","pos":[378,446]},{"content":"This document covers security concerns, recommendations, and best practices when using PowerShell Remoting.","pos":[447,555],"source":" This document covers security concerns, \nrecommendations, and best practices when using PowerShell Remoting."},{"content":"What is PowerShell Remoting?","pos":[560,588]},{"content":"PowerShell Remoting uses <bpt id=\"p1\">[</bpt>Windows Remote Management (WinRM)<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/desktop/aa384426.aspx)</ept>, which is the Microsoft implementation of the <bpt id=\"p2\">[</bpt>Web Services for Managment (WS-Managment)<ept id=\"p2\">](http://www.dmtf.org/sites/default/files/standards/documents/DSP0226_1.2.0.pdf)</ept> protocol, to allow users to run PowerShell commands on remote computers.","pos":[590,964],"source":"PowerShell Remoting uses [Windows Remote Management (WinRM)](https://msdn.microsoft.com/en-us/library/windows/desktop/aa384426.aspx), which is the Microsoft implementation of the\n[Web Services for Managment (WS-Managment)](http://www.dmtf.org/sites/default/files/standards/documents/DSP0226_1.2.0.pdf) protocol, to allow users to run PowerShell commands on remote\ncomputers."},{"content":"You can find more information about using PowerShell Remoting at <bpt id=\"p1\">[</bpt>Running Remote Commands<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dd819505.aspx)</ept>.","pos":[965,1115],"source":" You can find more information about using PowerShell Remoting at [Running Remote Commands](https://technet.microsoft.com/en-us/library/dd819505.aspx)."},{"pos":[1117,1303],"content":"PowerShell Remoting is not the same as using the <bpt id=\"p1\">**</bpt>ComputerName<ept id=\"p1\">**</ept> parameter of a cmdlet to run it on a remote computer, which uses Remote Procedure Call (RPC) as its underlying protocol.","source":"PowerShell Remoting is not the same as using the **ComputerName** parameter of a cmdlet to run it on a remote computer, which uses Remote Procedure Call (RPC)\nas its underlying protocol."},{"content":"PowerShell Remoting default settings","pos":[1309,1345]},{"content":"PowerShell Remoting (and WinRM) listen on the following ports:","pos":[1347,1409]},{"content":"HTTP: 5985","pos":[1413,1423]},{"content":"HTTPS: 5986","pos":[1426,1437]},{"content":"By default, PowerShell Remoting only allows connections from members of the Administrators group.","pos":[1439,1536]},{"content":"Sessions are launched under the user's context, so all operating system access controls applied to individual users and groups continue to apply to them while connected over PowerShell Remoting.","pos":[1537,1731],"source":" Sessions are launched under the user's context, so all operating\nsystem access controls applied to individual users and groups continue to apply to them while connected over PowerShell Remoting."},{"content":"On private networks, the default Windows Firewall rule for PowerShell Remoting accepts all connections.","pos":[1733,1836]},{"content":"On public networks, the default Windows Firewall rule allows PowerShell Remoting connections only from within the same subnet.","pos":[1837,1963],"source":" On public networks, the default Windows Firewall rule allows PowerShell\nRemoting connections only from within the same subnet."},{"content":"You have to explicitly change that rule to open PowerShell Remoting to all connections on a public network.","pos":[1964,2071]},{"pos":[2074,2253],"content":"**Warning:** The firewall rule for public networks is meant to protect the computer from potentially malicious external connection attempts. Use caution when removing \nthis rule.","leadings":["",">"],"nodes":[{"content":"<bpt id=\"p1\">**</bpt>Warning:<ept id=\"p1\">**</ept> The firewall rule for public networks is meant to protect the computer from potentially malicious external connection attempts.","pos":[0,140],"source":"**Warning:** The firewall rule for public networks is meant to protect the computer from potentially malicious external connection attempts."},{"content":"Use caution when removing this rule.","pos":[141,178],"source":" Use caution when removing \nthis rule."}]},{"content":"Process isolation","pos":[2258,2275]},{"content":"PowerShell Remoting uses <bpt id=\"p1\">[</bpt>Windows Remote Management (WinRM)<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/desktop/aa384426)</ept> for communication between computers.","pos":[2277,2441],"source":"PowerShell Remoting uses [Windows Remote Management (WinRM)](https://msdn.microsoft.com/en-us/library/windows/desktop/aa384426) for communication between computers."},{"content":"WinRM runs as a service under the Network Service account, and spawns isolated processes running as user accounts to host PowerShell instances.","pos":[2442,2586],"source":" \nWinRM runs as a service under the Network Service account, and spawns isolated processes running as user accounts to host PowerShell instances."},{"content":"An instance of PowerShell running as one user has no access to a process running an instance of PowerShell as another user.","pos":[2587,2710],"source":" An instance of PowerShell running as one\nuser has no access to a process running an instance of PowerShell as another user."},{"content":"Event logs generated by PowerShell Remoting","pos":[2715,2758]},{"content":"FireEye has provided a good summary of the event logs and other security evidence generated by PowerShell Remoting sessions, available at","pos":[2760,2897]},{"content":"<bpt id=\"p1\">[</bpt>Investigating PowerShell Attacks<ept id=\"p1\">](https://www.fireeye.com/content/dam/fireeye-www/global/en/solutions/pdfs/wp-lazanciyan-investigating-powershell-attacks.pdf)</ept>.","pos":[2900,3060],"source":"[Investigating PowerShell Attacks](https://www.fireeye.com/content/dam/fireeye-www/global/en/solutions/pdfs/wp-lazanciyan-investigating-powershell-attacks.pdf)."},{"content":"Encryption and transport protocols","pos":[3065,3099]},{"content":"It is helpful to consider the security of a PowerShell Remoting connection from two perspectives: initial authentication, and ongoing communication.","pos":[3101,3249]},{"content":"Regardless of the transport protocol used (HTTP or HTTPS), PowerShell Remoting always encrypts all communication after initial authentication with a per-session AES-256 symmetric key.","pos":[3252,3435]},{"content":"Initial authentication","pos":[3445,3467]},{"content":"Authentication confirms the identity of the client to the server - and ideally - the server to the client.","pos":[3469,3575]},{"content":"When a client connects to a domain server using its computer name (i.e.: server01, or server01.contoso.com), the default authentication protocol is <bpt id=\"p1\">[</bpt>Kerberos<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/desktop/aa378747.aspx)</ept>.","pos":[3581,3813],"source":"When a client connects to a domain server using its computer name (i.e.: server01, or server01.contoso.com), the default authentication protocol is \n[Kerberos](https://msdn.microsoft.com/en-us/library/windows/desktop/aa378747.aspx)."},{"content":"Kerberos guarantees both the user identity and server identity without sending any sort of reusable credential.","pos":[3814,3925],"source":"\nKerberos guarantees both the user identity and server identity without sending any sort of reusable credential."},{"content":"When a client connects to a domain server using its IP address, or connects to a workgroup server, Kerberos authentication is not possible.","pos":[3927,4066]},{"content":"In that case, PowerShell Remoting relies on the <bpt id=\"p1\">[</bpt>NTLM authentication protocol<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/desktop/aa378749.aspx)</ept>.","pos":[4067,4218],"source":" In that case, PowerShell\nRemoting relies on the [NTLM authentication protocol](https://msdn.microsoft.com/en-us/library/windows/desktop/aa378749.aspx)."},{"content":"The NTLM authentication protocol guarantees the user identity without sending any sort of delegable credential.","pos":[4219,4330],"source":" The NTLM authentication\nprotocol guarantees the user identity without sending any sort of delegable credential."},{"content":"To prove user identity, the NTLM protocol requires that both the client and server compute a session key from the user's password without ever exchanging the password itself.","pos":[4331,4505],"source":" To prove user identity, the NTLM protocol requires that both the client\nand server compute a session key from the user's password without ever exchanging the password itself."},{"content":"The server typically does not know the user's password, so it communicates with the domain controller, which does know the user's password and calculates the session key for the server.","pos":[4506,4692],"source":" The server typically does not know the user's password, so it communicates with \nthe domain controller, which does know the user's password and calculates the session key for the server."},{"content":"The NTLM protocol does not, however, guarantee server identity.","pos":[4701,4764]},{"content":"As with all protocols that use NTLM for authentication, an attacker with access to a domain-joined computer's machine account could invoke the domain controller to compute an NTLM session-key and thereby impersonate the server.","pos":[4765,4992],"source":" As with all protocols that use NTLM for authentication, an attacker with access to a domain-joined computer's machine\naccount could invoke the domain controller to compute an NTLM session-key and thereby impersonate the server."},{"content":"NTLM-based authentication is disabled by default, but may be permitted by either configuring SSL on the target server, or by configuring the WinRM TrustedHosts setting.","pos":[4994,5162]},{"content":"Using SSL certificates to validate server identity during NTLM-based connections","pos":[5173,5253]},{"content":"Since the NTLM authentication protocol cannot ensure the identity of the target server (only that it already knows your password), you can configure target servers to use SSL for PowerShell Remoting.","pos":[5255,5454],"source":"Since the NTLM authentication protocol cannot ensure the identity of the target server (only that it already knows your password), you can configure target servers\nto use SSL for PowerShell Remoting."},{"content":"Assigning a SSL certificate to the target server (if issued by a Certificate Authority that the client also trusts) enables NTLM-based authentication that guarantees both the user identity and server identity.","pos":[5455,5664],"source":" Assigning a SSL certificate to the target server (if issued by a Certificate Authority that the client also trusts) enables\nNTLM-based authentication that guarantees both the user identity and server identity."},{"content":"Ignoring NTLM-based server identity errors","pos":[5675,5717]},{"content":"If deploying a SSL certificate to a server for NTLM connections is infeasible, you may suppress the resulting identity errors by adding the server to the WinRM <bpt id=\"p1\">**</bpt>TrustedHosts<ept id=\"p1\">**</ept> list.","pos":[5725,5907],"source":"If deploying a SSL certificate to a server for NTLM connections is infeasible, you may suppress the resulting identity errors by adding the server to the WinRM\n**TrustedHosts** list."},{"content":"Please note that adding a server name to the TrustedHosts list should not be considered as any form of statement of the trustworthiness of the hosts themselves - as the NTLM authentication protocol cannot guarantee that you are in fact connecting to the host you are intending to connect to.","pos":[5908,6199],"source":" Please note that adding a server name to the TrustedHosts list should not be considered as any form of statement of the trustworthiness of\nthe hosts themselves - as the NTLM authentication protocol cannot guarantee that you are in fact connecting to the host you are intending to connect to."},{"content":"Instead, you should consider the TrustedHosts setting to be the list of hosts for which you wish to suppress the error generated by being unable to verify the server's identity.","pos":[6200,6377],"source":"\nInstead, you should consider the TrustedHosts setting to be the list of hosts for which you wish to suppress the error generated by being unable to verify the server's identity."},{"content":"Ongoing Communication","pos":[6392,6413]},{"pos":[6415,6623],"content":"Once initial authentication is complete, the <bpt id=\"p1\">[</bpt>PowerShell Remoting Protocol<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/dd357801.aspx)</ept> encrypts all ongoing communication with a per-session AES-256 symmetric key.","source":"Once initial authentication is complete, the [PowerShell Remoting Protocol](https://msdn.microsoft.com/en-us/library/dd357801.aspx) encrypts all ongoing communication\nwith a per-session AES-256 symmetric key."},{"content":"Making the second hop","pos":[6631,6652]},{"content":"By default, PowerShell Remoting uses Kerberos (if available) or NTLM for authentication.","pos":[6654,6742]},{"content":"Both of these protocols authenticate to the remote machine without sending credentials to it.","pos":[6743,6836]},{"content":"This is the most secure way to authenticate, but because the remote machine does not have the user's credentials, it cannot access other computers and services on the user's behalf.","pos":[6837,7018],"source":"\nThis is the most secure way to authenticate, but because the remote machine does not have the user's credentials, it cannot access other computers and services on the user's behalf."},{"content":"This is known as the \"Double-Hop\" problem.","pos":[7019,7062],"source":" \nThis is known as the \"Double-Hop\" problem."},{"content":"There are several ways to avoid this problem:","pos":[7064,7109]},{"content":"Kerberos Constrained Delegation","pos":[7115,7146]},{"content":"For highly trusted servers, you can enable <bpt id=\"p1\">[</bpt>Kerberos Constrained Delegation<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/cc995228.aspx)</ept>.","pos":[7148,7284],"source":"For highly trusted servers, you can enable [Kerberos Constrained Delegation](https://technet.microsoft.com/en-us/library/cc995228.aspx)."},{"content":"This allows the remote server to impersonate the authenticated user to a specified list of computers and services.","pos":[7285,7399],"source":" This allows the remote server to impersonate the\nauthenticated user to a specified list of computers and services."},{"content":"Trust between remote computers","pos":[7405,7435]},{"pos":[7437,7576],"content":"If you trust users connected remotely to <bpt id=\"p1\">*</bpt>Server1<ept id=\"p1\">*</ept> to resources on <bpt id=\"p2\">*</bpt>Server2<ept id=\"p2\">*</ept>, you can explicitly grant <bpt id=\"p3\">*</bpt>Server1<ept id=\"p3\">*</ept> access to those resources.","source":"If you trust users connected remotely to *Server1* to resources on *Server2*, you can explicitly grant *Server1* access to those resources."},{"content":"Use explicit credentials when accessing remote resources","pos":[7582,7638]},{"content":"You can explicitly pass your credentials to a remote resource by using the <bpt id=\"p1\">**</bpt>Credential<ept id=\"p1\">**</ept> parameter of a cmdlet.","pos":[7640,7752],"source":"You can explicitly pass your credentials to a remote resource by using the **Credential** parameter of a cmdlet."},{"content":"For example:","pos":[7753,7765]},{"content":"CredSSP","pos":[7895,7902]},{"content":"You can use the <bpt id=\"p1\">[</bpt>Credential Security Support Provider (CredSSP)<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/desktop/bb931352.aspx)</ept> for authentication (by specifying \"CredSSP\" as the value of the <ph id=\"ph1\">`Authentication`</ph> parameter of a call to the <bpt id=\"p2\">[</bpt>New-PSSession<ept id=\"p2\">](https://technet.microsoft.com/en-us/library/hh849717.aspx)</ept> cmdlet.","pos":[7904,8232],"source":"You can use the [Credential Security Support Provider (CredSSP)](https://msdn.microsoft.com/en-us/library/windows/desktop/bb931352.aspx) for authentication (by specifying \"CredSSP\" as the \nvalue of the `Authentication` parameter of a call to the [New-PSSession](https://technet.microsoft.com/en-us/library/hh849717.aspx) cmdlet."},{"content":"CredSSP passes credentials in plain text to the server, so using it opens you up to credential theft attacks.","pos":[8233,8342],"source":" CredSSP passes credentials in plain text to the server,\nso using it opens you up to credential theft attacks."},{"content":"If the remote computer is compromised, the attacker has access to the user's credentials.","pos":[8343,8432]},{"content":"CredSSP is disabled by default on both client and server computers.","pos":[8433,8501],"source":" CredSSP is disabled by default on both client and \nserver computers."},{"content":"You should enable CredSSP only in the most trusted environments.","pos":[8502,8566]},{"content":"For example, a domain administrator connecting to a domain controller because the domain controller is highly trusted.","pos":[8567,8686],"source":" For example, a domain administrator connecting to a domain controller because the domain controller is \nhighly trusted."},{"pos":[8688,8907],"content":"For more information about security concerns when using CredSSP for PowerShell Remoting, see <bpt id=\"p1\">[</bpt>Accidental Sabotage: Beware of CredSSP<ept id=\"p1\">](http://www.powershellmagazine.com/2014/03/06/accidental-sabotage-beware-of-credssp)</ept>.","source":"For more information about security concerns when using CredSSP for PowerShell Remoting, see \n[Accidental Sabotage: Beware of CredSSP](http://www.powershellmagazine.com/2014/03/06/accidental-sabotage-beware-of-credssp)."},{"pos":[8909,9098],"content":"For more information about credential theft attacks, see <bpt id=\"p1\">[</bpt>Mitigating Pass-the-Hash (PtH) Attacks and Other Credential Theft<ept id=\"p1\">](https://www.microsoft.com/en-us/download/details.aspx?id=36036)</ept>.","source":"For more information about credential theft attacks, see [Mitigating Pass-the-Hash (PtH) Attacks and Other Credential Theft](https://www.microsoft.com/en-us/download/details.aspx?id=36036)."}],"content":"---\ntitle:  WinRMSecurityRedirect\nms.date:  2016-05-11\nkeywords:  powershell,cmdlet\ndescription:  \nms.topic:  article\nauthor:  eslesar\nmanager:  dongill\nms.prod:  powershell\nredirect_url: https://msdn.microsoft.com/powershell/scripting/setup/winrmsecurity\n---\n\n# PowerShell Remoting Security Considerations\n\nPowerShell Remoting is the recommended way to manage Windows systems. PowerShell Remoting is enabled by default in Windows Server 2012 R2. This document covers security concerns, \nrecommendations, and best practices when using PowerShell Remoting.\n\n## What is PowerShell Remoting?\n\nPowerShell Remoting uses [Windows Remote Management (WinRM)](https://msdn.microsoft.com/en-us/library/windows/desktop/aa384426.aspx), which is the Microsoft implementation of the\n[Web Services for Managment (WS-Managment)](http://www.dmtf.org/sites/default/files/standards/documents/DSP0226_1.2.0.pdf) protocol, to allow users to run PowerShell commands on remote\ncomputers. You can find more information about using PowerShell Remoting at [Running Remote Commands](https://technet.microsoft.com/en-us/library/dd819505.aspx).\n\nPowerShell Remoting is not the same as using the **ComputerName** parameter of a cmdlet to run it on a remote computer, which uses Remote Procedure Call (RPC)\nas its underlying protocol.\n\n##  PowerShell Remoting default settings\n\nPowerShell Remoting (and WinRM) listen on the following ports:\n\n- HTTP: 5985\n- HTTPS: 5986\n\nBy default, PowerShell Remoting only allows connections from members of the Administrators group. Sessions are launched under the user's context, so all operating\nsystem access controls applied to individual users and groups continue to apply to them while connected over PowerShell Remoting.\n\nOn private networks, the default Windows Firewall rule for PowerShell Remoting accepts all connections. On public networks, the default Windows Firewall rule allows PowerShell\nRemoting connections only from within the same subnet. You have to explicitly change that rule to open PowerShell Remoting to all connections on a public network.\n\n>**Warning:** The firewall rule for public networks is meant to protect the computer from potentially malicious external connection attempts. Use caution when removing \n>this rule.\n\n## Process isolation\n\nPowerShell Remoting uses [Windows Remote Management (WinRM)](https://msdn.microsoft.com/en-us/library/windows/desktop/aa384426) for communication between computers. \nWinRM runs as a service under the Network Service account, and spawns isolated processes running as user accounts to host PowerShell instances. An instance of PowerShell running as one\nuser has no access to a process running an instance of PowerShell as another user.\n\n## Event logs generated by PowerShell Remoting\n\nFireEye has provided a good summary of the event logs and other security evidence generated by PowerShell Remoting sessions, available at  \n[Investigating PowerShell Attacks](https://www.fireeye.com/content/dam/fireeye-www/global/en/solutions/pdfs/wp-lazanciyan-investigating-powershell-attacks.pdf).\n\n## Encryption and transport protocols\n\nIt is helpful to consider the security of a PowerShell Remoting connection from two perspectives: initial authentication, and ongoing communication. \n\nRegardless of the transport protocol used (HTTP or HTTPS), PowerShell Remoting always encrypts all communication after initial authentication with a per-session AES-256 symmetric key.\n    \n### Initial authentication\n\nAuthentication confirms the identity of the client to the server - and ideally - the server to the client.\n    \nWhen a client connects to a domain server using its computer name (i.e.: server01, or server01.contoso.com), the default authentication protocol is \n[Kerberos](https://msdn.microsoft.com/en-us/library/windows/desktop/aa378747.aspx).\nKerberos guarantees both the user identity and server identity without sending any sort of reusable credential.\n\nWhen a client connects to a domain server using its IP address, or connects to a workgroup server, Kerberos authentication is not possible. In that case, PowerShell\nRemoting relies on the [NTLM authentication protocol](https://msdn.microsoft.com/en-us/library/windows/desktop/aa378749.aspx). The NTLM authentication\nprotocol guarantees the user identity without sending any sort of delegable credential. To prove user identity, the NTLM protocol requires that both the client\nand server compute a session key from the user's password without ever exchanging the password itself. The server typically does not know the user's password, so it communicates with \nthe domain controller, which does know the user's password and calculates the session key for the server. \n      \nThe NTLM protocol does not, however, guarantee server identity. As with all protocols that use NTLM for authentication, an attacker with access to a domain-joined computer's machine\naccount could invoke the domain controller to compute an NTLM session-key and thereby impersonate the server.\n\nNTLM-based authentication is disabled by default, but may be permitted by either configuring SSL on the target server, or by configuring the WinRM TrustedHosts setting.\n    \n#### Using SSL certificates to validate server identity during NTLM-based connections\n\nSince the NTLM authentication protocol cannot ensure the identity of the target server (only that it already knows your password), you can configure target servers\nto use SSL for PowerShell Remoting. Assigning a SSL certificate to the target server (if issued by a Certificate Authority that the client also trusts) enables\nNTLM-based authentication that guarantees both the user identity and server identity.\n    \n#### Ignoring NTLM-based server identity errors\n      \nIf deploying a SSL certificate to a server for NTLM connections is infeasible, you may suppress the resulting identity errors by adding the server to the WinRM\n**TrustedHosts** list. Please note that adding a server name to the TrustedHosts list should not be considered as any form of statement of the trustworthiness of\nthe hosts themselves - as the NTLM authentication protocol cannot guarantee that you are in fact connecting to the host you are intending to connect to.\nInstead, you should consider the TrustedHosts setting to be the list of hosts for which you wish to suppress the error generated by being unable to verify the server's identity.\n    \n    \n### Ongoing Communication\n\nOnce initial authentication is complete, the [PowerShell Remoting Protocol](https://msdn.microsoft.com/en-us/library/dd357801.aspx) encrypts all ongoing communication\nwith a per-session AES-256 symmetric key.  \n\n\n## Making the second hop\n\nBy default, PowerShell Remoting uses Kerberos (if available) or NTLM for authentication. Both of these protocols authenticate to the remote machine without sending credentials to it.\nThis is the most secure way to authenticate, but because the remote machine does not have the user's credentials, it cannot access other computers and services on the user's behalf. \nThis is known as the \"Double-Hop\" problem.\n\nThere are several ways to avoid this problem:\n\n### Kerberos Constrained Delegation\n\nFor highly trusted servers, you can enable [Kerberos Constrained Delegation](https://technet.microsoft.com/en-us/library/cc995228.aspx). This allows the remote server to impersonate the\nauthenticated user to a specified list of computers and services.\n\n### Trust between remote computers\n\nIf you trust users connected remotely to *Server1* to resources on *Server2*, you can explicitly grant *Server1* access to those resources.\n\n### Use explicit credentials when accessing remote resources\n\nYou can explicitly pass your credentials to a remote resource by using the **Credential** parameter of a cmdlet. For example:\n\n```powershell\n$myCredential = Get-Credential\nNew-PSDrive -Name Tools \\\\Server2\\Shared\\Tools -Credential $myCredential \n```\n\n### CredSSP\n\nYou can use the [Credential Security Support Provider (CredSSP)](https://msdn.microsoft.com/en-us/library/windows/desktop/bb931352.aspx) for authentication (by specifying \"CredSSP\" as the \nvalue of the `Authentication` parameter of a call to the [New-PSSession](https://technet.microsoft.com/en-us/library/hh849717.aspx) cmdlet. CredSSP passes credentials in plain text to the server,\nso using it opens you up to credential theft attacks. If the remote computer is compromised, the attacker has access to the user's credentials. CredSSP is disabled by default on both client and \nserver computers. You should enable CredSSP only in the most trusted environments. For example, a domain administrator connecting to a domain controller because the domain controller is \nhighly trusted.\n\nFor more information about security concerns when using CredSSP for PowerShell Remoting, see \n[Accidental Sabotage: Beware of CredSSP](http://www.powershellmagazine.com/2014/03/06/accidental-sabotage-beware-of-credssp).\n\nFor more information about credential theft attacks, see [Mitigating Pass-the-Hash (PtH) Attacks and Other Credential Theft](https://www.microsoft.com/en-us/download/details.aspx?id=36036).\n\n\n\n\n\n\n\n\n"}