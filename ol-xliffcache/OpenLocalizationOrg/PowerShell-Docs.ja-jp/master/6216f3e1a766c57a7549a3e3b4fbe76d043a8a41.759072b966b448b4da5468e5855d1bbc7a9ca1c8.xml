{"nodes":[{"pos":[12,44],"content":"Using Variables to Store Objects","needQuote":true,"nodes":[{"content":"Using Variables to Store Objects","pos":[0,32]}]},{"pos":[77,94],"content":"powershell,cmdlet","needQuote":true,"nodes":[{"content":"powershell,cmdlet","pos":[0,17]}]},{"content":"Using Variables to Store Objects","pos":[242,274]},{"content":"Windows PowerShell works with objects.","pos":[275,313]},{"content":"Windows PowerShell lets you create variables - essentially named objects - to preserve output to use later.","pos":[314,421]},{"content":"If you are used to working with variables in other shells, remember that Windows PowerShell variables are objects, not text.","pos":[422,546]},{"content":"Variables are always specified with the initial character $, and can include any alphanumeric characters or the underscore in their names.","pos":[548,686]},{"content":"Creating a Variable","pos":[692,711]},{"content":"You can create a variable by typing a valid variable name:","pos":[712,770]},{"content":"This returns no result because <bpt id=\"p1\">**</bpt>$loc<ept id=\"p1\">**</ept> does not have a value.","pos":[794,856],"source":"This returns no result because **$loc** does not have a value."},{"content":"You can create a variable and assign it a value in the same step.","pos":[857,922]},{"content":"Windows PowerShell only creates the variable if it does not exist; otherwise, it assigns the specified value to the existing variable.","pos":[923,1057]},{"content":"To store your current location in the variable <bpt id=\"p1\">**</bpt>$loc<ept id=\"p1\">**</ept>, type:","pos":[1058,1120],"source":" To store your current location in the variable **$loc**, type:"},{"content":"There is no output displayed when you type this command because the output is sent to $loc.","pos":[1151,1242]},{"content":"In Windows PowerShell, displayed output is a side effect of the fact that data which is not otherwise directed always gets sent to the screen.","pos":[1243,1385]},{"content":"Typing $loc will show your current location:","pos":[1386,1430]},{"content":"You can use <bpt id=\"p1\">**</bpt>Get-Member<ept id=\"p1\">**</ept> to display information about the contents of variables.","pos":[1469,1551],"source":"You can use **Get-Member** to display information about the contents of variables."},{"content":"Piping $loc to Get-Member will show you that it is a <bpt id=\"p1\">**</bpt>PathInfo<ept id=\"p1\">**</ept> object, just like the output from Get-Location:","pos":[1552,1665],"source":" Piping $loc to Get-Member will show you that it is a **PathInfo** object, just like the output from Get-Location:"},{"content":"Manipulating Variables","pos":[2112,2134]},{"content":"Windows PowerShell provides several commands to manipulate variables.","pos":[2135,2204]},{"content":"You can see a complete listing in a readable form by typing:","pos":[2205,2265]},{"content":"In addition to the variables you create in your current Windows PowerShell session, there are several system-defined variables.","pos":[2360,2487]},{"content":"You can use the <bpt id=\"p1\">**</bpt>Remove-Variable<ept id=\"p1\">**</ept> cmdlet to clear out all of the variables which are not controlled by Windows PowerShell.","pos":[2488,2612],"source":" You can use the **Remove-Variable** cmdlet to clear out all of the variables which are not controlled by Windows PowerShell."},{"content":"Type the following command to clear all variables:","pos":[2613,2663]},{"content":"This will produce the confirmation prompt you see below.","pos":[2735,2791]},{"content":"If you then run the <bpt id=\"p1\">**</bpt>Get-Variable<ept id=\"p1\">**</ept> cmdlet, you will see the remaining Windows PowerShell variables.","pos":[3009,3110],"source":"If you then run the **Get-Variable** cmdlet, you will see the remaining Windows PowerShell variables."},{"content":"Since there is also a variable Windows PowerShell drive, you can also display all Windows PowerShell variables by typing:","pos":[3111,3232]},{"content":"Using Cmd.exe Variables","pos":[3271,3294]},{"content":"Although Windows PowerShell is not Cmd.exe, it runs in a command shell environment and can use the same variables available in any environment in Windows.","pos":[3295,3449]},{"content":"These variables are exposed through a drive named <bpt id=\"p1\">**</bpt>env<ept id=\"p1\">**</ept>:.","pos":[3450,3509],"source":" These variables are exposed through a drive named **env**:."},{"content":"You can view these variables by typing:","pos":[3510,3549]},{"content":"Although the standard variable cmdlets are not designed to work with <bpt id=\"p1\">**</bpt>env:<ept id=\"p1\">**</ept> variables, you can still use them by specifying the <bpt id=\"p2\">**</bpt>env:<ept id=\"p2\">**</ept> prefix.","pos":[3579,3725],"source":"Although the standard variable cmdlets are not designed to work with **env:** variables, you can still use them by specifying the **env:** prefix."},{"content":"For example, to see the operating system root directory, you can use the command-shell <bpt id=\"p1\">**</bpt>%SystemRoot%<ept id=\"p1\">**</ept> variable from within Windows PowerShell by typing:","pos":[3726,3880],"source":" For example, to see the operating system root directory, you can use the command-shell **%SystemRoot%** variable from within Windows PowerShell by typing:"},{"content":"You can also create and modify environment variables from within Windows PowerShell.","pos":[3922,4006]},{"content":"Environment variables accessed from Windows PowerShell conform to the normal rules for environment variables elsewhere in Windows.","pos":[4007,4137]}],"content":"---\ntitle:  Using Variables to Store Objects\nms.date:  2016-05-11\nkeywords:  powershell,cmdlet\ndescription:  \nms.topic:  article\nauthor:  jpjofre\nmanager:  dongill\nms.prod:  powershell\nms.assetid:  b1688d73-c173-491e-9ba6-6d0c1cc852de\n---\n\n# Using Variables to Store Objects\nWindows PowerShell works with objects. Windows PowerShell lets you create variables - essentially named objects - to preserve output to use later. If you are used to working with variables in other shells, remember that Windows PowerShell variables are objects, not text.\n\nVariables are always specified with the initial character $, and can include any alphanumeric characters or the underscore in their names.\n\n### Creating a Variable\nYou can create a variable by typing a valid variable name:\n\n```\nPS> $loc\nPS>\n```\n\nThis returns no result because **$loc** does not have a value. You can create a variable and assign it a value in the same step. Windows PowerShell only creates the variable if it does not exist; otherwise, it assigns the specified value to the existing variable. To store your current location in the variable **$loc**, type:\n\n```\n$loc = Get-Location\n```\n\nThere is no output displayed when you type this command because the output is sent to $loc. In Windows PowerShell, displayed output is a side effect of the fact that data which is not otherwise directed always gets sent to the screen. Typing $loc will show your current location:\n\n```\nPS> $loc\n\nPath\n----\nC:\\temp\n```\n\nYou can use **Get-Member** to display information about the contents of variables. Piping $loc to Get-Member will show you that it is a **PathInfo** object, just like the output from Get-Location:\n\n```\nPS> $loc | Get-Member -MemberType Property\n\n   TypeName: System.Management.Automation.PathInfo\n\nName         MemberType Definition\n----         ---------- ----------\nDrive        Property   System.Management.Automation.PSDriveInfo Drive {get;}\nPath         Property   System.String Path {get;}\nProvider     Property   System.Management.Automation.ProviderInfo Provider {...\nProviderPath Property   System.String ProviderPath {get;}\n```\n\n### Manipulating Variables\nWindows PowerShell provides several commands to manipulate variables. You can see a complete listing in a readable form by typing:\n\n```\nGet-Command -Noun Variable | Format-Table -Property Name,Definition -AutoSize -Wrap\n```\n\nIn addition to the variables you create in your current Windows PowerShell session, there are several system-defined variables. You can use the **Remove-Variable** cmdlet to clear out all of the variables which are not controlled by Windows PowerShell. Type the following command to clear all variables:\n\n```\nRemove-Variable -Name * -Force -ErrorAction SilentlyContinue\n```\n\nThis will produce the confirmation prompt you see below.\n\n```\nConfirm\nAre you sure you want to perform this action?\nPerforming operation \"Remove Variable\" on Target \"Name: Error\".\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help\n(default is \"Y\"):A\n```\n\nIf you then run the **Get-Variable** cmdlet, you will see the remaining Windows PowerShell variables. Since there is also a variable Windows PowerShell drive, you can also display all Windows PowerShell variables by typing:\n\n```\nGet-ChildItem variable:\n```\n\n### Using Cmd.exe Variables\nAlthough Windows PowerShell is not Cmd.exe, it runs in a command shell environment and can use the same variables available in any environment in Windows. These variables are exposed through a drive named **env**:. You can view these variables by typing:\n\n```\nGet-ChildItem env:\n```\n\nAlthough the standard variable cmdlets are not designed to work with **env:** variables, you can still use them by specifying the **env:** prefix. For example, to see the operating system root directory, you can use the command-shell **%SystemRoot%** variable from within Windows PowerShell by typing:\n\n```\nPS> $env:SystemRoot\nC:\\WINDOWS\n```\n\nYou can also create and modify environment variables from within Windows PowerShell. Environment variables accessed from Windows PowerShell conform to the normal rules for environment variables elsewhere in Windows.\n\n"}