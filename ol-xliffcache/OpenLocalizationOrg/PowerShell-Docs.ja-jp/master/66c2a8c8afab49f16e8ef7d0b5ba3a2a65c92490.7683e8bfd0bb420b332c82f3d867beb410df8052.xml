{"nodes":[{"pos":[12,29],"content":"Managing Services","needQuote":true,"nodes":[{"content":"Managing Services","pos":[0,17]}]},{"pos":[62,79],"content":"powershell,cmdlet","needQuote":true,"nodes":[{"content":"powershell,cmdlet","pos":[0,17]}]},{"content":"Managing Services","pos":[227,244]},{"content":"There are eight core Service cmdlets, designed for a wide range of service tasks .","pos":[245,327]},{"content":"We will look only at listing and changing running state for services, but you can get a list Service cmdlets by using <bpt id=\"p1\">**</bpt>Get-Help \\&amp;#42;-Service<ept id=\"p1\">**</ept>, and you can find information about each Service cmdlet by using <bpt id=\"p2\">**</bpt>Get-Help&lt;Cmdlet-Name&gt;<ept id=\"p2\">**</ept>, such as <bpt id=\"p3\">**</bpt>Get-Help New-Service<ept id=\"p3\">**</ept>.","pos":[328,599],"source":" We will look only at listing and changing running state for services, but you can get a list Service cmdlets by using **Get-Help \\&#42;-Service**, and you can find information about each Service cmdlet by using **Get-Help<Cmdlet-Name>**, such as **Get-Help New-Service**."},{"content":"Getting Services","pos":[604,620]},{"content":"You can get the services on a local or remote computer by using the <bpt id=\"p1\">**</bpt>Get-Service<ept id=\"p1\">**</ept> cmdlet.","pos":[621,712],"source":"You can get the services on a local or remote computer by using the **Get-Service** cmdlet."},{"content":"As with <bpt id=\"p1\">**</bpt>Get-Process<ept id=\"p1\">**</ept>, using the <bpt id=\"p2\">**</bpt>Get-Service<ept id=\"p2\">**</ept> command without parameters returns all services.","pos":[713,812],"source":" As with **Get-Process**, using the **Get-Service** command without parameters returns all services."},{"content":"You can filter by name, even using an asterisk as a wildcard:","pos":[813,874]},{"content":"Because it is not always obvious what the real name for the service is, you may find you need to find services by display name.","pos":[1130,1257]},{"content":"You can do this by specific name, using wildcards, or using a list of display names:","pos":[1258,1342]},{"content":"You can use the ComputerName parameter of the Get-Service cmdlet to get the services on remote computers.","pos":[1889,1994]},{"content":"The ComputerName parameter accepts multiple values and wildcard characters, so you can get the services on multiple computers with a single command.","pos":[1995,2143]},{"content":"For example, the following command gets the services on the Server01 remote computer.","pos":[2144,2229]},{"content":"Getting Required and Dependent Services","pos":[2278,2317]},{"content":"The Get-Service cmdlet has two parameters that are very useful in service administration.","pos":[2318,2407]},{"content":"The DependentServices parameter gets services that depend on the service.","pos":[2408,2481]},{"content":"The RequiredServices parameter gets services upon which this service depends.","pos":[2482,2559]},{"content":"These parameters just display the values of the DependentServices and ServicesDependedOn (alias=RequiredServices) properties of the System.ServiceProcess.ServiceController object that Get-Service returns, but they simplify commands and make getting this information much simpler.","pos":[2561,2840]},{"content":"The following command gets the services that the LanmanWorkstation service requires.","pos":[2842,2926]},{"content":"The following command gets the services that require the LanmanWorkstation service.","pos":[3272,3355]},{"content":"You can even get all services that have dependencies.","pos":[3714,3767]},{"content":"The following command does just that, and then it uses the Format-Table cmdlet to display the Status, Name, RequiredServices and DependentServices properties of the services on the computer.","pos":[3768,3958]},{"content":"Stopping, Starting, Suspending, and Restarting Services","pos":[4128,4183]},{"content":"The Service cmdlets all have the same general form.","pos":[4184,4235]},{"content":"Services can be specified by common name or display name, and take lists and wildcards as values.","pos":[4236,4333]},{"content":"To stop the print spooler, use:","pos":[4334,4365]},{"content":"To start the print spooler after it is stopped, use:","pos":[4403,4455]},{"content":"To suspend the print spooler, use:","pos":[4494,4528]},{"content":"The <bpt id=\"p1\">**</bpt>Restart-Service<ept id=\"p1\">**</ept> cmdlet works in the same manner as the other Service cmdlets, but we will show some more complex examples for it.","pos":[4569,4706],"source":"The **Restart-Service** cmdlet works in the same manner as the other Service cmdlets, but we will show some more complex examples for it."},{"content":"In the simplest use, you specify the name of the service:","pos":[4707,4764]},{"content":"You will notice that you get a repeated warning message about the Print Spooler starting up.","pos":[4967,5059]},{"content":"When you perform a service operation that takes some time, Windows PowerShell will notify you that it is still attempting to perform the task.","pos":[5060,5202]},{"content":"If you want to restart multiple services, you can get a list of services, filter them, and then perform the restart:","pos":[5204,5320]},{"content":"These Service cmdlets do not have a ComputerName parameter, but you can run them on a remote computer by using the Invoke-Command cmdlet.","pos":[5975,6112]},{"content":"For example, the following command restarts the Spooler service on the Server01 remote computer.","pos":[6113,6209]},{"content":"Setting Service Properties","pos":[6287,6313]},{"content":"The Set-Service cmdlet changes the properties of a service on a local or remote computer.","pos":[6314,6403]},{"content":"Because the service status is a property, you can use this cmdlet to start, stop, and suspend a service.","pos":[6404,6508]},{"content":"The Set-Service cmdlet also has a StartupType parameter that lets you change the service startup type.","pos":[6509,6611]},{"content":"To use Set-Service on Windows Vista and later versions of Windows, open Windows PowerShell with the \"Run as administrator\" option.","pos":[6613,6743]},{"pos":[6745,6871],"content":"For more information, see <bpt id=\"p1\">[</bpt>Set-Service [m2]<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/b71e29ed-372b-4e32-a4b7-5eb6216e56c3)</ept>","source":"For more information, see [Set-Service [m2]](https://technet.microsoft.com/en-us/library/b71e29ed-372b-4e32-a4b7-5eb6216e56c3)"},{"content":"See Also","pos":[6876,6884]},{"pos":[6885,7296],"content":"<bpt id=\"p1\">[</bpt>Get-Service [m2]<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/0a09cb22-0a1c-4a79-9851-4e53075f9cf6)</ept><ph id=\"ph1\">\n</ph><bpt id=\"p2\">[</bpt>Set-Service [m2]<ept id=\"p2\">](https://technet.microsoft.com/en-us/library/b71e29ed-372b-4e32-a4b7-5eb6216e56c3)</ept><ph id=\"ph2\">\n</ph><bpt id=\"p3\">[</bpt>Restart-Service [m2]<ept id=\"p3\">](https://technet.microsoft.com/en-us/library/45acf50d-2277-4523-baf7-ce7ced977d0f)</ept><ph id=\"ph3\">\n</ph><bpt id=\"p4\">[</bpt>Suspend-Service [m2]<ept id=\"p4\">](https://technet.microsoft.com/en-us/library/c8492b87-0e21-4faf-8054-3c83c2ec2826)</ept>","source":"[Get-Service [m2]](https://technet.microsoft.com/en-us/library/0a09cb22-0a1c-4a79-9851-4e53075f9cf6)\n[Set-Service [m2]](https://technet.microsoft.com/en-us/library/b71e29ed-372b-4e32-a4b7-5eb6216e56c3)\n[Restart-Service [m2]](https://technet.microsoft.com/en-us/library/45acf50d-2277-4523-baf7-ce7ced977d0f)\n[Suspend-Service [m2]](https://technet.microsoft.com/en-us/library/c8492b87-0e21-4faf-8054-3c83c2ec2826)"}],"content":"---\ntitle:  Managing Services\nms.date:  2016-05-11\nkeywords:  powershell,cmdlet\ndescription:  \nms.topic:  article\nauthor:  jpjofre\nmanager:  dongill\nms.prod:  powershell\nms.assetid:  7a410e4d-514b-4813-ba0c-0d8cef88df31\n---\n\n# Managing Services\nThere are eight core Service cmdlets, designed for a wide range of service tasks . We will look only at listing and changing running state for services, but you can get a list Service cmdlets by using **Get-Help \\&#42;-Service**, and you can find information about each Service cmdlet by using **Get-Help<Cmdlet-Name>**, such as **Get-Help New-Service**.\n\n## Getting Services\nYou can get the services on a local or remote computer by using the **Get-Service** cmdlet. As with **Get-Process**, using the **Get-Service** command without parameters returns all services. You can filter by name, even using an asterisk as a wildcard:\n\n```\nPS> Get-Service -Name se*\nStatus   Name               DisplayName\n------   ----               -----------\nRunning  seclogon           Secondary Logon\nRunning  SENS               System Event Notification\nStopped  ServiceLayer       ServiceLayer\n```\n\nBecause it is not always obvious what the real name for the service is, you may find you need to find services by display name. You can do this by specific name, using wildcards, or using a list of display names:\n\n```\nPS> Get-Service -DisplayName se*\nStatus   Name               DisplayName\n------   ----               -----------\nRunning  lanmanserver       Server\nRunning  SamSs              Security Accounts Manager\nRunning  seclogon           Secondary Logon\nStopped  ServiceLayer       ServiceLayer\nRunning  wscsvc             Security Center\nPS> Get-Service -DisplayName ServiceLayer,Server\nStatus   Name               DisplayName\n------   ----               -----------\nRunning  lanmanserver       Server\nStopped  ServiceLayer       ServiceLayer\n```\n\nYou can use the ComputerName parameter of the Get-Service cmdlet to get the services on remote computers. The ComputerName parameter accepts multiple values and wildcard characters, so you can get the services on multiple computers with a single command. For example, the following command gets the services on the Server01 remote computer.\n\n```\nGet-Service -ComputerName Server01\n```\n\n## Getting Required and Dependent Services\nThe Get-Service cmdlet has two parameters that are very useful in service administration. The DependentServices parameter gets services that depend on the service. The RequiredServices parameter gets services upon which this service depends.\n\nThese parameters just display the values of the DependentServices and ServicesDependedOn (alias=RequiredServices) properties of the System.ServiceProcess.ServiceController object that Get-Service returns, but they simplify commands and make getting this information much simpler.\n\nThe following command gets the services that the LanmanWorkstation service requires.\n\n```\nPS> Get-Service -Name LanmanWorkstation -RequiredServices\nStatus   Name               DisplayName\n------   ----               -----------\nRunning  MRxSmb20           SMB 2.0 MiniRedirector\nRunning  bowser             Bowser\nRunning  MRxSmb10           SMB 1.x MiniRedirector\nRunning  NSI                Network Store Interface Service\n```\n\nThe following command gets the services that require the LanmanWorkstation service.\n\n```\nPS> Get-Service -Name LanmanWorkstation -DependentServices\nStatus   Name               DisplayName\n------   ----               -----------\nRunning  SessionEnv         Terminal Services Configuration\nRunning  Netlogon           Netlogon\nStopped  Browser            Computer Browser\nRunning  BITS               Background Intelligent Transfer Ser...\n```\n\nYou can even get all services that have dependencies. The following command does just that, and then it uses the Format-Table cmdlet to display the Status, Name, RequiredServices and DependentServices properties of the services on the computer.\n\n```\nGet-Service -Name * | where {$_.RequiredServices -or $_.DependentServices} | Format-Table -Property Status, Name, RequiredServices, DependentServices -auto\n```\n\n## Stopping, Starting, Suspending, and Restarting Services\nThe Service cmdlets all have the same general form. Services can be specified by common name or display name, and take lists and wildcards as values. To stop the print spooler, use:\n\n```\nStop-Service -Name spooler\n```\n\nTo start the print spooler after it is stopped, use:\n\n```\nStart-Service -Name spooler\n```\n\nTo suspend the print spooler, use:\n\n```\nSuspend-Service -Name spooler\n```\n\nThe **Restart-Service** cmdlet works in the same manner as the other Service cmdlets, but we will show some more complex examples for it. In the simplest use, you specify the name of the service:\n\n```\nPS> Restart-Service -Name spooler\nWARNING: Waiting for service 'Print Spooler (Spooler)' to finish starting...\nWARNING: Waiting for service 'Print Spooler (Spooler)' to finish starting...\nPS>\n```\n\nYou will notice that you get a repeated warning message about the Print Spooler starting up. When you perform a service operation that takes some time, Windows PowerShell will notify you that it is still attempting to perform the task.\n\nIf you want to restart multiple services, you can get a list of services, filter them, and then perform the restart:\n\n```\nPS> Get-Service | Where-Object -FilterScript {$_.CanStop} | Restart-Service\nWARNING: Waiting for service 'Computer Browser (Browser)' to finish stopping...\nWARNING: Waiting for service 'Computer Browser (Browser)' to finish stopping...\nRestart-Service : Cannot stop service 'Logical Disk Manager (dmserver)' because\n it has dependent services. It can only be stopped if the Force flag is set.\nAt line:1 char:57\n+ Get-Service | Where-Object -FilterScript {$_.CanStop} | Restart-Service <<<<\nWARNING: Waiting for service 'Print Spooler (Spooler)' to finish starting...\nWARNING: Waiting for service 'Print Spooler (Spooler)' to finish starting...\n```\n\nThese Service cmdlets do not have a ComputerName parameter, but you can run them on a remote computer by using the Invoke-Command cmdlet. For example, the following command restarts the Spooler service on the Server01 remote computer.\n\n```\nInvoke-Command -ComputerName Server01 {Restart-Service Spooler}\n```\n\n## Setting Service Properties\nThe Set-Service cmdlet changes the properties of a service on a local or remote computer. Because the service status is a property, you can use this cmdlet to start, stop, and suspend a service. The Set-Service cmdlet also has a StartupType parameter that lets you change the service startup type.\n\nTo use Set-Service on Windows Vista and later versions of Windows, open Windows PowerShell with the \"Run as administrator\" option.\n\nFor more information, see [Set-Service [m2]](https://technet.microsoft.com/en-us/library/b71e29ed-372b-4e32-a4b7-5eb6216e56c3)\n\n## See Also\n[Get-Service [m2]](https://technet.microsoft.com/en-us/library/0a09cb22-0a1c-4a79-9851-4e53075f9cf6)\n[Set-Service [m2]](https://technet.microsoft.com/en-us/library/b71e29ed-372b-4e32-a4b7-5eb6216e56c3)\n[Restart-Service [m2]](https://technet.microsoft.com/en-us/library/45acf50d-2277-4523-baf7-ce7ced977d0f)\n[Suspend-Service [m2]](https://technet.microsoft.com/en-us/library/c8492b87-0e21-4faf-8054-3c83c2ec2826)\n\n"}