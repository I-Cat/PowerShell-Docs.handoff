{"nodes":[{"pos":[13,31],"content":"DSC Configurations","needQuote":true,"nodes":[{"content":"DSC Configurations","pos":[0,18]}]},{"pos":[64,78],"content":"powershell,DSC","needQuote":true,"nodes":[{"content":"powershell,DSC","pos":[0,14]}]},{"content":"DSC Configurations","pos":[176,194]},{"content":"Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0","pos":[197,255]},{"content":"DSC configurations are PowerShell scripts that define a special type of function.","pos":[257,338]},{"content":"To define a configuration, you use the PowerShell keyword <bpt id=\"p1\">__</bpt>Configuration<ept id=\"p1\">__</ept>.","pos":[339,416],"source":" \nTo define a configuration, you use the PowerShell keyword __Configuration__."},{"content":"Save the script as a .ps1 file.","pos":[732,763]},{"content":"Configuration syntax","pos":[768,788]},{"content":"A configuration script consists of the following parts:","pos":[790,845]},{"content":"The <bpt id=\"p1\">**</bpt>Configuration<ept id=\"p1\">**</ept> block.","pos":[849,877],"source":"The **Configuration** block."},{"content":"This is the outermost script block.","pos":[878,913]},{"content":"You define it by using the <bpt id=\"p1\">**</bpt>Configuration<ept id=\"p1\">**</ept> keyword and providing a name.","pos":[914,988],"source":" You define it by using the **Configuration** keyword and providing a name."},{"content":"In this case, the name of the configuration is \"MyDscConfiguration\".","pos":[989,1057]},{"content":"One or more <bpt id=\"p1\">**</bpt>Node<ept id=\"p1\">**</ept> blocks.","pos":[1060,1088],"source":"One or more **Node** blocks."},{"content":"These define the nodes (computers or VMs) that you are configuring.","pos":[1089,1156]},{"content":"In the above configuration, there is one <bpt id=\"p1\">**</bpt>Node<ept id=\"p1\">**</ept> block that targets a computer named \"TEST-PC1\".","pos":[1157,1254],"source":" In the above configuration, there is one **Node** block that targets a computer named \"TEST-PC1\"."},{"content":"One or more resource blocks.","pos":[1257,1285]},{"content":"This is where the configuration sets the properties for the resources that it is configuring.","pos":[1286,1379]},{"content":"In this case, there are two resource blocks, each of which call the \"WindowsFeature\" resource.","pos":[1380,1474]},{"content":"Within a <bpt id=\"p1\">**</bpt>Configuration<ept id=\"p1\">**</ept> block, you can do anything that you normally could in a PowerShell function.","pos":[1476,1579],"source":"Within a **Configuration** block, you can do anything that you normally could in a PowerShell function."},{"content":"For example, in the previous example, if you didn't want to hard code the name of the target computer in the configuration, you could add a parameter for the node name:","pos":[1580,1748]},{"content":"In this example, you specify the name of the node by passing it as the $ComputerName parameter when you <bpt id=\"p1\">[</bpt>compile the configuraton<ept id=\"p1\">](# Compiling the configuration)</ept>.","pos":[2128,2290],"source":"In this example, you specify the name of the node by passing it as the $ComputerName parameter when you [compile the configuraton](# Compiling the configuration)."},{"content":"The name defaults to \"localhost\".","pos":[2291,2324]},{"content":"Compiling the configuration","pos":[2329,2356]},{"content":"Before you can enact a configuration, you have to compile it into a MOF document.","pos":[2357,2438]},{"content":"You do this by calling the configuration like you would a PowerShell function.","pos":[2439,2517]},{"content":"<bpt id=\"p1\">__</bpt>Note:<ept id=\"p1\">__</ept> To call a configuration, the function must be in global scope (as with any other PowerShell function).","pos":[2519,2631],"source":"__Note:__ To call a configuration, the function must be in global scope (as with any other PowerShell function)."},{"content":"You can make this happen either by \"dot-sourcing\" the script, or by running the configuration script by using F5 or clicking on the <bpt id=\"p1\">__</bpt>Run Script<ept id=\"p1\">__</ept> button in the ISE.","pos":[2632,2797],"source":" You can make this happen either by \"dot-sourcing\" the script, or by running the configuration script by using F5 or clicking on the __Run Script__ button in the ISE."},{"content":"To dot-source the script, run the command <ph id=\"ph1\">`. .\\myConfig.ps1`</ph> where <ph id=\"ph2\">`myConfig.ps1`</ph> is the name of the script file that contains your configuration.","pos":[2798,2944],"source":" To dot-source the script, run the command `. .\\myConfig.ps1` where `myConfig.ps1` is the name of the script file that contains your configuration."},{"content":"When you call the configuration, it:","pos":[2946,2982]},{"content":"Resolves all variables","pos":[2986,3008]},{"content":"Creates a folder in the current directory with the same name as the configuration.","pos":[3012,3094]},{"content":"Creates a file named <bpt id=\"p1\">_</bpt>NodeName<ept id=\"p1\">_</ept>.mof in the new directory, where <bpt id=\"p2\">_</bpt>NodeName<ept id=\"p2\">_</ept> is the name of the target node of the configuration.","pos":[3097,3224],"source":"Creates a file named _NodeName_.mof in the new directory, where _NodeName_ is the name of the target node of the configuration."},{"content":"If there are more than one nodes, a MOF file will be created for each node.","pos":[3225,3300]},{"content":"<bpt id=\"p1\">__</bpt>Note<ept id=\"p1\">__</ept>: The MOF file contains all of the configuration information for the target node.","pos":[3303,3392],"source":"__Note__: The MOF file contains all of the configuration information for the target node."},{"content":"Because of this, itâ€™s important to keep it secure.","pos":[3393,3443]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Securing the MOF file<ept id=\"p1\">](secureMOF.md)</ept>.","pos":[3444,3508],"source":" For more information, see [Securing the MOF file](secureMOF.md)."},{"content":"Compiling the first configuration above results in the following folder structure:","pos":[3510,3592]},{"content":"If the configuration takes a parameter, as in the second example, that has to be provided at compile time.","pos":[4194,4300]},{"content":"Here's how that would look:","pos":[4301,4328]},{"content":"Using DependsOn","pos":[4966,4981]},{"content":"A useful DSC keyword is <bpt id=\"p1\">__</bpt>DependsOn<ept id=\"p1\">__</ept>.","pos":[4982,5020],"source":"A useful DSC keyword is __DependsOn__."},{"content":"Typically (though not necessarily always), DSC applies the resources in the order that they appear within the configuration.","pos":[5021,5145]},{"content":"However, <bpt id=\"p1\">__</bpt>DependsOn<ept id=\"p1\">__</ept> specifies which resources depend on other resources, and the LCM ensures that they are applied in the correct order, regardless of the order in which resource instances are defined.","pos":[5146,5350],"source":" However, __DependsOn__ specifies which resources depend on other resources, and the LCM ensures that they are applied in the correct order, regardless of the order in which resource instances are defined."},{"content":"For example, a configuration might specify that an instance of the <bpt id=\"p1\">__</bpt>User<ept id=\"p1\">__</ept> resource depends on the existence of a <bpt id=\"p2\">__</bpt>Group<ept id=\"p2\">__</ept> instance:","pos":[5351,5485],"source":" For example, a configuration might specify that an instance of the __User__ resource depends on the existence of a __Group__ instance:"},{"content":"Using New Resources in Your Configuration","pos":[5859,5900]},{"content":"If you ran the previous examples, you might have noticed that you were warned that you were using a resource without explicitly importing it.","pos":[5901,6042]},{"content":"Today, DSC ships with 12 resources as part of the PSDesiredStateConfiguration module.","pos":[6043,6128],"source":"\nToday, DSC ships with 12 resources as part of the PSDesiredStateConfiguration module."},{"content":"Other resources in external modules must be placed in <ph id=\"ph1\">`$env:PSModulePath`</ph> in order to be recognized by the LCM.","pos":[6129,6240],"source":" Other resources in external modules must be placed in `$env:PSModulePath` in order to be recognized by the LCM."},{"content":"A new cmdlet, <bpt id=\"p1\">[</bpt>Get-DscResource<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn521625.aspx)</ept>, can be used to determine what resources are installed on the system and available for use by the LCM.","pos":[6241,6434],"source":" A new cmdlet, [Get-DscResource](https://technet.microsoft.com/en-us/library/dn521625.aspx), can be used to determine what resources are installed on the system and available for use by the LCM."},{"content":"Once these modules have been placed in <ph id=\"ph1\">`$env:PSModulePath`</ph> and are properly recognized by <bpt id=\"p1\">[</bpt>Get-DscResource<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn521625.aspx)</ept>, they still need to be loaded within your configuration.","pos":[6435,6659],"source":" \nOnce these modules have been placed in `$env:PSModulePath` and are properly recognized by [Get-DscResource](https://technet.microsoft.com/en-us/library/dn521625.aspx), they still need to be loaded within your configuration."},{"content":"<bpt id=\"p1\">__</bpt>Import-DscResource<ept id=\"p1\">__</ept> is a dynamic keyword that can only be recognized within a <bpt id=\"p2\">__</bpt>Configuration<ept id=\"p2\">__</ept> block (i.e. it is not a cmdlet).","pos":[6660,6791],"source":"__Import-DscResource__ is a dynamic keyword that can only be recognized within a __Configuration__ block (i.e. it is not a cmdlet)."},{"content":"<bpt id=\"p1\">__</bpt>Import-DscResource<ept id=\"p1\">__</ept> supports two parameters:","pos":[6792,6839],"source":"__Import-DscResource__ supports two parameters:"},{"content":"<bpt id=\"p1\">__</bpt>ModuleName<ept id=\"p1\">__</ept> is the recommended way of using <bpt id=\"p2\">__</bpt>Import-DscResource<ept id=\"p2\">__</ept>.","pos":[6842,6912],"source":"__ModuleName__ is the recommended way of using __Import-DscResource__."},{"content":"It accepts the name of the module that contains the resources to be imported (as well as a string array of module names).","pos":[6913,7034]},{"content":"<bpt id=\"p1\">__</bpt>Name<ept id=\"p1\">__</ept> is the name of the resource to import.","pos":[7038,7085],"source":"__Name__ is the name of the resource to import."},{"content":"This is not the friendly name returned as \"Name\" by <bpt id=\"p1\">[</bpt>Get-DscResource<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn521625.aspx)</ept>, but the class name used when defining the resource schema (returned as <bpt id=\"p2\">__</bpt>ResourceType<ept id=\"p2\">__</ept> by <bpt id=\"p3\">[</bpt>Get-DscResource<ept id=\"p3\">](https://technet.microsoft.com/en-us/library/dn521625.aspx)</ept>).","pos":[7086,7385],"source":" This is not the friendly name returned as \"Name\" by [Get-DscResource](https://technet.microsoft.com/en-us/library/dn521625.aspx), but the class name used when defining the resource schema (returned as __ResourceType__ by [Get-DscResource](https://technet.microsoft.com/en-us/library/dn521625.aspx))."},{"content":"See Also","pos":[7391,7399]},{"pos":[7402,7472],"content":"<bpt id=\"p1\">[</bpt>Windows PowerShell Desired State Configuration Overview<ept id=\"p1\">](overview.md)</ept>","source":"[Windows PowerShell Desired State Configuration Overview](overview.md)"},{"pos":[7475,7504],"content":"<bpt id=\"p1\">[</bpt>DSC Resources<ept id=\"p1\">](resources.md)</ept>","source":"[DSC Resources](resources.md)"},{"pos":[7507,7567],"content":"<bpt id=\"p1\">[</bpt>Configuring The Local Configuration Manager<ept id=\"p1\">](metaConfig.md)</ept>","source":"[Configuring The Local Configuration Manager](metaConfig.md)"}],"content":"---\ntitle:   DSC Configurations\nms.date:  2016-05-16\nkeywords:  powershell,DSC\ndescription:  \nms.topic:  article\nauthor:  eslesar\nmanager:  dongill\nms.prod:  powershell\n---\n\n# DSC Configurations\n\n>Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0\n\nDSC configurations are PowerShell scripts that define a special type of function. \nTo define a configuration, you use the PowerShell keyword __Configuration__.\n\n```powershell\nConfiguration MyDscConfiguration {\n\n    Node \"TEST-PC1\" {\n        WindowsFeature MyFeatureInstance {\n            Ensure = \"Present\"\n            Name =  \"RSAT\"\n        }\n        WindowsFeature My2ndFeatureInstance {\n            Ensure = \"Present\"\n            Name = \"Bitlocker\"\n        }\n    }\n}\n```\n\nSave the script as a .ps1 file.\n\n## Configuration syntax\n\nA configuration script consists of the following parts:\n\n- The **Configuration** block. This is the outermost script block. You define it by using the **Configuration** keyword and providing a name. In this case, the name of the configuration is \"MyDscConfiguration\".\n- One or more **Node** blocks. These define the nodes (computers or VMs) that you are configuring. In the above configuration, there is one **Node** block that targets a computer named \"TEST-PC1\".\n- One or more resource blocks. This is where the configuration sets the properties for the resources that it is configuring. In this case, there are two resource blocks, each of which call the \"WindowsFeature\" resource.\n\nWithin a **Configuration** block, you can do anything that you normally could in a PowerShell function. For example, in the previous example, if you didn't want to hard code the name of the target computer in the configuration, you could add a parameter for the node name:\n\n```powershell\nConfiguration MyDscConfiguration {\n\n    param(\n        [string[]]$ComputerName=\"localhost\"\n    )\n    Node $ComputerName {\n        WindowsFeature MyFeatureInstance {\n            Ensure = \"Present\"\n            Name =  \"RSAT\"\n        }\n        WindowsFeature My2ndFeatureInstance {\n            Ensure = \"Present\"\n            Name = \"Bitlocker\"\n        }\n    }\n}\n```\n\nIn this example, you specify the name of the node by passing it as the $ComputerName parameter when you [compile the configuraton](# Compiling the configuration). The name defaults to \"localhost\".\n\n## Compiling the configuration\nBefore you can enact a configuration, you have to compile it into a MOF document. You do this by calling the configuration like you would a PowerShell function.\n>__Note:__ To call a configuration, the function must be in global scope (as with any other PowerShell function). You can make this happen either by \"dot-sourcing\" the script, or by running the configuration script by using F5 or clicking on the __Run Script__ button in the ISE. To dot-source the script, run the command `. .\\myConfig.ps1` where `myConfig.ps1` is the name of the script file that contains your configuration.\n\nWhen you call the configuration, it:\n\n- Resolves all variables \n- Creates a folder in the current directory with the same name as the configuration.\n- Creates a file named _NodeName_.mof in the new directory, where _NodeName_ is the name of the target node of the configuration. If there are more than one nodes, a MOF file will be created for each node.\n\n>__Note__: The MOF file contains all of the configuration information for the target node. Because of this, itâ€™s important to keep it secure. For more information, see [Securing the MOF file](secureMOF.md).\n\nCompiling the first configuration above results in the following folder structure:\n\n```powershell\nPS C:\\users\\default\\Documents\\DSC Configurations> . .\\MyDscConfiguration.ps1\nPS C:\\users\\default\\Documents\\DSC Configurations> MyDscConfiguration\n    Directory: C:\\users\\default\\Documents\\DSC Configurations\\MyDscConfiguration\nMode                LastWriteTime         Length Name                                                                                              \n----                -------------         ------ ----                                                                                         \n-a----       10/23/2015   4:32 PM           2842 TEST-PC1.mof\n```  \n\nIf the configuration takes a parameter, as in the second example, that has to be provided at compile time. Here's how that would look:\n\n```powershell\nPS C:\\users\\default\\Documents\\DSC Configurations> . .\\MyDscConfiguration.ps1\nPS C:\\users\\default\\Documents\\DSC Configurations> MyDscConfiguration -ComputerName 'MyTestNode'\n    Directory: C:\\users\\default\\Documents\\DSC Configurations\\MyDscConfiguration\nMode                LastWriteTime         Length Name                                                                                              \n----                -------------         ------ ----                                                                                         \n-a----       10/23/2015   4:32 PM           2842 MyTestNode.mof\n```      \n\n## Using DependsOn\nA useful DSC keyword is __DependsOn__. Typically (though not necessarily always), DSC applies the resources in the order that they appear within the configuration. However, __DependsOn__ specifies which resources depend on other resources, and the LCM ensures that they are applied in the correct order, regardless of the order in which resource instances are defined. For example, a configuration might specify that an instance of the __User__ resource depends on the existence of a __Group__ instance:\n\n```powershell\nConfiguration DependsOnExample {\n    Node Test-PC1 {\n        Group GroupExample {\n            Ensure = \"Present\"\n            GroupName = \"TestGroup\"\n        }\n\n        User UserExample {\n            Ensure = \"Present\"\n            UserName = \"TestUser\"\n            FullName = \"TestUser\"\n            DependsOn = \"[Group]GroupExample\"\n        }\n    }\n}\n```\n\n## Using New Resources in Your Configuration\nIf you ran the previous examples, you might have noticed that you were warned that you were using a resource without explicitly importing it.\nToday, DSC ships with 12 resources as part of the PSDesiredStateConfiguration module. Other resources in external modules must be placed in `$env:PSModulePath` in order to be recognized by the LCM. A new cmdlet, [Get-DscResource](https://technet.microsoft.com/en-us/library/dn521625.aspx), can be used to determine what resources are installed on the system and available for use by the LCM. \nOnce these modules have been placed in `$env:PSModulePath` and are properly recognized by [Get-DscResource](https://technet.microsoft.com/en-us/library/dn521625.aspx), they still need to be loaded within your configuration. __Import-DscResource__ is a dynamic keyword that can only be recognized within a __Configuration__ block (i.e. it is not a cmdlet). __Import-DscResource__ supports two parameters:\n* __ModuleName__ is the recommended way of using __Import-DscResource__. It accepts the name of the module that contains the resources to be imported (as well as a string array of module names). \n* __Name__ is the name of the resource to import. This is not the friendly name returned as \"Name\" by [Get-DscResource](https://technet.microsoft.com/en-us/library/dn521625.aspx), but the class name used when defining the resource schema (returned as __ResourceType__ by [Get-DscResource](https://technet.microsoft.com/en-us/library/dn521625.aspx)). \n\n## See Also\n* [Windows PowerShell Desired State Configuration Overview](overview.md)\n* [DSC Resources](resources.md)\n* [Configuring The Local Configuration Manager](metaConfig.md)\n\n"}