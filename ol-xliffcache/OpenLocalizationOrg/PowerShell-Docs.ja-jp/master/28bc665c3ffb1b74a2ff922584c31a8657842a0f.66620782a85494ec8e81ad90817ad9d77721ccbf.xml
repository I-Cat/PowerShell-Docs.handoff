{"nodes":[{"pos":[12,44],"content":"Using Static Classes and Methods","needQuote":true,"nodes":[{"content":"Using Static Classes and Methods","pos":[0,32]}]},{"pos":[77,94],"content":"powershell,cmdlet","needQuote":true,"nodes":[{"content":"powershell,cmdlet","pos":[0,17]}]},{"content":"Using Static Classes and Methods","pos":[242,274]},{"content":"Not all .NET Framework classes can be created by using <bpt id=\"p1\">**</bpt>New-Object<ept id=\"p1\">**</ept>.","pos":[275,345],"source":"Not all .NET Framework classes can be created by using **New-Object**."},{"content":"For example, if you try to create a <bpt id=\"p1\">**</bpt>System.Environment<ept id=\"p1\">**</ept> or a <bpt id=\"p2\">**</bpt>System.Math<ept id=\"p2\">**</ept> object with <bpt id=\"p3\">**</bpt>New-Object<ept id=\"p3\">**</ept>, you will get the following error messages:","pos":[346,496],"source":" For example, if you try to create a **System.Environment** or a **System.Math** object with **New-Object**, you will get the following error messages:"},{"content":"These errors occur because there is no way to create a new object from these classes.","pos":[874,959]},{"content":"These classes are reference libraries of methods and properties that do not change state.","pos":[960,1049]},{"content":"You don't need to create them, you simply use them.","pos":[1050,1101]},{"content":"Classes and methods such as these are called <bpt id=\"p1\">*</bpt>static classes<ept id=\"p1\">*</ept> because they are not created, destroyed, or changed.","pos":[1102,1216],"source":" Classes and methods such as these are called *static classes* because they are not created, destroyed, or changed."},{"content":"To make this clear we will provide examples that use static classes.","pos":[1217,1285]},{"content":"Getting Environment Data with System.Environment","pos":[1291,1339]},{"content":"Usually, the first step in working with an object in Windows PowerShell is to use Get-Member to find out what members it contains.","pos":[1340,1470]},{"content":"With static classes, the process is a little different because the actual class is not an object.","pos":[1471,1568]},{"content":"Referring to the Static System.Environment Class","pos":[1575,1623]},{"content":"You can refer to a static class by surrounding the class name with square brackets.","pos":[1624,1707]},{"content":"For example, you can refer to <bpt id=\"p1\">**</bpt>System.Environment<ept id=\"p1\">**</ept> by typing the name within brackets.","pos":[1708,1796],"source":" For example, you can refer to **System.Environment** by typing the name within brackets."},{"content":"Doing so displays some generic type information:","pos":[1797,1845]},{"pos":[2093,2354],"content":"[!NOTE]\nAs we mentioned previously, Windows PowerShell automatically prepends '**System.**' to type names when you use **New-Object**. The same thing happens when using a bracketed type name, so you can specify **\\[System.Environment]** as **\\[Environment]**.","leadings":["","> "],"nodes":[{"content":"As we mentioned previously, Windows PowerShell automatically prepends '**System.**' to type names when you use **New-Object**. The same thing happens when using a bracketed type name, so you can specify **\\[System.Environment]** as **\\[Environment]**.","pos":[8,259],"nodes":[{"content":"As we mentioned previously, Windows PowerShell automatically prepends '<bpt id=\"p1\">**</bpt>System.<ept id=\"p1\">**</ept>'","pos":[0,83],"source":"As we mentioned previously, Windows PowerShell automatically prepends '**System.**'"},{"content":"to type names when you use <bpt id=\"p1\">**</bpt>New-Object<ept id=\"p1\">**</ept>.","pos":[84,126],"source":" to type names when you use **New-Object**."},{"content":"The same thing happens when using a bracketed type name, so you can specify <bpt id=\"p1\">**</bpt>\\[System.Environment]<ept id=\"p1\">**</ept> as <bpt id=\"p2\">**</bpt>\\[Environment]<ept id=\"p2\">**</ept>.","pos":[127,251],"source":" The same thing happens when using a bracketed type name, so you can specify **\\[System.Environment]** as **\\[Environment]**."}]}]},{"pos":[2356,2536],"content":"The <bpt id=\"p1\">**</bpt>System.Environment<ept id=\"p1\">**</ept> class contains general information about the working environment for the current process, which is powershell.exe when working within Windows PowerShell.","source":"The **System.Environment** class contains general information about the working environment for the current process, which is powershell.exe when working within Windows PowerShell."},{"pos":[2538,2718],"content":"If you try to view details of this class by typing <bpt id=\"p1\">**</bpt>\\[System.Environment] | Get-Member<ept id=\"p1\">**</ept>, the object type is reported as being <bpt id=\"p2\">**</bpt>System.RuntimeType<ept id=\"p2\">**</ept> , not <bpt id=\"p3\">**</bpt>System.Environment<ept id=\"p3\">**</ept>:","source":"If you try to view details of this class by typing **\\[System.Environment] | Get-Member**, the object type is reported as being **System.RuntimeType** , not **System.Environment**:"},{"pos":[2800,2873],"content":"To view static members with Get-Member, specify the <bpt id=\"p1\">**</bpt>Static<ept id=\"p1\">**</ept> parameter:","source":"To view static members with Get-Member, specify the **Static** parameter:"},{"content":"We can now select properties to view from System.Environment.","pos":[4519,4580]},{"content":"Displaying Static Properties of System.Environment","pos":[4587,4637]},{"content":"The properties of System.Environment are also static, and must be specified in a different way than normal properties.","pos":[4638,4756]},{"content":"We use <bpt id=\"p1\">**</bpt>::<ept id=\"p1\">**</ept> to indicate to Windows PowerShell that we want to work with a static method or property.","pos":[4757,4859],"source":" We use **::** to indicate to Windows PowerShell that we want to work with a static method or property."},{"content":"To see the command that was used to launch Windows PowerShell, we check the <bpt id=\"p1\">**</bpt>CommandLine<ept id=\"p1\">**</ept> property by typing:","pos":[4860,4971],"source":" To see the command that was used to launch Windows PowerShell, we check the **CommandLine** property by typing:"},{"content":"To check the operating system version, display the OSVersion property by typing:","pos":[5078,5158]},{"pos":[5435,5554],"content":"We can check whether the computer is in the process of shutting down by displaying the <bpt id=\"p1\">**</bpt>HasShutdownStarted<ept id=\"p1\">**</ept> property:","source":"We can check whether the computer is in the process of shutting down by displaying the **HasShutdownStarted** property:"},{"content":"Doing Math with System.Math","pos":[5620,5647]},{"content":"The System.Math static class is useful for performing some mathematical operations.","pos":[5648,5731]},{"content":"The important members of <bpt id=\"p1\">**</bpt>System.Math<ept id=\"p1\">**</ept> are mostly methods, which we can display by using <bpt id=\"p2\">**</bpt>Get-Member<ept id=\"p2\">**</ept>.","pos":[5732,5838],"source":" The important members of **System.Math** are mostly methods, which we can display by using **Get-Member**."},{"pos":[5842,5963],"content":"[!NOTE]\nSystem.Math has several methods with the same name, but they are distinguished by the type of their parameters.","leadings":["","> "],"nodes":[{"content":"System.Math has several methods with the same name, but they are distinguished by the type of their parameters.","pos":[8,119]}]},{"pos":[5965,6041],"content":"Type the following command to list the methods of the <bpt id=\"p1\">**</bpt>System.Math<ept id=\"p1\">**</ept> class.","source":"Type the following command to list the methods of the **System.Math** class."},{"content":"This displays several mathematical methods.","pos":[8237,8280]},{"content":"Here is a list of commands that demonstrate how some of the common methods work:","pos":[8281,8361]}],"content":"---\ntitle:  Using Static Classes and Methods\nms.date:  2016-05-11\nkeywords:  powershell,cmdlet\ndescription:  \nms.topic:  article\nauthor:  jpjofre\nmanager:  dongill\nms.prod:  powershell\nms.assetid:  418ad766-afa6-4b8c-9a44-471889af7fd9\n---\n\n# Using Static Classes and Methods\nNot all .NET Framework classes can be created by using **New-Object**. For example, if you try to create a **System.Environment** or a **System.Math** object with **New-Object**, you will get the following error messages:\n\n```\nPS> New-Object System.Environment\nNew-Object : Constructor not found. Cannot find an appropriate constructor for\ntype System.Environment.\nAt line:1 char:11\n+ New-Object  <<<< System.Environment\nPS> New-Object System.Math\nNew-Object : Constructor not found. Cannot find an appropriate constructor for\ntype System.Math.\nAt line:1 char:11\n+ New-Object  <<<< System.Math\n```\n\nThese errors occur because there is no way to create a new object from these classes. These classes are reference libraries of methods and properties that do not change state. You don't need to create them, you simply use them. Classes and methods such as these are called *static classes* because they are not created, destroyed, or changed. To make this clear we will provide examples that use static classes.\n\n### Getting Environment Data with System.Environment\nUsually, the first step in working with an object in Windows PowerShell is to use Get-Member to find out what members it contains. With static classes, the process is a little different because the actual class is not an object.\n\n#### Referring to the Static System.Environment Class\nYou can refer to a static class by surrounding the class name with square brackets. For example, you can refer to **System.Environment** by typing the name within brackets. Doing so displays some generic type information:\n\n```\nPS> [System.Environment]\n\nIsPublic IsSerial Name                                     BaseType\n-------- -------- ----                                     --------\nTrue     False    Environment                              System.Object\n```\n\n> [!NOTE]\n> As we mentioned previously, Windows PowerShell automatically prepends '**System.**' to type names when you use **New-Object**. The same thing happens when using a bracketed type name, so you can specify **\\[System.Environment]** as **\\[Environment]**.\n\nThe **System.Environment** class contains general information about the working environment for the current process, which is powershell.exe when working within Windows PowerShell.\n\nIf you try to view details of this class by typing **\\[System.Environment] | Get-Member**, the object type is reported as being **System.RuntimeType** , not **System.Environment**:\n\n```\nPS> [System.Environment] | Get-Member\n\n   TypeName: System.RuntimeType\n```\n\nTo view static members with Get-Member, specify the **Static** parameter:\n\n```\nPS> [System.Environment] | Get-Member -Static\n\n   TypeName: System.Environment\n\nName                       MemberType Definition\n----                       ---------- ----------\nEquals                     Method     static System.Boolean Equals(Object ob...\nExit                       Method     static System.Void Exit(Int32 exitCode)\n...\nCommandLine                Property   static System.String CommandLine {get;}\nCurrentDirectory           Property   static System.String CurrentDirectory ...\nExitCode                   Property   static System.Int32 ExitCode {get;set;}\nHasShutdownStarted         Property   static System.Boolean HasShutdownStart...\nMachineName                Property   static System.String MachineName {get;}\nNewLine                    Property   static System.String NewLine {get;}\nOSVersion                  Property   static System.OperatingSystem OSVersio...\nProcessorCount             Property   static System.Int32 ProcessorCount {get;}\nStackTrace                 Property   static System.String StackTrace {get;}\nSystemDirectory            Property   static System.String SystemDirectory {...\nTickCount                  Property   static System.Int32 TickCount {get;}\nUserDomainName             Property   static System.String UserDomainName {g...\nUserInteractive            Property   static System.Boolean UserInteractive ...\nUserName                   Property   static System.String UserName {get;}\nVersion                    Property   static System.Version Version {get;}\nWorkingSet                 Property   static System.Int64 WorkingSet {get;}\nTickCount                               ExitCode\n```\n\nWe can now select properties to view from System.Environment.\n\n#### Displaying Static Properties of System.Environment\nThe properties of System.Environment are also static, and must be specified in a different way than normal properties. We use **::** to indicate to Windows PowerShell that we want to work with a static method or property. To see the command that was used to launch Windows PowerShell, we check the **CommandLine** property by typing:\n\n```\nPS> [System.Environment]::Commandline\n\"C:\\Program Files\\Windows PowerShell\\v1.0\\powershell.exe\"\n```\n\nTo check the operating system version, display the OSVersion property by typing:\n\n```\nPS> [System.Environment]::OSVersion\n\n           Platform ServicePack         Version             VersionString\n           -------- -----------         -------             -------------\n            Win32NT Service Pack 2      5.1.2600.131072     Microsoft Windows...\n```\n\nWe can check whether the computer is in the process of shutting down by displaying the **HasShutdownStarted** property:\n\n```\nPS> [System.Environment]::HasShutdownStarted\nFalse\n```\n\n### Doing Math with System.Math\nThe System.Math static class is useful for performing some mathematical operations. The important members of **System.Math** are mostly methods, which we can display by using **Get-Member**.\n\n> [!NOTE]\n> System.Math has several methods with the same name, but they are distinguished by the type of their parameters.\n\nType the following command to list the methods of the **System.Math** class.\n\n```\nPS> [System.Math] | Get-Member -Static -MemberType Methods\n\n   TypeName: System.Math\n\nName            MemberType Definition\n----            ---------- ----------\nAbs             Method     static System.Single Abs(Single value), static Sy...\nAcos            Method     static System.Double Acos(Double d)\nAsin            Method     static System.Double Asin(Double d)\nAtan            Method     static System.Double Atan(Double d)\nAtan2           Method     static System.Double Atan2(Double y, Double x)\nBigMul          Method     static System.Int64 BigMul(Int32 a, Int32 b)\nCeiling         Method     static System.Double Ceiling(Double a), static Sy...\nCos             Method     static System.Double Cos(Double d)\nCosh            Method     static System.Double Cosh(Double value)\nDivRem          Method     static System.Int32 DivRem(Int32 a, Int32 b, Int3...\nEquals          Method     static System.Boolean Equals(Object objA, Object ...\nExp             Method     static System.Double Exp(Double d)\nFloor           Method     static System.Double Floor(Double d), static Syst...\nIEEERemainder   Method     static System.Double IEEERemainder(Double x, Doub...\nLog             Method     static System.Double Log(Double d), static System...\nLog10           Method     static System.Double Log10(Double d)\nMax             Method     static System.SByte Max(SByte val1, SByte val2), ...\nMin             Method     static System.SByte Min(SByte val1, SByte val2), ...\nPow             Method     static System.Double Pow(Double x, Double y)\nReferenceEquals Method     static System.Boolean ReferenceEquals(Object objA...\nRound           Method     static System.Double Round(Double a), static Syst...\nSign            Method     static System.Int32 Sign(SByte value), static Sys...\nSin             Method     static System.Double Sin(Double a)\nSinh            Method     static System.Double Sinh(Double value)\nSqrt            Method     static System.Double Sqrt(Double d)\nTan             Method     static System.Double Tan(Double a)\nTanh            Method     static System.Double Tanh(Double value)\nTruncate        Method     static System.Decimal Truncate(Decimal d), static...\n```\n\nThis displays several mathematical methods. Here is a list of commands that demonstrate how some of the common methods work:\n\n```\nPS> [System.Math]::Sqrt(9)\n3\nPS> [System.Math]::Pow(2,3)\n8\nPS> [System.Math]::Floor(3.3)\n3\nPS> [System.Math]::Floor(-3.3)\n-4\nPS> [System.Math]::Ceiling(3.3)\n4\nPS> [System.Math]::Ceiling(-3.3)\n-3\nPS> [System.Math]::Max(2,7)\n7\nPS> [System.Math]::Min(2,7)\n2\nPS> [System.Math]::Truncate(9.3)\n9\nPS> [System.Math]::Truncate(-9.3)\n-9\n```\n\n"}