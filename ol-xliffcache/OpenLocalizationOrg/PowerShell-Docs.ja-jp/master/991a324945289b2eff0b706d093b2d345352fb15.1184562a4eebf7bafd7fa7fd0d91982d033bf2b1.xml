{"nodes":[{"pos":[13,43],"content":"Authoring a DSC resource in C`","needQuote":true,"nodes":[{"content":"Authoring a DSC resource in C`","pos":[0,30]}]},{"pos":[76,90],"content":"powershell,DSC","needQuote":true,"nodes":[{"content":"powershell,DSC","pos":[0,14]}]},{"pos":[188,220],"content":"Authoring a DSC resource in C<ph id=\"ph1\">`#`</ph>","source":"Authoring a DSC resource in C`#`"},{"content":"Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0","pos":[224,282]},{"content":"Typically, a Windows PowerShell Desired State Configuration (DSC) custom resource is implemented in a PowerShell script.","pos":[284,404]},{"content":"However, you can also implement the functionality of a DSC custom resource by writing cmdlets in C#.","pos":[405,505]},{"content":"For an introduction on writing cmdlets in C#, see <bpt id=\"p1\">[</bpt>Writing a Windows PowerShell Cmdlet<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dd878294.aspx)</ept>.","pos":[506,653],"source":" For an introduction on writing cmdlets in C#, see [Writing a Windows PowerShell Cmdlet](https://technet.microsoft.com/en-us/library/dd878294.aspx)."},{"pos":[655,921],"content":"Aside from implementing the resource in C# as cmdlets, the process of creating the MOF schema, creating the folder structure, importing and using your custom DSC resource are the same as described in <bpt id=\"p1\">[</bpt>Writing a custom DSC resource with MOF<ept id=\"p1\">](authoringResourceMOF.md)</ept>.","source":"Aside from implementing the resource in C# as cmdlets, the process of creating the MOF schema, creating the folder structure, importing and using your custom DSC resource are the same as described in [Writing a custom DSC resource with MOF](authoringResourceMOF.md)."},{"content":"Writing a cmdlet-based resource","pos":[926,957]},{"content":"For this example, we will implement a simple resource that manages a text file and its contents.","pos":[958,1054]},{"content":"Writing the MOF schema","pos":[1060,1082]},{"content":"The following is the MOF resource definition.","pos":[1084,1129]},{"content":"Setting up the Visual Studio project","pos":[1527,1563]},{"content":"Setting up a cmdlet project","pos":[1569,1596]},{"content":"Open Visual Studio.","pos":[1601,1620]},{"content":"Create a C# project and provide the name.","pos":[1624,1665]},{"pos":[1669,1731],"content":"Select <bpt id=\"p1\">**</bpt>Class Library<ept id=\"p1\">**</ept> from the available project templates.","source":"Select **Class Library** from the available project templates."},{"pos":[1735,1748],"content":"Click <bpt id=\"p1\">**</bpt>Ok<ept id=\"p1\">**</ept>.","source":"Click **Ok**."},{"content":"Add an assembly reference to System.Automation.Management.dll to your project.","pos":[1752,1830]},{"content":"Change the assembly name to match the resource name.","pos":[1834,1886]},{"content":"In this case, the assembly should be named <bpt id=\"p1\">**</bpt>MSFT_XDemoFile<ept id=\"p1\">**</ept>.","pos":[1887,1949],"source":" In this case, the assembly should be named **MSFT_XDemoFile**."},{"content":"Writing the cmdlet code","pos":[1955,1978]},{"pos":[1980,2101],"content":"The following C# code implements the <bpt id=\"p1\">**</bpt>Get-TargetResource<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>Set-TargetResource<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>Test-TargetResource<ept id=\"p3\">**</ept> cmdlets.","source":"The following C# code implements the **Get-TargetResource**, **Set-TargetResource**, and **Test-TargetResource** cmdlets."},{"content":"Deploying the resource","pos":[9102,9124]},{"content":"The compiled dll file should be saved in a file structure similar to a script-based resource.","pos":[9126,9219]},{"content":"The following is the folder structure for this resource.","pos":[9220,9276]},{"content":"See Also","pos":[9648,9656]},{"content":"Concepts","pos":[9662,9670]},{"pos":[9671,9736],"content":"<bpt id=\"p1\">[</bpt>Writing a custom DSC resource with MOF<ept id=\"p1\">](authoringResourceMOF.md)</ept>","source":"[Writing a custom DSC resource with MOF](authoringResourceMOF.md)"},{"content":"Other Resources","pos":[9742,9757]},{"pos":[9758,9851],"content":"<bpt id=\"p1\">[</bpt>Writing a Windows PowerShell Cmdlet<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/dd878294.aspx)</ept>","source":"[Writing a Windows PowerShell Cmdlet](https://msdn.microsoft.com/en-us/library/dd878294.aspx)"}],"content":"---\ntitle:   Authoring a DSC resource in C`\nms.date:  2016-05-16\nkeywords:  powershell,DSC\ndescription:  \nms.topic:  article\nauthor:  eslesar\nmanager:  dongill\nms.prod:  powershell\n---\n\n# Authoring a DSC resource in C`#`\n\n> Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0\n\nTypically, a Windows PowerShell Desired State Configuration (DSC) custom resource is implemented in a PowerShell script. However, you can also implement the functionality of a DSC custom resource by writing cmdlets in C#. For an introduction on writing cmdlets in C#, see [Writing a Windows PowerShell Cmdlet](https://technet.microsoft.com/en-us/library/dd878294.aspx).\n\nAside from implementing the resource in C# as cmdlets, the process of creating the MOF schema, creating the folder structure, importing and using your custom DSC resource are the same as described in [Writing a custom DSC resource with MOF](authoringResourceMOF.md).\n\n## Writing a cmdlet-based resource\nFor this example, we will implement a simple resource that manages a text file and its contents.\n\n### Writing the MOF schema\n\nThe following is the MOF resource definition.\n\n```\n[ClassVersion(\"1.0.0\"), FriendlyName(\"xDemoFile\")]\nclass MSFT_XDemoFile : OMI_BaseResource\n{\n                [Key, Description(\"path\")] String Path;\n                [Write, Description(\"Should the file be present\"), ValueMap{\"Present\",\"Absent\"}, Values{\"Present\",\"Absent\"}] String Ensure;\n                [Write, Description(\"Contentof file.\")] String Content;                   \n};\n```\n\n### Setting up the Visual Studio project\n#### Setting up a cmdlet project\n\n1. Open Visual Studio.\n1. Create a C# project and provide the name.\n1. Select **Class Library** from the available project templates.\n1. Click **Ok**.\n1. Add an assembly reference to System.Automation.Management.dll to your project.\n1. Change the assembly name to match the resource name. In this case, the assembly should be named **MSFT_XDemoFile**.\n\n### Writing the cmdlet code\n\nThe following C# code implements the **Get-TargetResource**, **Set-TargetResource**, and **Test-TargetResource** cmdlets.\n\n```C#\n\n\nnamespace cSharpDSCResourceExample\n{\n    using System;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Management.Automation;  // Windows PowerShell assembly.\n\n    #region Get-TargetResource\n\n    [OutputType(typeof(System.Collections.Hashtable))]\n    [Cmdlet(VerbsCommon.Get, \"TargetResource\")]\n    public class GetTargetResource : PSCmdlet\n    {\n        [Parameter(Mandatory = true)]\n        public string Path { get; set; }\n\n        /// <summary>\n        /// Implement the logic to return the current state of the resource as a hashtable with keys being the resource properties \n        /// and the values are the corresponding current value on the machine.\n        /// </summary>\n        protected override void ProcessRecord()\n        {\n            var currentResourceState = new Dictionary<string, string>();\n            if (File.Exists(Path))\n            {\n                currentResourceState.Add(\"Ensure\", \"Present\");\n\n                // read current content \n                string CurrentContent = \"\";\n                using (var reader = new StreamReader(Path))\n                {\n                    CurrentContent = reader.ReadToEnd();\n                }\n                currentResourceState.Add(\"Content\", CurrentContent);\n            }\n            else\n            {\n                currentResourceState.Add(\"Ensure\", \"Absent\");\n                currentResourceState.Add(\"Content\", \"\");\n            }\n            // write the hashtable in the PS console.\n            WriteObject(currentResourceState);\n        }\n    }\n    \n    # endregion\n\n    #region Set-TargetResource\n    [OutputType(typeof(void))]\n    [Cmdlet(VerbsCommon.Set, \"TargetResource\")]\n    public class SetTargetResource : PSCmdlet\n    {\n        [Parameter(Mandatory = true)]\n        public string Path { get; set; }\n\n        [Parameter(Mandatory = false)]\n        \n        [ValidateSet(\"Present\", \"Absent\", IgnoreCase = true)]\n        public string Ensure {\n            get\n            {\n                // set the default to present.\n               return (this._ensure ?? \"Present\") ;\n            }\n            set\n            {\n                this._ensure = value;\n            }\n        }\n\n        [Parameter(Mandatory = false)]\n        public string Content {\n            get { return (string.IsNullOrEmpty(this._content) ? \"\" : this._content); }\n            set { this._content = value; }\n        }\n\n        private string _ensure;\n        private string _content;\n\n        /// <summary>\n        /// Implement the logic to set the state of the machine to the desired state.\n        /// </summary>\n        protected override void ProcessRecord()\n        {\n            WriteVerbose(string.Format(\"Running set with parameters {0}{1}{2}\", Path, Ensure, Content));\n            if (File.Exists(Path))\n            {\n                if (Ensure.Equals(\"absent\", StringComparison.InvariantCultureIgnoreCase))\n                {\n                    File.Delete(Path);\n                }\n                else\n                {\n                    // file already exist and ensure \"present\" is specified. start writing the content to a file\n                    if (!string.IsNullOrEmpty(Content))\n                    {\n                        string existingContent = null;\n                        using (var reader = new StreamReader(Path))\n                        {\n                            existingContent = reader.ReadToEnd();\n                        }\n                        // check if the content of the file mathes the content passed \n                        if (!existingContent.Equals(Content, StringComparison.InvariantCultureIgnoreCase))\n                        {\n                            WriteVerbose(\"Existing content did not match with desired content updating the content of the file\");\n                            using (var writer = new StreamWriter(Path))\n                            {\n                                writer.Write(Content);\n                                writer.Flush();\n                            }\n                        }\n                    }\n                }\n\n            }\n            else\n            {\n                if (Ensure.Equals(\"present\", StringComparison.InvariantCultureIgnoreCase))\n                {\n                    // if nothing is passed for content just write \"\" otherwise write the content passed.\n                    using (var writer = new StreamWriter(Path))\n                    {\n                        WriteVerbose(string.Format(\"Creating a file under path {0} with content {1}\", Path, Content));\n                        writer.Write(Content);\n                    }\n                }\n\n            }\n            \n            /* if you need to reboot the VM. please add the following two line of code.\n            PSVariable DscMachineStatus = new PSVariable(\"DSCMachineStatus\", 1, ScopedItemOptions.AllScope);\n            this.SessionState.PSVariable.Set(DscMachineStatus);\n             */     \n\n        }\n\n    }\n\n    # endregion\n\n    #region Test-TargetResource\n\n    [Cmdlet(\"Test\", \"TargetResource\")]\n    [OutputType(typeof(Boolean))]\n    public class TestTargetResource : PSCmdlet\n    {   \n        [Parameter(Mandatory = true)]\n        public string Path { get; set; }\n\n        [Parameter(Mandatory = false)]\n\n        [ValidateSet(\"Present\", \"Absent\", IgnoreCase = true)]\n        public string Ensure\n        {\n            get\n            {\n                // set the default to present.\n                return (this._ensure ?? \"Present\");\n            }\n            set\n            {\n                this._ensure = value;\n            }\n        }\n\n        [Parameter(Mandatory = false)]\n        public string Content\n        {\n            get { return (string.IsNullOrEmpty(this._content) ? \"\" : this._content); }\n            set { this._content = value; }\n        }\n\n        private string _ensure;\n        private string _content;\n\n        /// <summary>\n        /// Return a boolean value which indicates wheather the current machine is in desired state or not.\n        /// </summary>\n        protected override void ProcessRecord()\n        {\n            if (File.Exists(Path)) \n            {\n                if( Ensure.Equals(\"absent\", StringComparison.InvariantCultureIgnoreCase))\n                {\n                    WriteObject(false);\n                }\n                else\n                {\n                    // check if the content matches\n\n                    string existingContent = null;\n                    using (var stream = new StreamReader(Path))\n                    {\n                        existingContent = stream.ReadToEnd();\n                    }\n\n                    WriteObject(Content.Equals(existingContent, StringComparison.InvariantCultureIgnoreCase));\n                }\n            }\n            else\n            {\n                WriteObject(Ensure.Equals(\"Absent\", StringComparison.InvariantCultureIgnoreCase));\n            }\n        }        \n    }\n\n    # endregion\n\n}\n```\n\n### Deploying the resource\n\nThe compiled dll file should be saved in a file structure similar to a script-based resource. The following is the folder structure for this resource.\n\n```\n$env: psmodulepath (folder)\n    |- MyDscResources (folder)\n        |- MyDscResources.psd1 (file, required)     \n        |- DSCResources (folder)\n            |- MSFT_XDemoFile (folder)\n                |- MSFT_XDemoFile.psd1 (file, optional)\n                |- MSFT_XDemoFile.dll (file, required)\n                |- MSFT_XDemoFile.schema.mof (file, required)\n```\n\n### See Also\n#### Concepts\n[Writing a custom DSC resource with MOF](authoringResourceMOF.md)\n#### Other Resources\n[Writing a Windows PowerShell Cmdlet](https://msdn.microsoft.com/en-us/library/dd878294.aspx)\n\n"}