{"nodes":[{"pos":[13,45],"content":"DSC for Linux nxArchive Resource","needQuote":true,"nodes":[{"content":"DSC for Linux nxArchive Resource","pos":[0,32]}]},{"pos":[78,92],"content":"powershell,DSC","needQuote":true,"nodes":[{"content":"powershell,DSC","pos":[0,14]}]},{"content":"DSC for Linux nxArchive Resource","pos":[190,222]},{"pos":[224,392],"content":"The <bpt id=\"p1\">**</bpt>nxArchive<ept id=\"p1\">**</ept> resource in PowerShell Desired State Configuration (DSC) provides a mechanism to unpack archive (.tar, .zip) files at a specific path on a Linux node.","source":"The **nxArchive** resource in PowerShell Desired State Configuration (DSC) provides a mechanism to unpack archive (.tar, .zip) files at a specific path on a Linux node."},{"content":"Syntax","pos":[397,403]},{"content":"Properties","pos":[666,676]},{"content":"Property","pos":[681,689]},{"content":"Description","pos":[693,704]},{"content":"SourcePath","pos":[720,730]},{"content":"Specifies the source path of the archive file.","pos":[732,778]},{"content":"This should be a .tar, .zip, or .tar.gz file.","pos":[779,824]},{"content":"DestinationPath","pos":[830,845]},{"content":"Specifies the location where you want to ensure the archive contents are extracted.","pos":[847,930]},{"content":"Checksum","pos":[935,943]},{"content":"Defines the type to use when determining whether the source archive has been updated.","pos":[945,1030]},{"content":"Values are: \"ctime\", \"mtime\", or \"md5\".","pos":[1031,1070]},{"content":"The default value is \"md5\".","pos":[1071,1098]},{"content":"Force","pos":[1103,1108]},{"content":"Certain file operations (such as overwriting a file or deleting a directory that is not empty) will result in an error.","pos":[1110,1229]},{"content":"Using the <bpt id=\"p1\">**</bpt>Force<ept id=\"p1\">**</ept> property overrides such errors.","pos":[1230,1281],"source":" Using the **Force** property overrides such errors."},{"content":"The default value is <bpt id=\"p1\">**</bpt>$false<ept id=\"p1\">**</ept>.","pos":[1282,1314],"source":" The default value is **$false**."},{"content":"DependsOn","pos":[1319,1328]},{"content":"Indicates that the configuration of another resource must run before this resource is configured.","pos":[1331,1428]},{"content":"For example, if the <bpt id=\"p1\">**</bpt>ID<ept id=\"p1\">**</ept> of the resource configuration script block that you want to run first is <bpt id=\"p2\">**</bpt>ResourceName<ept id=\"p2\">**</ept> and its type is <bpt id=\"p3\">**</bpt>ResourceType<ept id=\"p3\">**</ept>, the syntax for using this property is <ph id=\"ph1\">`DependsOn = \"[ResourceType]ResourceName\"`</ph>.","pos":[1429,1661],"source":" For example, if the **ID** of the resource configuration script block that you want to run first is **ResourceName** and its type is **ResourceType**, the syntax for using this property is `DependsOn = \"[ResourceType]ResourceName\"`."},{"content":"Ensure","pos":[1666,1672]},{"content":"Determines whether to check if the content of the archive exists at the <bpt id=\"p1\">**</bpt>Destination<ept id=\"p1\">**</ept>.","pos":[1674,1762],"source":"Determines whether to check if the content of the archive exists at the **Destination**."},{"content":"Set this property to \"Present\" to ensure the contents exist.","pos":[1763,1823]},{"content":"Set it to \"Absent\" to ensure they do not exist.","pos":[1824,1871]},{"content":"The default value is \"Present\".","pos":[1872,1903]},{"content":"Example","pos":[1910,1917]},{"pos":[1919,2100],"content":"The following example shows how to use the <bpt id=\"p1\">**</bpt>nxArchive<ept id=\"p1\">**</ept> resource to ensure that the contents of an archive file called <ph id=\"ph1\">`website.tar`</ph> exist and are extracted at a given destination.","source":"The following example shows how to use the **nxArchive** resource to ensure that the contents of an archive file called `website.tar` exist and are extracted at a given destination."}],"content":"---\ntitle:   DSC for Linux nxArchive Resource\nms.date:  2016-05-16\nkeywords:  powershell,DSC\ndescription:  \nms.topic:  article\nauthor:  eslesar\nmanager:  dongill\nms.prod:  powershell\n---\n\n# DSC for Linux nxArchive Resource\n\nThe **nxArchive** resource in PowerShell Desired State Configuration (DSC) provides a mechanism to unpack archive (.tar, .zip) files at a specific path on a Linux node.\n\n## Syntax\n\n```\nnxArchive <string> #ResourceName\n{\n    SourcePath = <string>\n    DestinationPath = <string>\n    [ Checksum = <string> { ctime | mtime | md5 }  ]\n    [ Force = <bool> ]\n    [ DependsOn = <string[]> ]\n    [ Ensure = <string> { Absent | Present }  ]\n}\n```\n\n## Properties\n\n|  Property |  Description | \n|---|---|\n| SourcePath| Specifies the source path of the archive file. This should be a .tar, .zip, or .tar.gz file. | \n| DestinationPath| Specifies the location where you want to ensure the archive contents are extracted.| \n| Checksum| Defines the type to use when determining whether the source archive has been updated. Values are: \"ctime\", \"mtime\", or \"md5\". The default value is \"md5\".| \n| Force| Certain file operations (such as overwriting a file or deleting a directory that is not empty) will result in an error. Using the **Force** property overrides such errors. The default value is **$false**.| \n| DependsOn | Indicates that the configuration of another resource must run before this resource is configured. For example, if the **ID** of the resource configuration script block that you want to run first is **ResourceName** and its type is **ResourceType**, the syntax for using this property is `DependsOn = \"[ResourceType]ResourceName\"`.| \n| Ensure| Determines whether to check if the content of the archive exists at the **Destination**. Set this property to \"Present\" to ensure the contents exist. Set it to \"Absent\" to ensure they do not exist. The default value is \"Present\".| \n\n## Example\n\nThe following example shows how to use the **nxArchive** resource to ensure that the contents of an archive file called `website.tar` exist and are extracted at a given destination.\n\n```\nImport-DSCResource -Module nx \n\nnxFile SyncArchiveFromWeb\n{\n   Ensure = \"Present\"\n   SourcePath = “http://release.contoso.com/releases/website.tar”\n   DestinationPath = \"/usr/release/staging/website.tar\"\n   Type = \"File\"\n   Checksum = “mtime”\n}\n\nnxArchive SyncWebDir\n{\n   SourcePath = “/usr/release/staging/website.tar”\n   DestinationPath = “/usr/local/apache2/htdocs/”\n   Force = $false\n   DependsOn = \"[nxFile]SyncArchiveFromWeb\"\n} \n```\n\n"}