{"nodes":[{"content":"Information Stream","pos":[2,20]},{"content":"A new structured Information stream can now be used to transmit structured data between a script and its host.","pos":[22,132]},{"content":"<bpt id=\"p1\">**</bpt>Write-Host<ept id=\"p1\">**</ept> has also been updated to emit its output to the Information stream where you can now capture or silence it.","pos":[133,255],"source":"**Write-Host** has also been updated to emit its output to the Information stream where you can now capture or silence it."},{"content":"The new <bpt id=\"p1\">**</bpt>Write-Information<ept id=\"p1\">**</ept> cmdlet (along with a corresponding WriteInformation API) used with <bpt id=\"p2\">**</bpt>-InformationVariable<ept id=\"p2\">**</ept> and <bpt id=\"p3\">**</bpt>-InformationAction<ept id=\"p3\">**</ept> common parameters enables more flexibility and capability.","pos":[256,463],"source":" The new **Write-Information** cmdlet (along with a corresponding WriteInformation API) used with **-InformationVariable** and **-InformationAction** common parameters enables more flexibility and capability."}],"content":"# Information Stream\n\nA new structured Information stream can now be used to transmit structured data between a script and its host. **Write-Host** has also been updated to emit its output to the Information stream where you can now capture or silence it. The new **Write-Information** cmdlet (along with a corresponding WriteInformation API) used with **-InformationVariable** and **-InformationAction** common parameters enables more flexibility and capability.\n\n```powershell\nPS C:\\Users\\demo> ## Here's a typical PowerShell script\nPS C:\\Users\\demo> Show-ColorizedContent c:\\temp\\OutputGusher.ps1\n\n001 | [CmdletBinding()]\n002 | param()\n003 |\n004 | Write-Host -ForegroundColor Green \"Preparing to give you output!\"\n005 | Write-Host \"=============================\"\n006 | Write-Host \"I \" -NoNewLine -ForegroundColor White\n007 | Write-Host \"<3\" -ForegroundColor Red â€“NoNewLine\n008 | Write-Host \" Output\" -ForegroundColor White\n009 | Write-Host \"=============================\"\n010 |\n011 | $p = Get-Process -id $pid\n012 | $p\n013 |\n014 | Write-Information $p -Tag Process\n015 | Write-Information \"Some spammy logging information\" -Tag LogLow\n016 | Write-Information \"Some important logging information\" -Tag LogHigh\n017 |\n018 | Write-Host\n019 | Write-Host -ForegroundColor Green \"SCRIPT COMPLETE!One!Eleven!\"\n020 | Write-Host \"=============================\"\n\nPS C:\\Users\\demo> ## And a typical problem\nPS C:\\Users\\demo> $r = c:\\temp\\OutputGusher\nPreparing to give you output!\n=============================\nI <3 Output\n=============================\nSCRIPT COMPLETE!One!Eleven!\n=============================\nPS C:\\Users\\demo>\nPS C:\\Users\\demo> ## Output still has some captured data\nPS C:\\Users\\demo> $r.Id\n4008\nPS C:\\Users\\demo>\nPS C:\\Users\\demo> ## With the -InformationVariable common variable, you can capture\nPS C:\\Users\\demo> ## the Write-Host data now.\nPS C:\\Users\\demo> $r = c:\\temp\\OutputGusher -InformationVariable iv\nPreparing to give you output!\n=============================\nI <3 Output\n=============================\nSCRIPT COMPLETE!One!Eleven!\n=============================\nPS C:\\Users\\demo> $ivOutput = $iv | Group-Object -AsHash { $_.Tags[0] } -AsString\nPS C:\\Users\\demo> $ivOutput.PSHOST | Format-Table\n\nMessageData\n-----------\n\n{[Message, Preparing to give you output!], [NoNewLine, False], [ForegroundColor, Green], [BackgroundColor, DarkMagenta]}\n{[Message, =============================], [NoNewLine, False], [ForegroundColor, DarkYellow], [BackgroundColor, DarkMa...\n{[Message, I ], [NoNewLine, True], [ForegroundColor, White], [BackgroundColor, DarkMagenta]}\n{[Message, <3], [NoNewLine, True], [ForegroundColor, Red], [BackgroundColor, DarkMagenta]}\n{[Message,  Output], [NoNewLine, False], [ForegroundColor, White], [BackgroundColor, DarkMagenta]}\n{[Message, =============================], [NoNewLine, False], [ForegroundColor, DarkYellow], [BackgroundColor, DarkMa...\n{[Message, ], [NoNewLine, False], [ForegroundColor, DarkYellow], [BackgroundColor, DarkMagenta]}\n{[Message, SCRIPT COMPLETE!One!Eleven!], [NoNewLine, False], [ForegroundColor, Green], [BackgroundColor, DarkMagenta]}\n{[Message, =============================], \\[NoNewLine, False], [ForegroundColor, DarkYellow], [BackgroundColor, DarkMa...\n\nPS C:\\Users\\demo>\n\nPS C:\\Users\\demo> ## And even ignore spammy output altogether\nPS C:\\Users\\demo> $r = c:\\temp\\OutputGusher -InformationAction \"SilentlyContinue\"\nPS C:\\Users\\demo>\n\nPS C:\\Users\\demo> ## As we saw in lines 14..16 of the original script, though,\nPS C:\\Users\\demo> ## the Write-Information cmdlet lets a script emit more than\n\nPS C:\\Users\\demo> ## just one stream of output.\nPS C:\\Users\\demo> $ivOutput.LogHigh | % { Write-Warning $_.MessageData }\nWARNING: Some important logging information\nPS C:\\Users\\demo>\nPS C:\\Users\\demo> ## All output includes useful properties that you would expect\nPS C:\\Users\\demo> ## of a generic event stream\nPS C:\\Users\\demo> $ivOutput.Process \nMessageData     : System.Diagnostics.Process (powershell)\nSource          : c:\\temp\\OutputGusher.ps1\nTimeGenerated   : 2/9/2015 5:08:52 PM\nTags            : {Process}\nUser            : demo\nComputer        : srv2\nProcessId       : 4008\nNativeThreadId  : 7980\nManagedThreadId : 8\n\nPS C:\\Users\\demo> ## And of course, this works from hosting applications.\nPS C:\\Users\\demo> $ps = [PowerShell]::Create()\nPS C:\\Users\\demo> $ps.AddCommand('c:\\temp\\OutputGusher.ps1').Invoke() \n\nHandles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName\n-------  ------    -----      ----- -----   ------     -- -----------\n    559      41   119704     130968 ...46     7.77   4008 powershell\n\nPS C:\\Users\\demo> $information = $ps.Streams.Information\nPS C:\\Users\\demo> $information | ? { $_.Tags -contains 'LogLow'}\n\nMessageData     : Some spammy logging information\nSource          : C:\\temp\\OutputGusher.ps1\nTimeGenerated   : 2/9/2015 5:08:53 PM\nTags            : {LogLow}\nUser            : demo\nComputer        : srv2\nProcessId       : 4008\nNativeThreadId  : 2276\nManagedThreadId : 14\n```\n"}