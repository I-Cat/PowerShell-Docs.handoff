{"nodes":[{"pos":[13,43],"content":"Bug Fixes in WMF 5.1 (Preview)","needQuote":true,"nodes":[{"content":"Bug Fixes in WMF 5.1 (Preview)","pos":[0,30]}]},{"pos":[76,96],"content":"PowerShell, DSC, WMF","needQuote":true,"nodes":[{"content":"PowerShell, DSC, WMF","pos":[0,20]}]},{"content":"Bug Fixes in WMF 5.1 (Preview)","pos":[212,242]},{"content":"Bug fixes","pos":[248,257]},{"content":"The following notable bugs are fixed in WMF 5.1:","pos":[262,310]},{"pos":[316,370],"content":"Module auto-discovery fully honors <ph id=\"ph1\">`$env:PSModulePath`</ph>","source":"Module auto-discovery fully honors `$env:PSModulePath`"},{"content":"Module auto-discovery (loading modules automatically without an explicit Import-Module when calling a command) was introduced in WMF 3.","pos":[376,511],"source":"Module auto-discovery (loading modules automatically without an explicit Import-Module when calling a command)\nwas introduced in WMF 3."},{"content":"When introduced, PowerShell checked for commands in <ph id=\"ph1\">`$PSHome\\Modules`</ph> before using <ph id=\"ph2\">`$env:PSModulePath`</ph>.","pos":[512,616],"source":" \nWhen introduced, PowerShell checked for commands in `$PSHome\\Modules` before using `$env:PSModulePath`."},{"content":"WMF 5.1 changes this behavior to honor <ph id=\"ph1\">`$env:PSModulePath`</ph> completely.","pos":[618,688],"source":"WMF 5.1 changes this behavior to honor `$env:PSModulePath` completely."},{"content":"This allows for a user-authored module that defines commands provided by PowerShell (e.g. <ph id=\"ph1\">`Get-ChildItem`</ph>) to be auto-loaded and correctly overriding the built-in command.","pos":[689,861],"source":" \nThis allows for a user-authored module that defines commands provided by PowerShell (e.g. `Get-ChildItem`) to be auto-loaded and correctly overriding the built-in command."},{"pos":[867,924],"content":"File redirection no longer hard-codes <ph id=\"ph1\">`-Encoding Unicode`</ph>","source":"File redirection no longer hard-codes `-Encoding Unicode`"},{"pos":[930,1132],"content":"In all previous versions of PowerShell, it was impossible to control the file encoding used by the file redirection operator, e.g. <ph id=\"ph1\">`Get-ChildItem &gt; out.txt`</ph> because PowerShell added <ph id=\"ph2\">`-Encoding Unicode`</ph>.","source":"In all previous versions of PowerShell, it was impossible to control the file encoding used by the file\nredirection operator, e.g. `Get-ChildItem > out.txt` because PowerShell added `-Encoding Unicode`."},{"pos":[1134,1248],"content":"Starting with WMF 5.1, you can now change the file encoding of redirection by setting <ph id=\"ph1\">`$PSDefaultParameterValues`</ph>:","source":"Starting with WMF 5.1, you can now change the file encoding of redirection by setting `$PSDefaultParameterValues`:"},{"pos":[1320,1391],"content":"Fixed a regression in accessing members of <ph id=\"ph1\">`System.Reflection.TypeInfo`</ph>","source":"Fixed a regression in accessing members of `System.Reflection.TypeInfo`"},{"content":"A regression introduced in WMF 5.0 broke accessing members of <ph id=\"ph1\">`System.Reflection.RuntimeType`</ph>, e.g. <ph id=\"ph2\">`[int].ImplementedInterfaces`</ph>.","pos":[1397,1527],"source":"A regression introduced in WMF 5.0 broke accessing members of `System.Reflection.RuntimeType`, e.g. `[int].ImplementedInterfaces`."},{"content":"This bug has been fixed in WMF 5.1.","pos":[1528,1563],"source":"\nThis bug has been fixed in WMF 5.1."},{"content":"Fixed some issues with COM objects","pos":[1570,1604]},{"content":"WMF 5.0 introduced a new COM binder for invoking methods on COM objects and accessing properties of COM objects.","pos":[1610,1722]},{"content":"This new binder improved performance significantly but also introduced some bugs which have been fixed in WMF 5.1.","pos":[1723,1838],"source":" \nThis new binder improved performance significantly but also introduced some bugs which have been fixed in WMF 5.1."},{"content":"Argument conversions were not always performed correctly","pos":[1845,1901]},{"content":"In the following example:","pos":[1908,1933]},{"pos":[2012,2310],"content":"The SendKeys method expects a string, but PowerShell did not convert the char to a string, deferring the conversion to IDispatch::Invoke, which uses VariantChangeType to do the conversion, which in this example resulted in sending the keys '1', '7', and '3' instead of the expected Volume.Mute key.","source":"The SendKeys method expects a string, but PowerShell did not convert the char to a string, deferring the conversion\nto IDispatch::Invoke, which uses VariantChangeType to do the conversion, which in this example resulted in sending\nthe keys '1', '7', and '3' instead of the expected Volume.Mute key."},{"content":"Enumerable COM objects not always handled correctly","pos":[2317,2368]},{"content":"PowerShell normally enumerates most enumerable objects, but a regression introduced in WMF 5.0 prevented the enumeration of COM objects that implement IEnumerable.","pos":[2375,2538],"source":"PowerShell normally enumerates most enumerable objects, but a regression introduced in WMF 5.0 prevented the enumeration\nof COM objects that implement IEnumerable."},{"content":"For example:","pos":[2540,2552]},{"content":"In the above example, WMF 5.0 incorrectly wrote the Scripting.Dictionary to the pipeline instead of enumerating the key/value pairs.","pos":[2722,2854]},{"pos":[2856,2976],"content":"This change also addresses <bpt id=\"p1\">[</bpt>issue 1752224 on Connect<ept id=\"p1\">](https://connect.microsoft.com/PowerShell/feedback/details/1752224)</ept>","source":"This change also addresses [issue 1752224 on Connect](https://connect.microsoft.com/PowerShell/feedback/details/1752224)"},{"pos":[2982,3024],"content":"<ph id=\"ph1\">`[ordered]`</ph> was not allowed inside classes","source":"`[ordered]` was not allowed inside classes"},{"content":"WMF 5.0 introduced classes with validation of type literals used in classes.","pos":[3030,3106]},{"content":"<ph id=\"ph1\">`[ordered]`</ph> looks like a type literal but is not a true .NET type.","pos":[3109,3175],"source":"`[ordered]` looks like a type literal but is not a true .NET type."},{"content":"WMF 5.0 incorrectly reported an error on <ph id=\"ph1\">`[ordered]`</ph> inside a class:","pos":[3176,3245],"source":" \nWMF 5.0 incorrectly reported an error on `[ordered]` inside a class:"},{"content":"Help on About topics with multiple versions does not work","pos":[3344,3401]},{"pos":[3407,3634],"content":"Before WMF 5.1, if you had multiple versions of a module installed and they all shared a help topic, for example, about_PSReadline, <ph id=\"ph1\">`help about_PSReadline`</ph> would return multiple topics with no obvious way to view the real help.","source":"Before WMF 5.1, if you had multiple versions of a module installed and they all shared a help topic,\nfor example, about_PSReadline, `help about_PSReadline` would return multiple topics with no obvious way\nto view the real help."},{"content":"WMF 5.1 fixes this by returning the help for the latest version of the topic.","pos":[3636,3713]},{"content":"<ph id=\"ph1\">`Get-Help`</ph> does not provide a way to specify which version you want help for.","pos":[3715,3792],"source":"`Get-Help` does not provide a way to specify which version you want help for."},{"content":"To work around this, navigate to the modules directory and view the help directly with a tool like your favorite editor.","pos":[3793,3914],"source":" \nTo work around this, navigate to the modules directory and view the help directly with a tool like your favorite editor."}],"content":"---\ntitle:   Bug Fixes in WMF 5.1 (Preview)\nms.date:  2016-07-13\nkeywords:  PowerShell, DSC, WMF\ndescription:  \nms.topic:  article\nauthor:  keithb\nmanager:  dongill\nms.prod:  powershell\nms.technology: WMF\n---\n\n# Bug Fixes in WMF 5.1 (Preview)#\n\n## Bug fixes ##\n\nThe following notable bugs are fixed in WMF 5.1:\n\n### Module auto-discovery fully honors `$env:PSModulePath` ###\n\nModule auto-discovery (loading modules automatically without an explicit Import-Module when calling a command)\nwas introduced in WMF 3. \nWhen introduced, PowerShell checked for commands in `$PSHome\\Modules` before using `$env:PSModulePath`.\n\nWMF 5.1 changes this behavior to honor `$env:PSModulePath` completely. \nThis allows for a user-authored module that defines commands provided by PowerShell (e.g. `Get-ChildItem`) to be auto-loaded and correctly overriding the built-in command.\n\n### File redirection no longer hard-codes `-Encoding Unicode` ###\n\nIn all previous versions of PowerShell, it was impossible to control the file encoding used by the file\nredirection operator, e.g. `Get-ChildItem > out.txt` because PowerShell added `-Encoding Unicode`.\n\nStarting with WMF 5.1, you can now change the file encoding of redirection by setting `$PSDefaultParameterValues`:\n\n```\n$PSDefaultParameterValues[\"Out-File:Encoding\"] = \"Ascii\"\n```\n\n### Fixed a regression in accessing members of `System.Reflection.TypeInfo` ###\n\nA regression introduced in WMF 5.0 broke accessing members of `System.Reflection.RuntimeType`, e.g. `[int].ImplementedInterfaces`.\nThis bug has been fixed in WMF 5.1.\n\n\n### Fixed some issues with COM objects ###\n\nWMF 5.0 introduced a new COM binder for invoking methods on COM objects and accessing properties of COM objects. \nThis new binder improved performance significantly but also introduced some bugs which have been fixed in WMF 5.1.\n\n#### Argument conversions were not always performed correctly ####\n\nIn the following example:\n\n```\n$obj = New-Object -ComObject WScript.Shell\n$obj.SendKeys([char]173)\n```\n\nThe SendKeys method expects a string, but PowerShell did not convert the char to a string, deferring the conversion\nto IDispatch::Invoke, which uses VariantChangeType to do the conversion, which in this example resulted in sending\nthe keys '1', '7', and '3' instead of the expected Volume.Mute key.\n\n#### Enumerable COM objects not always handled correctly ####\n\nPowerShell normally enumerates most enumerable objects, but a regression introduced in WMF 5.0 prevented the enumeration\nof COM objects that implement IEnumerable.  For example:\n\n```\nfunction Get-COMDictionary\n{\n    $d = New-Object -ComObject Scripting.Dictionary\n    $d.Add('a', 2)\n    $d.Add('b', 2)\n    return $d\n}\n\n$x = Get-COMDictionary\n```\n\nIn the above example, WMF 5.0 incorrectly wrote the Scripting.Dictionary to the pipeline instead of enumerating the key/value pairs.\n\nThis change also addresses [issue 1752224 on Connect](https://connect.microsoft.com/PowerShell/feedback/details/1752224)\n\n### `[ordered]` was not allowed inside classes ###\n\nWMF 5.0 introduced classes with validation of type literals used in classes.  \n`[ordered]` looks like a type literal but is not a true .NET type. \nWMF 5.0 incorrectly reported an error on `[ordered]` inside a class:\n\n```\nclass CThing\n{\n    [object] foo($i)\n    {\n        [ordered]@{ Thing = $i }\n    }\n}\n```\n\n\n### Help on About topics with multiple versions does not work ###\n\nBefore WMF 5.1, if you had multiple versions of a module installed and they all shared a help topic,\nfor example, about_PSReadline, `help about_PSReadline` would return multiple topics with no obvious way\nto view the real help.\n\nWMF 5.1 fixes this by returning the help for the latest version of the topic.\n\n`Get-Help` does not provide a way to specify which version you want help for. \nTo work around this, navigate to the modules directory and view the help directly with a tool like your favorite editor. \n"}