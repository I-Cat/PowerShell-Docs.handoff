{"nodes":[{"pos":[13,36],"content":"Debugging DSC resources","needQuote":true,"nodes":[{"content":"Debugging DSC resources","pos":[0,23]}]},{"pos":[69,83],"content":"powershell,DSC","needQuote":true,"nodes":[{"content":"powershell,DSC","pos":[0,14]}]},{"content":"Debugging DSC resources","pos":[181,204]},{"content":"Applies To: Windows PowerShell 5.0","pos":[208,242]},{"content":"In PowerShell 5.0, a new feature was introduced in Desired State Configuraiton (DSC) that allows you to debug a DSC resource as a configuration is being applied.","pos":[244,405]},{"content":"Enabling DSC debugging","pos":[410,432]},{"content":"Before you can debug a resource, you have to enable debugging by calling the <bpt id=\"p1\">[</bpt>Enable-DscDebug<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/mt517870.aspx)</ept> cmdlet.","pos":[433,594],"source":"Before you can debug a resource, you have to enable debugging by calling the [Enable-DscDebug](https://technet.microsoft.com/en-us/library/mt517870.aspx) cmdlet."},{"content":"This cmdlet takes a mandatory parameter, <bpt id=\"p1\">**</bpt>BreakAll<ept id=\"p1\">**</ept>.","pos":[595,650],"source":" This cmdlet takes a mandatory \nparameter, **BreakAll**."},{"content":"You can verify that debugging has been enabled by looking at the result of a call to <bpt id=\"p1\">[</bpt>Get-DscLocalConfigurationManager<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn407378.aspx)</ept>.","pos":[653,832],"source":"You can verify that debugging has been enabled by looking at the result of a call to [Get-DscLocalConfigurationManager](https://technet.microsoft.com/en-us/library/dn407378.aspx)."},{"content":"The following PowerShell output shows the result of enabling debugging:","pos":[833,905],"source":" \nThe following PowerShell output shows the result of enabling debugging:"},{"content":"Starting a configuration with debug enabled","pos":[1220,1263]},{"content":"To debug a DSC resource, you start a configuration that calls that resource.","pos":[1264,1340]},{"content":"For this example, we'll look at a simple configuration that calls the <bpt id=\"p1\">[</bpt>WindowsFeature<ept id=\"p1\">](windowsfeatureResource.md)</ept> resource to ensure that the \"WindowsPowerShellWebAccess\" feature is installed:","pos":[1341,1534],"source":" For this example, we'll look at a simple configuration that calls the [WindowsFeature](windowsfeatureResource.md) \nresource to ensure that the \"WindowsPowerShellWebAccess\" feature is installed:"},{"content":"After compiling the configuration, start it by calling <bpt id=\"p1\">[</bpt>Start-DscConfiguration<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn521623.aspx)</ept>.","pos":[1843,1982],"source":"After compiling the configuration, start it by calling [Start-DscConfiguration](https://technet.microsoft.com/en-us/library/dn521623.aspx)."},{"content":"The configuration will stop when the Local Configuration Manager (LCM) calls into the first resource in the configuration.","pos":[1983,2105],"source":" The configuration will stop when the\nLocal Configuration Manager (LCM) calls into the first resource in the configuration."},{"content":"If you use the <ph id=\"ph1\">`-Verbose`</ph> and <ph id=\"ph2\">`-Wait`</ph> parameters, the output displays the lines you need to enter to start debugging.","pos":[2106,2223],"source":" If you use the `-Verbose` and `-Wait` parameters, the output displays the lines you need to enter\nto start debugging."},{"content":"At this point, the LCM has called the resource, and come to the first break point.","pos":[3900,3982]},{"content":"The last three lines in the output show you how to attach to the process and start debugging the resource script.","pos":[3983,4096]},{"content":"Debugging the resource script","pos":[4101,4130]},{"content":"Start a new instance of the PowerShell ISE.","pos":[4132,4175]},{"content":"In the console pane, enter the last three lines of output from the <ph id=\"ph1\">`Start-DscConfiguration`</ph> output as commands, replacing <ph id=\"ph2\">`&lt;credentials&gt;`</ph> with valid user credentials.","pos":[4176,4342],"source":" In the console pane, enter the last three lines of output from the `Start-DscConfiguration` output as commands, replacing `<credentials>` with\nvalid user credentials."},{"content":"You should now see a prompt that looks similar to:","pos":[4343,4393]},{"content":"The resource script will open in the script pane, and the debugger is stopped at the first line of the <bpt id=\"p1\">**</bpt>Test-TargetResource<ept id=\"p1\">**</ept> function (the <bpt id=\"p2\">**</bpt>Test()<ept id=\"p2\">**</ept> method of a class-based resource).","pos":[4481,4667],"source":"The resource script will open in the script pane, and the debugger is stopped at the first line of the **Test-TargetResource** function (the **Test()** method of a class-based resource)."},{"content":"Now you can use the debug commands in the ISE to step through the resource script, look at variable values, view the call stack, and so on.","pos":[4668,4807],"source":"\nNow you can use the debug commands in the ISE to step through the resource script, look at variable values, view the call stack, and so on."},{"content":"For information about debugging in the PowerShell ISE, see <bpt id=\"p1\">[</bpt>How to Debug Scripts in Windows PowerShell ISE<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dd819480.aspx)</ept>.","pos":[4808,4975],"source":" For information about debugging in the PowerShell ISE,\nsee [How to Debug Scripts in Windows PowerShell ISE](https://technet.microsoft.com/en-us/library/dd819480.aspx)."},{"content":"Remember that every line in the resource script (or class) is set as a break point.","pos":[4976,5059]},{"content":"Disabling DSC debugging","pos":[5064,5087]},{"content":"After calling <bpt id=\"p1\">[</bpt>Enable-DscDebug<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/mt517870.aspx)</ept>, all calls to <bpt id=\"p2\">[</bpt>Start-DscConfiguration<ept id=\"p2\">](https://technet.microsoft.com/en-us/library/dn521623.aspx)</ept> will result in the configuration breaking into the debugger.","pos":[5089,5338],"source":"After calling [Enable-DscDebug](https://technet.microsoft.com/en-us/library/mt517870.aspx), all calls to [Start-DscConfiguration](https://technet.microsoft.com/en-us/library/dn521623.aspx)\nwill result in the configuration breaking into the debugger."},{"content":"To allow configurations to run normally, you must disable debugging by calling the <bpt id=\"p1\">[</bpt>Disable-DscDebug<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/mt517872.aspx)</ept> cmdlet.","pos":[5339,5508],"source":" To allow configurations to run normally, you must disable debugging by calling the \n[Disable-DscDebug](https://technet.microsoft.com/en-us/library/mt517872.aspx) cmdlet."},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> Rebooting does not change the debug state of the LCM.","pos":[5511,5574],"source":"**Note:** Rebooting does not change the debug state of the LCM."},{"content":"If debugging is enabled, starting a configuration will still break into the debugger after a reboot.","pos":[5575,5675]},{"content":"See Also","pos":[5681,5689]},{"pos":[5692,5757],"content":"<bpt id=\"p1\">[</bpt>Writing a custom DSC resource with MOF<ept id=\"p1\">](authoringResourceMOF.md)</ept>","source":"[Writing a custom DSC resource with MOF](authoringResourceMOF.md)"},{"pos":[5761,5843],"content":"<bpt id=\"p1\">[</bpt>Writing a custom DSC resource with PowerShell classes<ept id=\"p1\">](authoringResourceClass.md)</ept>","source":"[Writing a custom DSC resource with PowerShell classes](authoringResourceClass.md)"}],"content":"---\ntitle:   Debugging DSC resources\nms.date:  2016-05-16\nkeywords:  powershell,DSC\ndescription:  \nms.topic:  article\nauthor:  eslesar\nmanager:  dongill\nms.prod:  powershell\n---\n\n# Debugging DSC resources\n\n> Applies To: Windows PowerShell 5.0\n\nIn PowerShell 5.0, a new feature was introduced in Desired State Configuraiton (DSC) that allows you to debug a DSC resource as a configuration is being applied.\n\n## Enabling DSC debugging\nBefore you can debug a resource, you have to enable debugging by calling the [Enable-DscDebug](https://technet.microsoft.com/en-us/library/mt517870.aspx) cmdlet. This cmdlet takes a mandatory \nparameter, **BreakAll**. \n\nYou can verify that debugging has been enabled by looking at the result of a call to [Get-DscLocalConfigurationManager](https://technet.microsoft.com/en-us/library/dn407378.aspx). \nThe following PowerShell output shows the result of enabling debugging:\n\n\n```powershell\nPS C:\\DebugTest> $LCM = Get-DscLocalConfigurationManager\n\nPS C:\\DebugTest> $LCM.DebugMode\nNONE\n\nPS C:\\DebugTest> Enable-DscDebug -BreakAll\n\nPS C:\\DebugTest> $LCM = Get-DscLocalConfigurationManager\n\nPS C:\\DebugTest> $LCM.DebugMode\nForceModuleImport\nResourceScriptBreakAll\n\nPS C:\\DebugTest>\n```\n\n\n## Starting a configuration with debug enabled\nTo debug a DSC resource, you start a configuration that calls that resource. For this example, we'll look at a simple configuration that calls the [WindowsFeature](windowsfeatureResource.md) \nresource to ensure that the \"WindowsPowerShellWebAccess\" feature is installed:\n\n```powershell\nConfiguration PSWebAccess\n    {\n    Import-DscResource -ModuleName 'PsDesiredStateConfiguration'\n    Node localhost\n        {\n        WindowsFeature PSWA\n            {\n            Name = 'WindowsPowerShellWebAccess'\n            Ensure = 'Present'\n            }\n        }\n    }\nPSWebAccess\n```\nAfter compiling the configuration, start it by calling [Start-DscConfiguration](https://technet.microsoft.com/en-us/library/dn521623.aspx). The configuration will stop when the\nLocal Configuration Manager (LCM) calls into the first resource in the configuration. If you use the `-Verbose` and `-Wait` parameters, the output displays the lines you need to enter\nto start debugging.\n\n```powershell\nPS C:\\DebugTest> Start-DscConfiguration .\\PSWebAccess -Wait -Verbose\nVERBOSE: Perform operation 'Invoke CimMethod' with following parameters, ''methodName' = SendConfigurationApply,'className' = MSFT_DSCLocalConfiguration\nManager,'namespaceName' = root/Microsoft/Windows/DesiredStateConfiguration'.\nVERBOSE: An LCM method call arrived from computer TEST-SRV with user sid S-1-5-21-2127521184-1604012920-1887927527-108583.\nVERBOSE: An LCM method call arrived from computer TEST-SRV with user sid S-1-5-21-2127521184-1604012920-1887927527-108583.\nVERBOSE: [TEST-SRV]: LCM:  [ Start  Set      ]\nWARNING: [TEST-SRV]:                            [DSCEngine] Warning LCM is in Debug 'ResourceScriptBreakAll' mode.  Resource script processing will \nbe stopped to wait for PowerShell script debugger to attach.\nVERBOSE: [TEST-SRV]:                            [DSCEngine] Importing the module C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\Modules\\PSDesiredStateCo\nnfiguration\\DscResources\\MSFT_RoleResource\\MSFT_RoleResource.psm1 in force mode.\nVERBOSE: [TEST-SRV]: LCM:  [ Start  Resource ]  [[WindowsFeature]PSWA]\nVERBOSE: [TEST-SRV]: LCM:  [ Start  Test     ]  [[WindowsFeature]PSWA]\nVERBOSE: [TEST-SRV]:                            [[WindowsFeature]PSWA] Importing the module MSFT_RoleResource in force mode.\nWARNING: [TEST-SRV]:                            [[WindowsFeature]PSWA] Resource is waiting for PowerShell script debugger to attach.  Use the follow\ning commands to begin debugging this resource script:\nEnter-PSSession -ComputerName TEST-SRV -Credential <credentials>\nEnter-PSHostProcess -Id 9000 -AppDomainName DscPsPluginWkr_AppDomain\nDebug-Runspace -Id 9\n```\nAt this point, the LCM has called the resource, and come to the first break point. The last three lines in the output show you how to attach to the process and start debugging the resource script.\n\n## Debugging the resource script\n\nStart a new instance of the PowerShell ISE. In the console pane, enter the last three lines of output from the `Start-DscConfiguration` output as commands, replacing `<credentials>` with\nvalid user credentials. You should now see a prompt that looks similar to:\n\n```powershell\n[TEST-SRV]: [DBG]: [Process:9000]: [RemoteHost]: PS C:\\DebugTest>>\n```\n\nThe resource script will open in the script pane, and the debugger is stopped at the first line of the **Test-TargetResource** function (the **Test()** method of a class-based resource).\nNow you can use the debug commands in the ISE to step through the resource script, look at variable values, view the call stack, and so on. For information about debugging in the PowerShell ISE,\nsee [How to Debug Scripts in Windows PowerShell ISE](https://technet.microsoft.com/en-us/library/dd819480.aspx). Remember that every line in the resource script (or class) is set as a break point.\n\n## Disabling DSC debugging\n\nAfter calling [Enable-DscDebug](https://technet.microsoft.com/en-us/library/mt517870.aspx), all calls to [Start-DscConfiguration](https://technet.microsoft.com/en-us/library/dn521623.aspx)\nwill result in the configuration breaking into the debugger. To allow configurations to run normally, you must disable debugging by calling the \n[Disable-DscDebug](https://technet.microsoft.com/en-us/library/mt517872.aspx) cmdlet.\n\n>**Note:** Rebooting does not change the debug state of the LCM. If debugging is enabled, starting a configuration will still break into the debugger after a reboot.\n\n\n## See Also\n- [Writing a custom DSC resource with MOF](authoringResourceMOF.md) \n- [Writing a custom DSC resource with PowerShell classes](authoringResourceClass.md)\n\n"}