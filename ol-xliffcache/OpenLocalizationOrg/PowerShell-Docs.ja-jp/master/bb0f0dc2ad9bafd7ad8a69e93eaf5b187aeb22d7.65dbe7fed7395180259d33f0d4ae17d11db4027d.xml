{"nodes":[{"content":"Install-Script","pos":[2,16]},{"content":"Installs the PowerShell script files from online repositories to the local computer.","pos":[18,102]},{"content":"Description","pos":[108,119]},{"content":"The Install-Script cmdlet acquires a script payload from a repository, verifies that the payload is a valid PowerShell script, and copies the script file to a specified installation location.","pos":[121,312]},{"content":"The default repositories Install-Script operates against are configurable through the Register-PSRepository, Set-PSRepository, Unregister-PSRepository, and Get-PSRepository cmdlets.","pos":[314,495]},{"content":"When operating against multiple repositories, Install-Script installs the first script that matches the specified search criteria (Name, MinimumVersion, or MaximumVersion) from the first repository without any error.","pos":[496,712]},{"content":"Install-Script cmdlet downloads one or more modules from an online gallery, validates and installs them on the local computer to the specified installation scope.","pos":[715,877]},{"content":"The Install-Script cmdlet gets one or more modules that meet specified criteria from an online gallery, verifies that search results are valid modules, and copies module folders to the installation location.","pos":[879,1086]},{"content":"When no scope is defined, or when the value of the Scope parameter is AllUsers, the module is installed to %systemdrive%:\\Program Files\\WindowsPowerShell\\Modules.","pos":[1088,1250]},{"content":"When the value of Scope is CurrentUser, the module is installed to $home\\Documents\\WindowsPowerShell\\Modules.","pos":[1251,1360]},{"content":"You can filter your results based on minimum and exact versions of specified modules.","pos":[1362,1447]},{"content":"No Side-by-side version support for PowerShell Script files","pos":[1451,1510]},{"content":"Script dependency installation support","pos":[1513,1551]},{"pos":[1554,1660],"content":"<bpt id=\"p1\">**</bpt>Untrusted prompt:<ept id=\"p1\">**</ept> User acceptance is required for installing the modules from an untrusted repository.","source":"**Untrusted prompt:** User acceptance is required for installing the modules from an untrusted repository."},{"content":"-Force reinstalls the installed module","pos":[1663,1701]},{"content":"RequiredVersion installs the specified version in SxS with existing versions on PowerShell version 5.0 or newer.","pos":[1704,1816]},{"content":"Wildcards are not supported in -Name on Install-Module, Save-Module, Uninstall-Module, Install-Script, Save-Script, and Uninstall-Script cmdlets.","pos":[1818,1963]},{"content":"Scope","pos":[1969,1974]},{"content":"Specifies the installation scope of the module.","pos":[1975,2022]},{"content":"The acceptable values for this parameter are: AllUsers and CurrentUser.","pos":[2023,2094]},{"content":"The default installation scope is AllUsers.","pos":[2096,2139]},{"content":"The AllUsers scope lets modules be installed in a location that is accessible to all users of the computer, that is, \"$env:SystemDrive\\Program Files\\WindowsPowerShell\\Modules\".","pos":[2141,2317]},{"content":"The CurrentUser scope lets modules be installed only to \"$home\\Documents\\WindowsPowerShell\\Modules\", so that the module is available only to the current user.","pos":[2319,2477]},{"content":"Specifies the installation scope of the script.","pos":[2480,2527]},{"content":"Valid values are: AllUsers and CurrentUser.","pos":[2528,2571]},{"content":"The default is CurrentUser.","pos":[2572,2599]},{"content":"The AllUsers scope specifies to install a script to %systemdrive%:\\ProgramFiles\\WindowsPowerShell\\Scripts so that the script is available to all users.","pos":[2601,2752]},{"content":"The CurrentUser scope specifies to install the script in $home\\Documents\\WindowsPowerShell\\Scripts so that the script is available only to the current user.","pos":[2753,2909]},{"content":"NoPathUpdate","pos":[2915,2927]},{"content":"NoPathUpdate switch parameter on Install-Script cmdlet bypasses the prompt for adding the script install location to the PATH environment variable.","pos":[2931,3078]},{"content":"Any use of the command WITH –NoPathUpdate specified will result in no prompt and the PATH NOT being updated (force is ignorable here).","pos":[3081,3215]},{"content":"-Force without –NoPathUpdate will result in no prompt and the PATH will be updated.","pos":[3218,3301]},{"content":"If neither –Force or –NoPathUpdate are specified, the user will see the prompt.","pos":[3304,3383]},{"content":"All of this only applies the first time Install-Script is used in a given scope.","pos":[3386,3466]},{"content":"Notes","pos":[3472,3477]},{"content":"This cmdlet runs on Windows PowerShell 3.0 or later releases of Windows PowerShell, on Windows 7 or Windows 2008 R2 and later releases of Windows.","pos":[3479,3625]},{"content":"If an installed module cannot be imported (that is, if it does not have a .psm1, .psd1, or .dll of the same name within the folder), installation fails unless you add the Force parameter to your command.","pos":[3627,3830]},{"content":"If a version of the module on the computer matches the value specified for the Name parameter, and you have not added the MinimumVersion or RequiredVersion parameter, Install-Script silently continues without installing that module.","pos":[3832,4064]},{"content":"If the MinimumVersion or RequiredVersion parameters are specified, and the existing module does not match the values in that parameter, then an error occurs.","pos":[4065,4222]},{"content":"To be more specific: if the version of the currently-installed module is either lower than the value of the MinimumVersion parameter, or not equal to the value of the RequiredVersion parameter, an error occurs.","pos":[4223,4433]},{"content":"If the version of the installed module is greater than the value of the MinimumVersion parameter, or equal to the value of the RequiredVersion parameter, Install-Script silently continues without installing that module.","pos":[4434,4653]},{"content":"Install-Script returns an error if no module exists in the online gallery that matches the specified name.","pos":[4655,4761]},{"content":"To install multiple modules, specify an array of the module names, separated by commas.","pos":[4763,4850]},{"content":"You cannot add MinimumVersion or RequiredVersion if you specify multiple module names.","pos":[4851,4937]},{"content":"By default, modules are installed to the Program Files folder, to prevent confusion when you are installing Windows PowerShell Desired State Configuration (DSC) resources.You can pipe multiple PSGetItemInfo objects to Install-Script; this is another way of specifying multiple modules to install in a single command.","pos":[4939,5255]},{"content":"To help prevent running modules that contain malicious code, installed modules are not automatically imported by installation.","pos":[5257,5383]},{"content":"As a security best practice, evaluate module code before running any cmdlets or functions in a module for the first time.","pos":[5384,5505]},{"content":"Cmdlet syntax","pos":[5511,5524]},{"content":"Cmdlet online help reference","pos":[5611,5639]},{"pos":[5641,5704],"content":"<bpt id=\"p1\">[</bpt>Install-Script<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=619784)</ept>","source":"[Install-Script](http://go.microsoft.com/fwlink/?LinkId=619784)"},{"content":"Example commands","pos":[5709,5725]},{"content":"You can also use Get-Command –Name <ph id=\"ph1\">&lt;InstalledScriptFileName&gt;</ph> to get it.","pos":[15435,15506],"source":"You can also use Get-Command –Name <InstalledScriptFileName> to get it."},{"content":"Two install locations are added to the PATH environment variable on first use of a specified scope.","pos":[15507,15606]},{"content":"Install-Script cmdlet in pipeline operations","pos":[26814,26858]},{"content":"Side-by-Side Version Support on PowerShell 5.0 or newer","pos":[28038,28093]},{"content":"PowerShellGet supports the side-by-side (SxS) module version support in Install-Script, Update-Script, and Publish-Script cmdlets that run in Windows PowerShell 5.0 or newer.","pos":[28095,28269]},{"content":"Install-Script examples","pos":[28275,28298]},{"content":"Install module with its dependencies","pos":[29650,29686]},{"content":"Error scenarios","pos":[35145,35160]},{"content":"Installing a script with dependent scripts and modules","pos":[35778,35832]},{"content":"Install-Script and Get-InstalledScript cmdlets","pos":[39304,39350]},{"content":"Install-Script cmdlet lets you to install a specific script file along with its dependencies to the specified scope.","pos":[39351,39467]},{"content":"By default, scripts are installed to the AllUsers scope.","pos":[39468,39524]},{"content":"Get-InstalledScript cmdlet lets you to get the list of script files which were installed using Install-Script cmdlet.","pos":[39525,39642]},{"content":"Use note: To allow management and locating of scripts once they are installed, Install-script will create a default folder for storing scripts at $home\\Documents\\WindowsPowerShell\\Scripts, and add that folder to your PATH environment.","pos":[39644,39878]},{"content":"If modifying the path is a concern, use Save-Script instead of Install-Script.","pos":[39879,39957]},{"content":"Get-InstalledScripts and Uninstall-Script can only work with scripts placed on the system using Install-Script.","pos":[39958,40069]},{"content":"You can also use Get-Command –Name <ph id=\"ph1\">&lt;InstalledScriptFileName&gt;</ph> to get it.","pos":[43156,43227],"source":"You can also use Get-Command –Name <InstalledScriptFileName> to get it."},{"content":"Two install locations are added to the PATH environment variable on first use of a specified scope.","pos":[43228,43327]}],"content":"# Install-Script\n\nInstalls the PowerShell script files from online repositories to the local computer.\n\n\n## Description\n\nThe Install-Script cmdlet acquires a script payload from a repository, verifies that the payload is a valid PowerShell script, and copies the script file to a specified installation location.\n\nThe default repositories Install-Script operates against are configurable through the Register-PSRepository, Set-PSRepository, Unregister-PSRepository, and Get-PSRepository cmdlets. When operating against multiple repositories, Install-Script installs the first script that matches the specified search criteria (Name, MinimumVersion, or MaximumVersion) from the first repository without any error.\n\n\nInstall-Script cmdlet downloads one or more modules from an online gallery, validates and installs them on the local computer to the specified installation scope.\n\nThe Install-Script cmdlet gets one or more modules that meet specified criteria from an online gallery, verifies that search results are valid modules, and copies module folders to the installation location.\n\nWhen no scope is defined, or when the value of the Scope parameter is AllUsers, the module is installed to %systemdrive%:\\Program Files\\WindowsPowerShell\\Modules. When the value of Scope is CurrentUser, the module is installed to $home\\Documents\\WindowsPowerShell\\Modules.\n\nYou can filter your results based on minimum and exact versions of specified modules.\n\n- No Side-by-side version support for PowerShell Script files\n- Script dependency installation support\n- **Untrusted prompt:** User acceptance is required for installing the modules from an untrusted repository.\n- -Force reinstalls the installed module\n- RequiredVersion installs the specified version in SxS with existing versions on PowerShell version 5.0 or newer.\n\nWildcards are not supported in -Name on Install-Module, Save-Module, Uninstall-Module, Install-Script, Save-Script, and Uninstall-Script cmdlets.\n\n### Scope\nSpecifies the installation scope of the module. The acceptable values for this parameter are: AllUsers and CurrentUser.\n\nThe default installation scope is AllUsers.\n\nThe AllUsers scope lets modules be installed in a location that is accessible to all users of the computer, that is, \"$env:SystemDrive\\Program Files\\WindowsPowerShell\\Modules\".\n\nThe CurrentUser scope lets modules be installed only to \"$home\\Documents\\WindowsPowerShell\\Modules\", so that the module is available only to the current user.\n\n\nSpecifies the installation scope of the script. Valid values are: AllUsers and CurrentUser. The default is CurrentUser.\n\nThe AllUsers scope specifies to install a script to %systemdrive%:\\ProgramFiles\\WindowsPowerShell\\Scripts so that the script is available to all users. The CurrentUser scope specifies to install the script in $home\\Documents\\WindowsPowerShell\\Scripts so that the script is available only to the current user.\n\n\n## NoPathUpdate\n\n- NoPathUpdate switch parameter on Install-Script cmdlet bypasses the prompt for adding the script install location to the PATH environment variable.\n- Any use of the command WITH –NoPathUpdate specified will result in no prompt and the PATH NOT being updated (force is ignorable here).\n- -Force without –NoPathUpdate will result in no prompt and the PATH will be updated.\n- If neither –Force or –NoPathUpdate are specified, the user will see the prompt.\n- All of this only applies the first time Install-Script is used in a given scope.\n\n\n## Notes\n\nThis cmdlet runs on Windows PowerShell 3.0 or later releases of Windows PowerShell, on Windows 7 or Windows 2008 R2 and later releases of Windows.\n\nIf an installed module cannot be imported (that is, if it does not have a .psm1, .psd1, or .dll of the same name within the folder), installation fails unless you add the Force parameter to your command.\n\nIf a version of the module on the computer matches the value specified for the Name parameter, and you have not added the MinimumVersion or RequiredVersion parameter, Install-Script silently continues without installing that module. If the MinimumVersion or RequiredVersion parameters are specified, and the existing module does not match the values in that parameter, then an error occurs. To be more specific: if the version of the currently-installed module is either lower than the value of the MinimumVersion parameter, or not equal to the value of the RequiredVersion parameter, an error occurs. If the version of the installed module is greater than the value of the MinimumVersion parameter, or equal to the value of the RequiredVersion parameter, Install-Script silently continues without installing that module.\n\nInstall-Script returns an error if no module exists in the online gallery that matches the specified name.\n\nTo install multiple modules, specify an array of the module names, separated by commas. You cannot add MinimumVersion or RequiredVersion if you specify multiple module names.\n\nBy default, modules are installed to the Program Files folder, to prevent confusion when you are installing Windows PowerShell Desired State Configuration (DSC) resources.You can pipe multiple PSGetItemInfo objects to Install-Script; this is another way of specifying multiple modules to install in a single command.\n\nTo help prevent running modules that contain malicious code, installed modules are not automatically imported by installation. As a security best practice, evaluate module code before running any cmdlets or functions in a module for the first time.\n\n\n## Cmdlet syntax\n\n```powershell\nGet-Command -Name Install-Script -Module PowerShellGet -Syntax\n```\n\n## Cmdlet online help reference\n\n[Install-Script](http://go.microsoft.com/fwlink/?LinkId=619784)\n\n## Example commands\n\n```powershell\n\n\n# Piping Find-Script output to Install-Script cmdlet\n\nFind-Script -Repository Local1 -Name Required-Script2\n\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n2.5        Required-Script2                    local1               Description for the Required-Script2 script\n\n\nFind-Script -Repository Local1 -Name Required-Script2 | Install-Script\n\nGet-Command Required-Script2\n\nCommandType     Name                                               Version    Source\n-----------     ----                                               -------    ------\nExternalScript  Required-Script2.ps1                                2.0       C:\\Users\\manikb\\Documents\\WindowsPowerShell\\Scripts\\Required-Script2.ps1\n\n\nGet-InstalledScript Required-Script2\n\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n2.5        Required-Script2                    local1               Description for the Required-Script2 script\n\n\nGet-InstalledScript Required-Script2 | fl * -Force\n\n\nName                       : Required-Script2\nVersion                    : 2.5\nType                       : Script\nDescription                : Description for the Required-Script2 script\nAuthor                     : manikb\nCompanyName                :\nCopyright                  : (c) 2015 Microsoft Corporation. All rights reserved.\nPublishedDate              : 8/15/2015 12:42:39 AM\nLicenseUri                 : http://required-script2.com/license\nProjectUri                 : http://required-script2.com/\nIconUri                    : http://required-script2.com/icon\nTags                       : {Tag1, Tag2, Tag-Required-Script2-2.5, PSScript...}\nIncludes                   : {Function, DscResource, Cmdlet, Command}\nPowerShellGetFormatVersion :\nReleaseNotes               : Required-Script2 release notes\nDependencies               : {}\nRepositorySourceLocation   : http://manikb-dev:8765/api/v2/\nRepository                 : local1\nPackageManagementProvider  : NuGet\nInstalledLocation          : C:\\Users\\manikb\\Documents\\WindowsPowerShell\\Scripts\n\n\n# Installing a script to AllUsers scope\n\nInstall-Script -Repository Local1 -Name Required-Script3 -Scope AllUsers\nGet-InstalledScript -Name Required-Script3\n\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n2.5        Required-Script3                    local1               Description for the Required-Script3 script\n\n\nGet-InstalledScript -Name Required-Script3  | fl * -Force\n\n\nName                       : Required-Script3\nVersion                    : 2.5\nType                       : Script\nDescription                : Description for the Required-Script3 script\nAuthor                     : manikb\nCompanyName                :\nCopyright                  : (c) 2015 Microsoft Corporation. All rights reserved.\nPublishedDate              : 8/15/2015 12:42:45 AM\nLicenseUri                 : http://required-script3.com/license\nProjectUri                 : http://required-script3.com/\nIconUri                    : http://required-script3.com/icon\nTags                       : {Tag1, Tag2, Tag-Required-Script3-2.5, PSScript...}\nIncludes                   : {Function, DscResource, Cmdlet, Command}\nPowerShellGetFormatVersion :\nReleaseNotes               : Required-Script3 release notes\nDependencies               : {}\nRepositorySourceLocation   : http://manikb-dev:8765/api/v2/\nRepository                 : local1\nPackageManagementProvider  : NuGet\nInstalledLocation          : C:\\Program Files\\WindowsPowerShell\\Scripts\n\n\n# Installing a script with dependent scripts and modules\n\nFind-Script -Repository Local1 -Name Script-WithDependencies2 -IncludeDependencies\n\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n2.0        Script-WithDependencies2            local1               Description for the Script-WithDependencies2 script\n2.5        RequiredModule1                     local1               RequiredModule1 module\n2.5        RequiredModule2                     local1               RequiredModule2 module\n2.5        RequiredModule3                     local1               RequiredModule3 module\n2.5        Required-Script1                    local1               Description for the Required-Script1 script\n2.5        Required-Script2                    local1               Description for the Required-Script2 script\n2.5        Required-Script3                    local1               Description for the Required-Script3 script\n\n\nInstall-Script -Repository Local1 -Name Script-WithDependencies2\nGet-InstalledScript\n\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n2.5        Required-Script1                    local1               Description for the Required-Script1 script\n2.5        Required-Script2                    local1               Description for the Required-Script2 script\n2.5        Required-Script3                    local1               Description for the Required-Script3 script\n2.0        Script-WithDependencies2            local1               Description for the Script-WithDependencies2 script\n\n\nGet-InstalledModule\n\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n2.5        RequiredModule1                     local1               RequiredModule1 module\n2.5        RequiredModule2                     local1               RequiredModule2 module\n2.5        RequiredModule3                     local1               RequiredModule3 module\n\n\nFind-Script -Repository Local1 -Name Required-Script*\n\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n2.5        Required-Script1                    local1               Description for the Required-Script1 script\n2.5        Required-Script2                    local1               Description for the Required-Script2 script\n2.5        Required-Script3                    local1               Description for the Required-Script3 script\n\n\nInstall-Script -Repository Local1 -Name Required-Script*\n\nGet-InstalledScript\n\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n2.5        Required-Script1                    local1               Description for the Required-Script1 script\n2.5        Required-Script2                    local1               Description for the Required-Script2 script\n2.5        Required-Script3                    local1               Description for the Required-Script3 script\n\n\n# Find a script and install it\n\n# The first command finds the script named Required-Script2 from the Local1 repository and displays the results.\n# The second command finds the Required-Script2 script, and then uses the pipeline operator to pass it to the Install-Script cmdlet to install it.\n# The third command uses the Get-Command cmdlet to get Required-Script2, and then displays the results.\n# The fourth command uses the Get-InstalledScript cmdlet to get Required-Script2 and display the results.\n# The fifth command gets RequiredScript2 and uses the pipeline operator to pass it to the Format-List cmdlet to format the output.\n\nFind-Script -Repository \"Local1\" -Name \"Required-Script2\"\n\nFind-Script -Repository \"Local1\" -Name \"Required-Script2\" | Install-Script\nGet-Command -Name \"Required-Script2\"\n\nGet-InstalledScript -Name \"Required-Script2\"\n\nGet-InstalledScript -Name \"Required-Script2\" | Format-List * \n\n\n# Install a script with AllUsers scope\n\n# The first command installs the script named Required-Script3 and assigns it AllUsers scope.\n# The second command gets the installed script Required-Script3 and displays information about it.\n# The third command gets Required-Script3 and uses the pipeline operator to pass it to the Format-List cmdlet to format the output.\n\nInstall-Script -Repository \"Local1\" -Name \"Required-Script3\" -Scope \"AllUsers\"\nGet-InstalledScript -Name \"Required-Script3\"\nGet-InstalledScript -Name \"Required-Script3\" | Format-List * \n\n\n# Install a script with its dependent scripts and modules\n\n# The first command finds the script named Script-WithDependencies2 and its dependencies in the Local1 repository and displays the results.\n# The second command installs Script-WithDependencies2.\n# The third command uses the Get-InstalledScript script cmdlet to get installed scripts and display the results.\n# The fourth command uses the Get-InstalledModule cmdlet to get installed modules and display the results.\n# The fifth command uses the Find-Script cmdlet to find scripts where the name begins with Required-Script and display the results.\n# The sixth command installs the scripts where the name begins with Required-Script in the Local1 repository. \n# The final command gets installed scripts and displays the results.\n\nFind-Script -Repository \"Local1\" -Name \"Script-WithDependencies2\" -IncludeDependencies\nInstall-Script -Repository \"Local1\" -Name \"Script-WithDependencies2\"\nGet-InstalledScript\nGet-InstalledModule\nFind-Script -Repository \"Local1\" -Name \"Required-Script*\"\nInstall-Script -Repository \"Local1\" -Name \"Required-Script*\"\nGet-InstalledScript\n\n```\n\nYou can also use Get-Command –Name <InstalledScriptFileName> to get it. Two install locations are added to the PATH environment variable on first use of a specified scope.\n```powershell\n$env:Path -split ';'| Where-Object {$\\_} | Select-Object -Last 2\nC:\\\\Program Files\\\\WindowsPowerShell\\\\Scripts\nC:\\\\Users\\\\manikb\\\\Documents\\\\WindowsPowerShell\\\\Scripts\n\nGet-Command Required-Script2\nCommandType Name Version Source\n----------- ---- ------- ------\nExternalScript Required-Script2.ps1 C:\\\\Users\\\\manikb\\\\Documents\\\\WindowsPowerShell\\\\Scripts\\\\Required-Script2.ps1\n```\n\n```powershell\n\n# Install a module by name\nInstall-Script -Name MyDscModule\n\n# Install multiple modules\nInstall-Script ContosoClient,ContosoServer\n\n# Install a module using its minimum version\nInstall-Script -Name ContosoServer -MinimumVersion 1.0\n\n# Install a specific version of a module\nInstall-Script -Name ContosoServer -RequiredVersion 1.1.3\n\n# Install the latest version of a module to $home\\Documents\\WindowsPowerShell\\Modules.\nInstall-Script -Name ContosoServer -Scope CurrentUser\n\n# if a module is already available under $env:PSModulePath, below command fails with 'ModuleAlreadyInstalled,Install-Package,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage'\nInstall-Script ContosoServer -RequiredVersion 1.5\n\n# if a module is already available under $env:PSModulePath, below command fails with 'ModuleAlreadyInstalled,Install-Package,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage'\nInstall-Script ContosoServer -MinimumVersion 2.5\n\n# Install multiple modules from multiple registered repositories\nInstall-Script ContosoClient,ContosoServer -Repository PSGallery, PrivatePSGallery\n\n# Install a module with -WhatIf\nInstall-Script ContosoClient -WhatIf\n\n# Install a module with -Confirm. A prompt will be displayed to confirm the installation.\nInstall-Script ContosoClient -WhatIf\n\n# -Force option reinstalls the installed module\nInstall-Script ContosoClient -Force\n\n# Install a module with dependencies\nInstall-Script -Name \n\n\n# Install a script from the registered repository with ScriptSourceLocation\nInstall-Script Connect-AzureVM\n\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n1.0        Connect-AzureVM                     PSGallery            This runbook sets up a connection to an Azure vi...\n\n# Find multiple scripts\nInstall-Script -Name Connect-AzureVM, Show-Tree, Connect-O365\n\n# Find scripts with wildcards in -Name\nInstall-Script -Name *Azure*\n\n# Find all versions of a script\nInstall-Script -Name Connect-O365 -AllVersions\n\n# Find a script with -MinimumVersion. \n# With MinimumVersion we can find a script whose version is greate than or equal to the specified MinimumVersion value.\nInstall-Script Connect-O365 -MinimumVersion 1.4\n\n# Find a script with MaximumVersion\nInstall-Script -Name Connect-O365 -MaximumVersion 1.6.2\n\n# Find a script with both MinimumVersion and MaximumVersion range.\nInstall-Script -Name Connect-O365 -MinimumVersion 1.1 -MaximumVersion 1.6.2\n\n# Installing a script to default AllUsers scope and with RequiredVersion\nInstall-Script -Name Connect-O365 -RequiredVersion 1.5.7\n\n# Find a script from the specified repository\nInstall-Script -Name Fabrikam-ServerScript -Repository MyLocalRepo\n\n# Find available scripts from all registered repositories\nInstall-Script\n\n# Find available scripts from few registered repositories\nInstall-Script -Repository PSGallery, PrivatePSGallery\n\n```\n\n```powershell\n Added the logic for checking and failing the install script operation when there is a command with same name is already available on the system.\nAlso updated the prompt message.\n\n Examples:\nPS C:\\WINDOWS\\system32> install-script get-childitem -Repository localrepo\ninstall-script : A command with name 'get-childitem' is already available on this system. This script 'get-childitem' may override the existing command. If you still want to install this script 'get-childitem', use -Force parameter.\nAt line:1 char:1\n+ install-script get-childitem -Repository localrepo\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     + CategoryInfo          : InvalidOperation: (:) [Write-Error], WriteErrorException\n     + FullyQualifiedErrorId : CommandAlreadyAvailableWitScriptName,Install-Script\n\n \n \n PS C:\\WINDOWS\\system32> install-script get-childitem,contosos -Repository localrepo\ninstall-script : A command with name 'get-childitem' is already available on this system. This script 'get-childitem' may override the existing command. If you still want to install this script 'get-childitem', use -Force parameter.\nAt line:1 char:1\n+ install-script get-childitem,contosos -Repository localrepo\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     + CategoryInfo          : InvalidOperation: (:) [Write-Error], WriteErrorException\n     + FullyQualifiedErrorId : CommandAlreadyAvailableWitScriptName,Install-Script\n\n PackageManagement\\Install-Package : No match was found for the specified search criteria and script name 'contosos'. Try Get-ScriptRepository to see all available registered script repositories.\nAt C:\\Program Files\\WindowsPowerShell\\Modules\\powershellget\\1.0.0.1\\PSModule.psm1:2891 char:21\n+ ...          $null = PackageManagement\\Install-Package @PSBoundParameters\n+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n     + CategoryInfo          : ObjectNotFound: (Microsoft.Power....InstallPackage:InstallPackage) [Install-Package], Exception\n     + FullyQualifiedErrorId : NoMatchFoundForCriteria,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage\n\n PS C:\\WINDOWS\\system32>\n\n \n \n PS C:\\WINDOWS\\system32> find-script get-childitem -Repository localrepo | install-script\ninstall-script : A command with name 'get-childitem' is already available on this system. This script 'get-childitem' may override the existing command. If you still want to install this script 'get-childitem', use -Force parameter.\nAt line:1 char:51\n+ find-script get-childitem -Repository localrepo | install-script\n+                                                   ~~~~~~~~~~~~~~\n     + CategoryInfo          : InvalidOperation: (:) [Write-Error], WriteErrorException\n     + FullyQualifiedErrorId : CommandAlreadyAvailableWitScriptName,Install-Script\n\n \n PS C:\\WINDOWS\\system32>\n\n PS C:\\WINDOWS\\system32> Install-Package -Name Get-ChildItem -source LocalRepo  -ProviderName powershellget -Type Script\nWARNING: A command with name 'get-childitem' is already available on this system. This script 'get-childitem' may override the existing command. If you still want to install this script 'get-childitem', use -Force parameter.\n\n```\n\n```powershell\n\nPrompt ONCE per USER and per SCOPE for adding the script installation location to PATH environment variable.\n\n- Prompt message for CurrentUser scope: (Complete message will be scrubbed later)\n\nAcceptance required for adding the script installation locations to the PATH environment variable\nThe scripts install location 'C:\\Users\\manikb\\Documents\\WindowsPowerShell\\Scripts' is required to be added to the PATH environment variable in order to execute an installed script with only file name along with its script dependencies. If you accept this prompt, 'C:\\Users\\manikb\\Documents\\WindowsPowerShell\\Scripts' will be added to system specific PATH environment variable and process specific $env:PATH variable, if not already added. Otherwise you will have to use the full file path to  execute an installed script. Alternatively, you can use Save-Script cmdlet to download the script files to your favorite location. This prompt can be avoided and automatically considered as opted-out by adding 'C:\\Users\\manikb\\Documents\\WindowsPowerShell\\Scripts' install location to the PATH environment variable or to the $env:PATH variable of current process. Do you want to continue?\n[Y] Yes  [N] No  [S] Suspend  [?] Help (default is \"Y\"):\n\n\n- Prompt message for –AllUsers scope is same as above with $env:ProgramFiles\\WindowsPowerShell\\Scripts .\n\nAcceptance required for adding the script installation locations to the PATH environment variable\nThe scripts install location 'C:\\Program Files\\WindowsPowerShell\\Scripts' is required to be added to the PATH environment variable in order to execute an installed script with only file name along with its script dependencies. If you accept this prompt, 'C:\\Program Files\\WindowsPowerShell\\Scripts' will be added to system specific PATH environment variable and process specific $env:PATH variable, if not already added. Otherwise you will have to use the full file path to  execute an installed script. Alternatively, you can use Save-Script cmdlet to download the script files to your favorite location. This prompt can be avoided and automatically considered as opted-out by adding 'C:\\Program Files\\WindowsPowerShell\\Scripts' install location to the PATH environment variable or to the $env:PATH variable of current process. Do you want to continue?\n[Y] Yes  [N] No  [S] Suspend  [?] Help (default is \"Y\"):\n\n\n- To prompt only once per scope, user acceptance for PATH variable change will be added to the user specific settings file under %localappdata%\\Microsoft\\windows\\PowerShell\\PowerShellGet\n%localappdata%\\Microsoft\\windows\\PowerShell\\PowerShellGet\\PowerShellGetSettings.XML. \nThis settings file will be used to not prompt again.\n\nAfter prompting for CurrentUser scope: \n    true or false for CurrentUserScope_AllowPATHChangeForScripts key based on user input.\n\nAfter prompting for AllUsers scope: \n    true or false for AllUsersScope_AllowPATHChangeForScripts key based on user input.\n\n- If user accepts the prompt\n                Check and add $home\\Documents\\WindowsPowerShell\\Scripts to user specific PATH environment variable.\n                Check and add $env:ProgramFiles\\WindowsPowerShell\\Scripts to system specific PATH environment variable only when Install-Script cmdlet is used in an administrator process.\n                Check and add above two paths to $env:PATH variable of the current process.\n\n- If user denies the prompt, script installation will be proceeded without making any changes to the PATH environment variable.\n\n\n\nExample:             \nPS C:\\windows\\system32> Install-Script -Name $scriptName -Repository $repositoryName -Scope $Scope -Verbose\n\nAcceptance required for adding the script installation locations to the PATH environment variable\nThe scripts install location 'C:\\Program Files\\WindowsPowerShell\\Scripts' is required to be added to the PATH environment variable in order to execute an installed script with only file name along with its script dependencies. If you accept this prompt, 'C:\\Program Files\\WindowsPowerShell\\Scripts' will be added to system specific PATH environment variable and process specific $env:PATH variable, if not already added. Otherwise you will have to use the full file path to  execute an installed script. Alternatively, you can use Save-Script cmdlet to download the script files to your favorite location. This prompt can be avoided and automatically considered as opted-out by adding 'C:\\Program Files\\WindowsPowerShell\\Scripts' install location to the PATH environment variable or to the $env:PATH variable of current process. Do you want to continue?\n[Y] Yes  [N] No  [S] Suspend  [?] Help (default is \"Y\"): n\n\n\n```\n\n## Install-Script cmdlet in pipeline operations\n\n```powershell\n\n# Find a module and install it\nFind-Script -Name \"MyDSC*\" | Install-Script\n\n# Find a module and install it to the CurrentUser scope\nFind-Script -Name \"MyDSC*\" | Install-Script -Scope CurrentUser\n\n# Find commands by name and install them\n# The first command finds the specified commands in the INT repository, and then uses the pipeline operator to pass them to Install-Script to install them.\n# The second command uses Get-InstalledModule to verify the modules from the prior command are installed.\nFind-Command -Repository \"INT\" -Name Get-ContosoClient,Get-ContosoServer | Install-Script\nGet-InstalledModule\n\n# This command finds the resource named MyResource and passes it to the Install-Script cmdlet by using the pipeline operator. The Install-Script cmdlet installs the module for the resource. \n# If you pipe multiple resources to the Install-Script cmdlet from the same module, Install-Script attempts to install the module only once. \nFind-DscResource -Name \"MyResource\" | Install-Script\nGet-InstalledModule\n\n# Find multiple role capabilities and install them\nFind-RoleCapability -Name MyJeaRole, Maintenance | Install-Script\nGet-InstalledModule\n\n```\n\n## Side-by-Side Version Support on PowerShell 5.0 or newer\n\nPowerShellGet supports the side-by-side (SxS) module version support in Install-Script, Update-Script, and Publish-Script cmdlets that run in Windows PowerShell 5.0 or newer.\n\n### Install-Script examples\n\n```powershell\n# Install a version of the module\nInstall-Script -Name PSScriptAnalyzer -RequiredVersion 1.1.0 -Repository PSGallery\nGet-Script -ListAvailable -Name PSScriptAnalyzer | Format-List Name,Version,ModuleBase\n\nName : PSScriptAnalyzer\nVersion : 1.1.0\nModuleBase : C:\\Program Files\\WindowsPowerShell\\Modules\\PSScriptAnalyzer\\1.1.0\n\n# Install another version of the module in Side-by-Side with already installed version.\nInstall-Script -Name PSScriptAnalyzer -RequiredVersion 1.1.1 -Repository PSGallery\nGet-Script -ListAvailable -Name PSScriptAnalyzer | Format-List Name,Version,ModuleBase\n\nName       : PSScriptAnalyzer \nVersion    : 1.1.1\nModuleBase : C:\\Program Files\\WindowsPowerShell\\Modules\\PSScriptAnalyzer\\1.1.1\nName       : PSScriptAnalyzer\nVersion    : 1.1.0\nModuleBase : C:\\Program Files\\WindowsPowerShell\\Modules\\PSScriptAnalyzer\\1.1.0\n\n# Get all versions of an installed module\nGet-InstalledModule -Name PSScriptAnalyzer -AllVersions\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n1.1.0      PSScriptAnalyzer                    PSGallery            PSScriptAnalyzer provides script analysis...\n1.1.1      PSScriptAnalyzer                    PSGallery            PSScriptAnalyzer provides script analysis...\n\n\n```\n\n## Install module with its dependencies\n\n```powershell\n\n# Find a module\nFind-Module -Name TypePx -Repository PSGallery\n\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n2.0.1.20   TypePx                              PSGallery            The TypePx module adds properties and methods to the m...\n\n# Find a module and its dependencies\nFind-Module -Name TypePx -Repository PSGallery -IncludeDependencies\n\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n2.0.1.20   TypePx                              PSGallery            The TypePx module adds properties and methods to the m...\n1.0.5.18   SnippetPx                           PSGallery            The SnippetPx module enhances the snippet experience i...\n\n# Discover the dependencies list without adding -IncludeDependencies\n$result = Find-Module -Name TypePx -Repository PSGallery\n$result.Dependencies\n\nName                           Value\n----                           -----\nName                           SnippetPx\nCanonicalId                    powershellget:SnippetPx/#https://www.powershellgallery.com/api/v2/\n\n\n# Now install the module along with its dependencies\nInstall-Script -Name TypePx -Repository PSGallery -Verbose\n\nVERBOSE: Repository details, Name = 'PSGallery', Location = 'https://www.powershellgallery.com/api/v2/'; IsTrusted =\n'False'; IsRegistered = 'True'.\nVERBOSE: Using the provider 'PowerShellGet' for searching packages.\nVERBOSE: Using the specified source names : 'PSGallery'.\nVERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.\nVERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2/' and PackageManagementProvider is\n'NuGet'.\nVERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='TypePx'' for ''.\nVERBOSE: Total package yield:'1' for the specified package 'TypePx'.\nVERBOSE: Performing the operation \"Install-Script\" on target \"Version '2.0.1.20' of module 'TypePx'\".\n\nUntrusted repository\nYou are installing the modules from an untrusted repository. If you trust this repository, change its\nInstallationPolicy value by running the Set-PSRepository cmdlet. Are you sure you want to install the modules from\n'PSGallery'?\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"N\"): Y\nVERBOSE: The installation scope is specified to be 'AllUsers'.\nVERBOSE: The specified module will be installed in 'C:\\Program Files\\WindowsPowerShell\\Modules'.\nVERBOSE: The specified Location is 'NuGet' and PackageManagementProvider is 'NuGet'.\nVERBOSE: Downloading module 'TypePx' with version '2.0.1.20' from the repository\n'https://www.powershellgallery.com/api/v2/'.\nVERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='TypePx'' for ''.\nVERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='SnippetPx'' for ''.\nVERBOSE: InstallPackage' - name='SnippetPx',\nversion='1.0.5.18',destination='C:\\Users\\manikb\\AppData\\Local\\Temp\\1027042896'\nVERBOSE: DownloadPackage' - name='SnippetPx',\nversion='1.0.5.18',destination='C:\\Users\\manikb\\AppData\\Local\\Temp\\1027042896\\SnippetPx\\SnippetPx.nupkg',\nuri='https://www.powershellgallery.com/api/v2/package/SnippetPx/1.0.5.18'\nVERBOSE: Downloading 'https://www.powershellgallery.com/api/v2/package/SnippetPx/1.0.5.18'.\nVERBOSE: Completed downloading 'https://www.powershellgallery.com/api/v2/package/SnippetPx/1.0.5.18'.\nVERBOSE: Completed downloading 'SnippetPx'.\nVERBOSE: Hash for package 'SnippetPx' does not match hash provided from the server.\nVERBOSE: InstallPackageLocal' - name='SnippetPx',\nversion='1.0.5.18',destination='C:\\Users\\manikb\\AppData\\Local\\Temp\\1027042896'\nVERBOSE: InstallPackage' - name='TypePx',\nversion='2.0.1.20',destination='C:\\Users\\manikb\\AppData\\Local\\Temp\\1027042896'\nVERBOSE: DownloadPackage' - name='TypePx',\nversion='2.0.1.20',destination='C:\\Users\\manikb\\AppData\\Local\\Temp\\1027042896\\TypePx\\TypePx.nupkg',\nuri='https://www.powershellgallery.com/api/v2/package/TypePx/2.0.1.20'\nVERBOSE: Downloading 'https://www.powershellgallery.com/api/v2/package/TypePx/2.0.1.20'.\nVERBOSE: Completed downloading 'https://www.powershellgallery.com/api/v2/package/TypePx/2.0.1.20'.\nVERBOSE: Completed downloading 'TypePx'.\nVERBOSE: Hash for package 'TypePx' does not match hash provided from the server.\nVERBOSE: InstallPackageLocal' - name='TypePx',\nversion='2.0.1.20',destination='C:\\Users\\manikb\\AppData\\Local\\Temp\\1027042896'\nVERBOSE: Installing the dependency module 'SnippetPx' with version '1.0.5.18' for the module 'TypePx'.\nVERBOSE: Module 'SnippetPx' was installed successfully to path 'C:\\Program\nFiles\\WindowsPowerShell\\Modules\\SnippetPx\\1.0.5.18'.\nVERBOSE: Module 'TypePx' was installed successfully to path 'C:\\Program\nFiles\\WindowsPowerShell\\Modules\\TypePx\\2.0.1.20'.\n\n\n# Get the installed modules\nGet-InstalledModule\n\nVersion    Name                                Repository           Description\n-------    ----                                ----------           -----------\n1.0.5.18   SnippetPx                           PSGallery            The SnippetPx module enhances the snippet experience i...\n2.0.1.20   TypePx                              PSGallery            The TypePx module adds properties and methods to the m...\n\n```\n\n## Error scenarios\n\n```powershell\n\n# Below command fails with 'NameShouldNotContainWildcardCharacters,Install-Script'\nInstall-Script ContosoServe*\n\n# Below command fails with 'VersionRangeAndRequiredVersionCannotBeSpecifiedTogether,Install-Script'\nInstall-Script ContosoServer -MinimumVersion 1.0 -RequiredVersion 5.0\n\n# Below command fails with 'VersionParametersAreAllowedOnlyWithSingleName,Install-Script'\nInstall-Script ContosoClient,ContosoServer -RequiredVersion 2.0\n\n# Below command fails with 'VersionParametersAreAllowedOnlyWithSingleName,Install-Script'\nInstall-Script ContosoClient,ContosoServer -MinimumVersion 2.0\n\n```\n\n## Installing a script with dependent scripts and modules\n\n```powershell\n# Installing a script with dependent scripts and modules\nFind-Script -Repository GalleryINT -Name Script-WithDependencies2 -IncludeDependencies\nVersion Name Type Repository Description\n------- ---- ---- ---------- -----------\n2.0 Script-WithDependencies2 Script GalleryINT Description for the Script-WithDependencies2 script\n2.5 RequiredModule1 Module GalleryINT RequiredModule1 module\n2.5 RequiredModule2 Module GalleryINT RequiredModule2 module\n2.5 RequiredModule3 Module GalleryINT RequiredModule3 module\n2.0 RequiredModule4 Module GalleryINT RequiredModule4 module\n1.5 RequiredModule5 Module GalleryINT RequiredModule5 module\n2.5 Required-Script1 Script GalleryINT Description for the Required-Script1 script\n2.5 Required-Script2 Script GalleryINT Description for the Required-Script2 script\n2.5 Required-Script3 Script GalleryINT Description for the Required-Script3 script\n\nGet-InstalledScript\nVersion Name Type Repository Description\n------- ---- ---- ---------- -----------\n2.0 Required-Script3 Script GalleryINT Description for the Required-Script3 script\n1.0 Demo-Script Script LocalRepo1 Script file description goes here\n2.5 Required-Script2 Script GalleryINT Description for the Required-Script2 script\nGet-InstalledModule\nInstall-Script -Repository GalleryINT -Name Script-WithDependencies2 -Scope CurrentUser\nGet-InstalledScript\nVersion Name Type Repository Description\n------- ---- ---- ---------- -----------\n2.0 Required-Script3 Script GalleryINT Description for the Required-Script3 script\n1.0 Demo-Script Script LocalRepo1 Script file description goes here\n2.5 Required-Script1 Script GalleryINT Description for the Required-Script1 script\n2.5 Required-Script2 Script GalleryINT Description for the Required-Script2 script\n2.0 Script-WithDependencies2 Script GalleryINT Description for the Script-WithDependencies2 script\nGet-InstalledModule\nVersion Name Type Repository Description\n------- ---- ---- ---------- -----------\n2.5 RequiredModule1 Module GalleryINT RequiredModule1 module\n2.5 RequiredModule2 Module GalleryINT RequiredModule2 module\n2.5 RequiredModule3 Module GalleryINT RequiredModule3 module\n2.0 RequiredModule4 Module GalleryINT RequiredModule4 module\n1.5 RequiredModule5 Module GalleryINT RequiredModule5 module\n\n# Contents of Script-WithDependencies2 file.\n<#PSScriptInfo\n.VERSION 2.0\n.GUID 90082fa1-0b84-49fb-a00e-0a624fbb6584\n.AUTHOR manikb\n.COMPANYNAME Microsoft Corporation\n.COPYRIGHT (c) 2015 Microsoft Corporation. All rights reserved.\n.TAGS Tag1 Tag2 Tag-Script-WithDependencies2-2.0\n.LICENSEURI http://script-withdependencies2.com/license\n.PROJECTURI http://script-withdependencies2.com/\n.ICONURI http://script-withdependencies2.com/icon\n.EXTERNALMODULEDEPENDENCIES\n.REQUIREDSCRIPTS Required-Script1,Required-Script2,Required-Script3\n.EXTERNALSCRIPTDEPENDENCIES\n.RELEASENOTES\nScript-WithDependencies2 release notes\n#>\n#Requires -Module RequiredModule1\n#Requires -Module @{ModuleName = 'RequiredModule2'; ModuleVersion = '2.0'}\n#Requires -Module @{RequiredVersion = '2.5'; ModuleName = 'RequiredModule3'}\n#Requires -Module @{ModuleVersion = '1.1'; ModuleName = 'RequiredModule4'; MaximumVersion = '2.0'}\n#Requires -Module @{MaximumVersion = '1.5'; ModuleName = 'RequiredModule5'}\n<#\n.DESCRIPTION\nDescription for the Script-WithDependencies2 script\n#>\nParam()\nFunction Test-FunctionFromScript\\_Script-WithDependencies2 { Get-Date }\nWorkflow Test-WorkflowFromScript\\_Script-WithDependencies2 { Get-Date }\n```\n\n## Install-Script and Get-InstalledScript cmdlets\nInstall-Script cmdlet lets you to install a specific script file along with its dependencies to the specified scope. By default, scripts are installed to the AllUsers scope. Get-InstalledScript cmdlet lets you to get the list of script files which were installed using Install-Script cmdlet.\n\nUse note: To allow management and locating of scripts once they are installed, Install-script will create a default folder for storing scripts at $home\\Documents\\WindowsPowerShell\\Scripts, and add that folder to your PATH environment. If modifying the path is a concern, use Save-Script instead of Install-Script. Get-InstalledScripts and Uninstall-Script can only work with scripts placed on the system using Install-Script.\n```powershell\n# Install locations for scripts:\n# Default scope is AllUsers.\n# AllUsers scope --> \"$env:ProgramFiles\\\\WindowsPowerShell\\\\Scripts\"\n# CurrentUser scope -->; \"$env:USERPROFILE\\\\Documents\\\\WindowsPowerShell\\\\Scripts\"\n\n# Piping Find-Script output to Install-Script cmdlet\nFind-Script -Repository GalleryINT -Name Required-Script2 | Install-Script -Scope CurrentUser -Verbose\nVERBOSE: Repository details, Name = 'GalleryINT', Location = 'https://customgallery.cloudapp.net/api/v2/'; IsTrusted = 'True'; IsRegistered = 'True'.\nVERBOSE: Performing the operation \"Install-Script\" on target \"Version '2.5' of script 'Required-Script2'\".\nVERBOSE: Using the provider 'PowerShellGet' for searching packages.\nVERBOSE: Using the specified source names : 'GalleryINT'.\nVERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.\nVERBOSE: The specified Location is 'https://customgallery.cloudapp.net/api/v2/items/psscript/' and PackageManagementProvider is 'NuGet'.\nVERBOSE: Searching repository 'https://customgallery.cloudapp.net/api/v2/items/psscript/FindPackagesById()?id='Required-Script2'' for ''.\nVERBOSE: Total package yield:'1' for the specified package 'Required-Script2'.\nVERBOSE: Performing the operation \"Install-Script\" on target \"Version '2.5' of script 'Required-Script2'\".\nVERBOSE: The installation scope is specified to be 'CurrentUser'.\nVERBOSE: The specified script will be installed in 'C:\\\\Users\\\\manikb\\\\Documents\\\\WindowsPowerShell\\\\Scripts' and its dependent modules will be installed in\n'C:\\\\Users\\\\manikb\\\\Documents\\\\WindowsPowerShell\\\\Modules'.\nVERBOSE: The specified Location is 'NuGet' and PackageManagementProvider is 'NuGet'.\nVERBOSE: Downloading script 'Required-Script2' with version '2.5' from the repository 'https://customgallery.cloudapp.net/api/v2/items/psscript/'.\nVERBOSE: Script 'Required-Script2' was installed successfully.\n\nGet-InstalledScript Required-Scri\\*\nVersion Name Type Repository Description\n------- ---- ---- ---------- -----------\n2.5 Required-Script2 Script GalleryINT Description for the Required-Script2 script\n\nGet-InstalledScript Required-Script2 | Format-List \\* -Force\nName : Required-Script2\nVersion : 2.5\nType : Script\nDescription : Description for the Required-Script2 script\nAuthor : manikb\nCompanyName :\nCopyright : (c) 2015 Microsoft Corporation. All rights reserved.\nPublishedDate : 10/30/2015 1:25:15 AM\nLicenseUri : http://required-script2.com/license\nProjectUri : http://required-script2.com/\nIconUri : http://required-script2.com/icon\nTags : {Tag1, Tag2, Tag-Required-Script2-2.5, PSScript}\nIncludes : {Function, DscResource, Cmdlet, Workflow...}\nPowerShellGetFormatVersion :\nReleaseNotes : Required-Script2 release notes\nDependencies : {}\nRepositorySourceLocation : https://customgallery.cloudapp.net/api/v2/\nRepository : GalleryINT\nPackageManagementProvider : NuGet\nAdditionalMetadata : {Type, releaseNotes, copyright, PackageManagementProvider...}\nInstalledLocation : C:\\\\Users\\\\manikb\\\\Documents\\\\WindowsPowerShell\\\\Scripts\n\nInstalled script file is immediately available for usage.\n```\n\nYou can also use Get-Command –Name <InstalledScriptFileName> to get it. Two install locations are added to the PATH environment variable on first use of a specified scope.\n```powershell\n$env:Path -split ';'| Where-Object {$\\_} | Select-Object -Last 2\nC:\\\\Program Files\\\\WindowsPowerShell\\\\Scripts\nC:\\\\Users\\\\manikb\\\\Documents\\\\WindowsPowerShell\\\\Scripts\n\nGet-Command Required-Script2\nCommandType Name Version Source\n----------- ---- ------- ------\nExternalScript Required-Script2.ps1 C:\\\\Users\\\\manikb\\\\Documents\\\\WindowsPowerShell\\\\Scripts\\\\Required-Script2.ps1\n\nFind-Script -Repository LocalRepo1 -Name Demo-Script\nVersion Name Type Repository Description\n------- ---- ---- ---------- -----------\n1.0 Demo-Script Script LocalRepo1 Script file description goes here\n\nFind-Script -Repository LocalRepo1 -Name Demo-Script | Install-Script -Scope CurrentUser\nUntrusted repository\nYou are installing the scripts from an untrusted repository. If you trust this repository, change its InstallationPolicy value by running the Set-PSRepository cmdlet. Are you sure you want to install the scripts from 'C:\\\\MyLocalRepo'?\n[Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is \"N\"): Y\n\nGet-InstalledScript Demo-Script\nVersion Name Type Repository Description\n------- ---- ---- ---------- -----------\n1.0 Demo-Script Script LocalRepo1 Script file description goes here\n\nGet-Command Demo-Script\nCommandType Name Version Source\n----------- ---- ------- ------\nExternalScript Demo-Script.ps1 C:\\\\Users\\\\manikb\\\\Documents\\\\WindowsPowerShell\\\\Scripts\\\\Demo-Script.ps1\n\n# Using the installed script\nDemo-Script\nDemo-ScriptFunction\nDemo-ScriptWorkflow\n\n# Installing a script to default AllUsers scope and with RequiredVersion\nInstall-Script -Repository GalleryINT -Name Required-Script3 -RequiredVersion 2.0\nGet-InstalledScript -Name Required-Script3\n\nVersion Name Type Repository Description\n------- ---- ---- ---------- -----------\n2.0 Required-Script3 Script GalleryINT Description for the Required-Script3 script\nGet-InstalledScript -Name Required-Script3 | Format-List Name,InstalledLocation -Force\nName : Required-Script3\nInstalledLocation : C:\\\\Program Files\\\\WindowsPowerShell\\\\Scripts\n\nGet-Command Required-Script3\nCommandType Name Version Source\n----------- ---- ------- ------\nExternalScript Required-Script3.ps1 C:\\\\Program Files\\\\WindowsPowerShell\\\\Scripts\\\\Required-Script3.ps1\n\n# Installing a script with dependent scripts and modules\nFind-Script -Repository GalleryINT -Name Script-WithDependencies2 -IncludeDependencies\nVersion Name Type Repository Description\n------- ---- ---- ---------- -----------\n2.0 Script-WithDependencies2 Script GalleryINT Description for the Script-WithDependencies2 script\n2.5 RequiredModule1 Module GalleryINT RequiredModule1 module\n2.5 RequiredModule2 Module GalleryINT RequiredModule2 module\n2.5 RequiredModule3 Module GalleryINT RequiredModule3 module\n2.0 RequiredModule4 Module GalleryINT RequiredModule4 module\n1.5 RequiredModule5 Module GalleryINT RequiredModule5 module\n2.5 Required-Script1 Script GalleryINT Description for the Required-Script1 script\n2.5 Required-Script2 Script GalleryINT Description for the Required-Script2 script\n2.5 Required-Script3 Script GalleryINT Description for the Required-Script3 script\n\nGet-InstalledScript\nVersion Name Type Repository Description\n------- ---- ---- ---------- -----------\n2.0 Required-Script3 Script GalleryINT Description for the Required-Script3 script\n1.0 Demo-Script Script LocalRepo1 Script file description goes here\n2.5 Required-Script2 Script GalleryINT Description for the Required-Script2 script\nGet-InstalledModule\nInstall-Script -Repository GalleryINT -Name Script-WithDependencies2 -Scope CurrentUser\nGet-InstalledScript\nVersion Name Type Repository Description\n------- ---- ---- ---------- -----------\n2.0 Required-Script3 Script GalleryINT Description for the Required-Script3 script\n1.0 Demo-Script Script LocalRepo1 Script file description goes here\n2.5 Required-Script1 Script GalleryINT Description for the Required-Script1 script\n2.5 Required-Script2 Script GalleryINT Description for the Required-Script2 script\n2.0 Script-WithDependencies2 Script GalleryINT Description for the Script-WithDependencies2 script\nGet-InstalledModule\nVersion Name Type Repository Description\n------- ---- ---- ---------- -----------\n2.5 RequiredModule1 Module GalleryINT RequiredModule1 module\n2.5 RequiredModule2 Module GalleryINT RequiredModule2 module\n2.5 RequiredModule3 Module GalleryINT RequiredModule3 module\n2.0 RequiredModule4 Module GalleryINT RequiredModule4 module\n1.5 RequiredModule5 Module GalleryINT RequiredModule5 module\n\n# Contents of Script-WithDependencies2 file.\n<#PSScriptInfo\n.VERSION 2.0\n.GUID 90082fa1-0b84-49fb-a00e-0a624fbb6584\n.AUTHOR manikb\n.COMPANYNAME Microsoft Corporation\n.COPYRIGHT (c) 2015 Microsoft Corporation. All rights reserved.\n.TAGS Tag1 Tag2 Tag-Script-WithDependencies2-2.0\n.LICENSEURI http://script-withdependencies2.com/license\n.PROJECTURI http://script-withdependencies2.com/\n.ICONURI http://script-withdependencies2.com/icon\n.EXTERNALMODULEDEPENDENCIES\n.REQUIREDSCRIPTS Required-Script1,Required-Script2,Required-Script3\n.EXTERNALSCRIPTDEPENDENCIES\n.RELEASENOTES\nScript-WithDependencies2 release notes\n#>\n#Requires -Module RequiredModule1\n#Requires -Module @{ModuleName = 'RequiredModule2'; ModuleVersion = '2.0'}\n#Requires -Module @{RequiredVersion = '2.5'; ModuleName = 'RequiredModule3'}\n#Requires -Module @{ModuleVersion = '1.1'; ModuleName = 'RequiredModule4'; MaximumVersion = '2.0'}\n#Requires -Module @{MaximumVersion = '1.5'; ModuleName = 'RequiredModule5'}\n<#\n.DESCRIPTION\nDescription for the Script-WithDependencies2 script\n#>\nParam()\nFunction Test-FunctionFromScript\\_Script-WithDependencies2 { Get-Date }\nWorkflow Test-WorkflowFromScript\\_Script-WithDependencies2 { Get-Date }\n```\n"}