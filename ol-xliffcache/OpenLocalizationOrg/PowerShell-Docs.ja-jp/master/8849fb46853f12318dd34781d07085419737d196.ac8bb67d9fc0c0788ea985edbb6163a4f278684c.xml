{"nodes":[{"content":"Generate PowerShell Cmdlets based on OData Endpoint","pos":[2,53]},{"content":"Generate Windows PowerShell cmdlets based on an OData endpoint","pos":[54,116]},{"pos":[181,335],"content":"<bpt id=\"p1\">**</bpt>Export-ODataEndpointProxy<ept id=\"p1\">**</ept> is a cmdlet that generates a set of Windows PowerShell cmdlets based on the functionality exposed by a given OData endpoint.","source":"**Export-ODataEndpointProxy** is a cmdlet that generates a set of Windows PowerShell cmdlets based on the functionality exposed by a given OData endpoint."},{"content":"The following example shows how to use this new cmdlet:","pos":[337,392]},{"content":"\\# Basic use case of Export-ODataEndpointProxy","pos":[394,440]},{"content":"There are still parts of key use cases in development for this functionality, including, but not limited to:","pos":[1576,1684]},{"content":"Associations","pos":[1689,1701]},{"content":"Passing streams","pos":[1706,1721]},{"content":"Generate Windows PowerShell cmdlets based on an OData endpoint with ODataUtils","pos":[1723,1801]},{"content":"The ODataUtils module allows generation of Windows PowerShell cmdlets from REST endpoints that support OData.","pos":[1881,1990]},{"content":"The following incremental enhancements are in the Microsoft.PowerShell.ODataUtils Windows PowerShell module.","pos":[1991,2099]},{"content":"Channel additional information from server-side endpoint to client side.","pos":[2104,2176]},{"content":"Client-side paging support","pos":[2181,2207]},{"content":"Server-side filtering by using the -Select parameter","pos":[2212,2264]},{"content":"Support for web request headers","pos":[2269,2300]},{"content":"The proxy cmdlets generated by the Export-ODataEndPointProxy cmdlet provide additional information (not mentioned in the $metadata used during the client-side proxy generation) from the server side OData endpoint on the Information stream (a new Windows PowerShell 5.0 feature).","pos":[2302,2580]},{"content":"Here is an example of how to get that information.","pos":[2581,2631]},{"content":"You can get the records from the server side in batches by using client-side paging support.","pos":[3756,3848]},{"content":"This is useful when you must get a large amount of data from the server over the network.","pos":[3849,3938]},{"content":"The generated proxy cmdlets support the –Select parameter which you can use as a filter to receive only the record properties that the client needs.","pos":[4265,4413]},{"content":"This reduces the amount of data that is transferred over the network, because the filtering occurs on the server side.","pos":[4414,4532]},{"content":"The Export-ODataEndpointProxy cmdlet, and the proxy cmdlets generated by it, now support the Headers parameter (supply values as a hash table), which you can use to channel any additional information that is expected by the server-side OData endpoint.","pos":[4735,4986]},{"content":"In the following example, you can channel a Subscription key through Headers for services that are expecting a Subscription key for authentication.","pos":[4987,5134]}],"content":"# Generate PowerShell Cmdlets based on OData Endpoint\nGenerate Windows PowerShell cmdlets based on an OData endpoint\n--------------------------------------------------------------\n\n**Export-ODataEndpointProxy** is a cmdlet that generates a set of Windows PowerShell cmdlets based on the functionality exposed by a given OData endpoint.\n\nThe following example shows how to use this new cmdlet:\n\n\\# Basic use case of Export-ODataEndpointProxy\n\n```powershell\nExport-ODataEndpointProxy -Uri 'http://services.odata.org/v3/(S(snyobsk1hhutkb2yulwldgf1))/odata/odata.svc' -OutputModule C:\\Users\\user\\Generated.psd1\n\nipmo 'C:\\Users\\user\\Generated.psd1'\n# Cmdlets are created based on the following heuristics\n# New-<EntityType> -<Key> [-<Other Attributes>]\n#\n# Get-<EntityType> [-<Key> -Top –Skip –Filter -OrderBy]\n# # If there is a complex key, the keys will actually be -<Key1> -<Key2>…\n# # Note this rule applies to any other instances of the key\n#\n# Set-<EntityType> -<Key> [-<Other Attributes>]\n#\n# Remove-<EntityType> -<Key>\n#\n# Invoke-<EntityType><Action> [-<Key> -<Other Parameters>]\n#\n#\n# Cmdlets from associations (Note: Get and Remove get additional parameter sets)\n# Get-<EntityType> -<AssociatedEntity>\n# New-<EntityType> -<AssociatedEntity> -<Key>\n# Remove-<EntityType> -<AssociatedEntity> -<Key>\n#\n#\n# Note: Every cmdlet has the –ConnectionURI parameter for explicitly setting the URI of the endpoint. This normally uses the same address that you gave the Export-ODataEndpointProxy cmdlet, but can be overridden in this fashion for the sake of similar endpoints.\n#\n```\n\nThere are still parts of key use cases in development for this functionality, including, but not limited to:\n-   Associations\n-   Passing streams\n\nGenerate Windows PowerShell cmdlets based on an OData endpoint with ODataUtils\n------------------------------------------------------------------------------\nThe ODataUtils module allows generation of Windows PowerShell cmdlets from REST endpoints that support OData. The following incremental enhancements are in the Microsoft.PowerShell.ODataUtils Windows PowerShell module.\n-   Channel additional information from server-side endpoint to client side.\n-   Client-side paging support\n-   Server-side filtering by using the -Select parameter\n-   Support for web request headers\n\nThe proxy cmdlets generated by the Export-ODataEndPointProxy cmdlet provide additional information (not mentioned in the $metadata used during the client-side proxy generation) from the server side OData endpoint on the Information stream (a new Windows PowerShell 5.0 feature). Here is an example of how to get that information.\n```powershell\nImport-Module Microsoft.PowerShell.ODataUtils -Force\n$generatedProxyModuleDir = Join-Path -Path $env:SystemDrive -ChildPath 'ODataDemoProxy'\n$uri = \"http://services.odata.org/V3/(S(fhleiief23wrm5a5nhf542q5))/OData/OData.svc/\"\nExport-ODataEndpointProxy -Uri $uri -OutputModule $generatedProxyModuleDir -Force -AllowUnSecureConnection -Verbose -AllowClobber\nImport-Module $generatedProxyModuleDir -Force\n\n# In the below command, we are retrieving top 1 product.\n# By specifying -IncludeTotalResponseCount parameter,\n# we are getting the total count of all the Product records\n# available on the server side. This information\n# is surfaced on the client side through the Information stream.\n$product = Get-Product -Top 1 -AllowUnsecureConnection -AllowAdditionalData -IncludeTotalResponseCount -InformationVariable infoStream\n# The Information stream contains the additional\n# information sent from the server side.\n$additionalInfo = $infoStream.GetEnumerator() | % MessageData\n# 'Odata.Count' indicates the total product records\n# available on the server side Odata endpoint.\n$additionalInfo['odata.count']\n```\n\nYou can get the records from the server side in batches by using client-side paging support. This is useful when you must get a large amount of data from the server over the network.\n```powershell\n$skipCount = 0\n$batchSize = 3\n# Client-Side Paging Support: The records from the server side\n# are retrieved in batches of $batchSize\nwhile($skipCount -le $additionalInfo['odata.count'])\n{\nGet-Product -AllowUnsecureConnection -AllowAdditionalData -Top $batchSize -Skip $skipCount\n$skipCount += $batchSize\n}\n```\n\nThe generated proxy cmdlets support the –Select parameter which you can use as a filter to receive only the record properties that the client needs. This reduces the amount of data that is transferred over the network, because the filtering occurs on the server side.\n```powershell\n# In the below example only the Name property of the\n# Product record is retrieved from the server side.\nGet-Product -Top 2 -AllowUnsecureConnection -AllowAdditionalData -Select Name\n```\n\nThe Export-ODataEndpointProxy cmdlet, and the proxy cmdlets generated by it, now support the Headers parameter (supply values as a hash table), which you can use to channel any additional information that is expected by the server-side OData endpoint. In the following example, you can channel a Subscription key through Headers for services that are expecting a Subscription key for authentication.\n```powershell\n# As an example, in the below command 'XXXX' is the authentication used by the\n# Export-ODataEndpointProxy cmdlet to interact with the server-side\n# OData endpoint accessed through $endPointUri.\n\nExport-ODataEndpointProxy -Uri $endPointUri -OutputModule $generatedProxyModuleDir -Force -AllowUnSecureConnection -Verbose -Headers @{'subscription-key'='XXXX'}\n```\n"}