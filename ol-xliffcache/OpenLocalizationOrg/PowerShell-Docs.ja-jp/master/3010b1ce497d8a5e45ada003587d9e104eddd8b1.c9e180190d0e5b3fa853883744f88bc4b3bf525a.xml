{"nodes":[{"content":"Creating Custom Types using PowerShell Classes","pos":[2,48]},{"content":"We’ve improved the PowerShell language for defining classes and other user-defined types by using formal syntax and semantics that are similar to other object-oriented programming languages.","pos":[50,240]},{"content":"The goal is to enable developers and IT professionals to embrace PowerShell for a wider range of use cases, simplify development of PowerShell artifacts (such as DSC resources), and accelerate coverage of management surfaces.","pos":[241,466]},{"content":"Supported scenarios in this release","pos":[471,506]},{"content":"Define DSC resources and their associated types by using the PowerShell language","pos":[512,592]},{"content":"Define custom types in PowerShell by using familiar object-oriented programming constructs, such as classes, properties, methods, etc.","pos":[597,731]},{"content":"Inheritance support with class in PowerShell and class base DSC resource","pos":[736,808]},{"content":"Debug types by using the PowerShell language","pos":[813,857]},{"content":"Generate and handle exceptions by using formal mechanisms, and at the right level","pos":[862,943]}],"content":"# Creating Custom Types using PowerShell Classes\n\nWe’ve improved the PowerShell language for defining classes and other user-defined types by using formal syntax and semantics that are similar to other object-oriented programming languages. The goal is to enable developers and IT professionals to embrace PowerShell for a wider range of use cases, simplify development of PowerShell artifacts (such as DSC resources), and accelerate coverage of management surfaces.\n\n## Supported scenarios in this release\n\n-   Define DSC resources and their associated types by using the PowerShell language\n-   Define custom types in PowerShell by using familiar object-oriented programming constructs, such as classes, properties, methods, etc.\n-   Inheritance support with class in PowerShell and class base DSC resource\n-   Debug types by using the PowerShell language\n-   Generate and handle exceptions by using formal mechanisms, and at the right level"}