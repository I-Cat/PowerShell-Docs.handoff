{"nodes":[{"pos":[13,32],"content":"Troubleshooting DSC","needQuote":true,"nodes":[{"content":"Troubleshooting DSC","pos":[0,19]}]},{"pos":[65,79],"content":"powershell,DSC","needQuote":true,"nodes":[{"content":"powershell,DSC","pos":[0,14]}]},{"content":"Troubleshooting DSC","pos":[177,196]},{"content":"Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0","pos":[199,257]},{"content":"This topic describes ways to troubleshoot DSC when problems arise.","pos":[259,325]},{"content":"Using Get-DscConfigurationStatus","pos":[330,362]},{"content":"The <bpt id=\"p1\">[</bpt>Get-DscConfigurationStatus<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/mt517868.aspx)</ept> cmdlet gets information about configuration status from a target node.","pos":[364,526],"source":"The [Get-DscConfigurationStatus](https://technet.microsoft.com/en-us/library/mt517868.aspx) cmdlet gets information about configuration status from a target node."},{"content":"A rich object is returned that includes high-level information about whether or not the configuration run was successful or not.","pos":[527,656],"source":" \nA rich object is returned that includes high-level information about whether or not the configuration run was successful or not."},{"content":"You can dig into the object to discover details about the configuration run such as:","pos":[657,741]},{"content":"All of the resources that failed","pos":[745,777]},{"content":"Any resource that requested a reboot","pos":[780,816]},{"content":"Meta-Configuration settings at time of configuration run","pos":[819,875]},{"content":"Etc.","pos":[878,882]},{"content":"The following parameter set returns the status information for the last configuration run:","pos":[884,974]},{"content":"The following parameter set returns the status information for all previous configuration runs:","pos":[1191,1286]},{"content":"Example","pos":[1541,1548]},{"content":"My script won’t run: Using DSC logs to diagnose script errors","pos":[2807,2868]},{"content":"Like all Windows software, DSC records errors and events in <bpt id=\"p1\">[</bpt>logs<ept id=\"p1\">](https://msdn.microsoft.com/library/windows/desktop/aa363632.aspx)</ept> that can be viewed from the <bpt id=\"p2\">[</bpt>Event Viewer<ept id=\"p2\">](http://windows.microsoft.com/windows/what-information-event-logs-event-viewer)</ept>.","pos":[2870,3125],"source":"Like all Windows software, DSC records errors and events in [logs](https://msdn.microsoft.com/library/windows/desktop/aa363632.aspx) that can be viewed from the [Event Viewer](http://windows.microsoft.com/windows/what-information-event-logs-event-viewer)."},{"content":"Examining these logs can help you understand why a particular operation failed, and how to prevent failure in the future.","pos":[3126,3247]},{"content":"Writing configuration scripts can be tricky, so to make tracking errors easier as you author, use the DSC Log resource to track the progress of your configuration in the DSC Analytic event log.","pos":[3248,3441]},{"content":"Where are DSC event logs?","pos":[3446,3471]},{"pos":[3473,3589],"content":"In Event Viewer, DSC events are in: <bpt id=\"p1\">**</bpt>Applications and Services Logs/Microsoft/Windows/Desired State Configuration<ept id=\"p1\">**</ept>","source":"In Event Viewer, DSC events are in: **Applications and Services Logs/Microsoft/Windows/Desired State Configuration**"},{"pos":[3591,3736],"content":"The corresponding PowerShell cmdlet, <bpt id=\"p1\">[</bpt>Get-WinEvent<ept id=\"p1\">](https://technet.microsoft.com/library/hh849682.aspx)</ept>, can also be run to view the event logs:","source":"The corresponding PowerShell cmdlet, [Get-WinEvent](https://technet.microsoft.com/library/hh849682.aspx), can also be run to view the event logs:"},{"content":"As shown above, DSC’s primary log name is <bpt id=\"p1\">**</bpt>Microsoft-&gt;Windows-&gt;DSC<ept id=\"p1\">**</ept> (other log names under Windows are not shown here for brevity).","pos":[4266,4399],"source":"As shown above, DSC’s primary log name is **Microsoft->Windows->DSC** (other log names under Windows are not shown here for brevity)."},{"content":"The primary name is appended to the channel name to create the complete log name.","pos":[4400,4481]},{"content":"The DSC engine writes mainly into three types of logs: <bpt id=\"p1\">[</bpt>Operational, Analytic, and Debug logs<ept id=\"p1\">](https://technet.microsoft.com/library/cc722404.aspx)</ept>.","pos":[4482,4630],"source":" The DSC engine writes mainly into three types of logs: [Operational, Analytic, and Debug logs](https://technet.microsoft.com/library/cc722404.aspx)."},{"content":"Since the analytic and debug logs are turned off by default, you should enable them in Event Viewer.","pos":[4631,4731]},{"content":"To do this, open Event Viewer by typing Show-EventLog in Windows PowerShell; or, click the <bpt id=\"p1\">**</bpt>Start<ept id=\"p1\">**</ept> button, click <bpt id=\"p2\">**</bpt>Control Panel<ept id=\"p2\">**</ept>, click <bpt id=\"p3\">**</bpt>Administrative Tools<ept id=\"p3\">**</ept>, and then click <bpt id=\"p4\">**</bpt>Event Viewer<ept id=\"p4\">**</ept>.","pos":[4732,4930],"source":" To do this, open Event Viewer by typing Show-EventLog in Windows PowerShell; or, click the **Start** button, click **Control Panel**, click **Administrative Tools**, and then click **Event Viewer**."},{"content":"On the <bpt id=\"p1\">**</bpt>View<ept id=\"p1\">**</ept> menu in Event viewer, click <bpt id=\"p2\">**</bpt>Show Analytic and Debug Logs<ept id=\"p2\">**</ept>.","pos":[4931,5008],"source":" On the **View** menu in Event viewer, click **Show Analytic and Debug Logs**."},{"content":"The log name for the analytic channel is <bpt id=\"p1\">**</bpt>Microsoft-Windows-Dsc/Analytic<ept id=\"p1\">**</ept>, and the debug channel is <bpt id=\"p2\">**</bpt>Microsoft-Windows-Dsc/Debug<ept id=\"p2\">**</ept>.","pos":[5009,5143],"source":" The log name for the analytic channel is **Microsoft-Windows-Dsc/Analytic**, and the debug channel is **Microsoft-Windows-Dsc/Debug**."},{"content":"You could also use the <bpt id=\"p1\">[</bpt>wevtutil<ept id=\"p1\">](https://technet.microsoft.com/library/cc732848.aspx)</ept> utility to enable the logs, as shown in the following example.","pos":[5144,5293],"source":" You could also use the [wevtutil](https://technet.microsoft.com/library/cc732848.aspx) utility to enable the logs, as shown in the following example."},{"content":"What do DSC logs contain?","pos":[5387,5412]},{"content":"DSC logs are split over the three log channels based on the importance of the message.","pos":[5414,5500]},{"content":"The operational log in DSC contains all error messages, and can be used to identify a problem.","pos":[5501,5595]},{"content":"The analytic log has a higher volume of events, and can identify where error(s) occurred.","pos":[5596,5685]},{"content":"This channel also contains verbose messages (if any).","pos":[5686,5739]},{"content":"The debug log contains logs that can help you understand how the errors occurred.","pos":[5740,5821]},{"content":"DSC event messages are structured such that every event message begins with a job ID that uniquely represents a DSC operation.","pos":[5822,5948]},{"content":"The example below attempts to obtain the message from the first event logged into the operational DSC log.","pos":[5949,6055]},{"content":"DSC events are logged in a particular structure that enables the user to aggregate events from one DSC job.","pos":[6339,6446]},{"content":"The structure is as follows:","pos":[6447,6475]},{"pos":[6477,6516],"content":"<bpt id=\"p1\">**</bpt>Job ID : <ph id=\"ph1\">&lt;Guid&gt;</ph><ept id=\"p1\">**</ept><ph id=\"ph2\">\n</ph><bpt id=\"p2\">**</bpt><ph id=\"ph3\">&lt;Event Message&gt;</ph><ept id=\"p2\">**</ept>","source":"**Job ID : <Guid>**\n**<Event Message>**"},{"content":"Gathering events from a single DSC operation","pos":[6521,6565]},{"content":"DSC event logs contain events generated by various DSC operations.","pos":[6567,6633]},{"content":"However, you’ll usually be concerned with the detail about just one particular operation.","pos":[6634,6723]},{"content":"All DSC logs can be grouped by the job ID property that is unique for every DSC operation.","pos":[6724,6814]},{"content":"The job ID is displayed as the first property value in all DSC events.","pos":[6815,6885]},{"content":"The following steps explain how to accumulate all events in a grouped array structure.","pos":[6886,6972]},{"content":"Here, the variable <ph id=\"ph1\">`$SeparateDscOperations`</ph> contains logs grouped by the job IDs.","pos":[8426,8507],"source":"Here, the variable `$SeparateDscOperations` contains logs grouped by the job IDs."},{"content":"Each array element of this variable represents a group of events logged by a different DSC operation, allowing access to more information about the logs.","pos":[8508,8661]},{"content":"You can extract the data in the variable <ph id=\"ph1\">`$SeparateDscOperations`</ph> using <bpt id=\"p1\">[</bpt>Where-Object<ept id=\"p1\">](https://technet.microsoft.com/library/ee177028.aspx)</ept>.","pos":[11032,11172],"source":"You can extract the data in the variable `$SeparateDscOperations` using [Where-Object](https://technet.microsoft.com/library/ee177028.aspx)."},{"content":"Following are five scenarios in which you might want to extract data for troubleshooting DSC:","pos":[11173,11266]},{"content":"1: Operations failures","pos":[11272,11294]},{"content":"All events have <bpt id=\"p1\">[</bpt>severity levels<ept id=\"p1\">](https://msdn.microsoft.com/library/dd996917(v=vs.85))</ept>.","pos":[11296,11384],"source":"All events have [severity levels](https://msdn.microsoft.com/library/dd996917(v=vs.85))."},{"content":"This information can be used to identify the error events:","pos":[11385,11443]},{"content":"2: Details of operations run in the last half hour","pos":[11871,11921]},{"content":"<ph id=\"ph1\">`TimeCreated`</ph>, a property of every Windows event, states the time the event was created.","pos":[11923,12011],"source":"`TimeCreated`, a property of every Windows event, states the time the event was created."},{"content":"Comparing this property with a particular date/time object can be used to filter all events:","pos":[12012,12104]},{"content":"3: Messages from the latest operation","pos":[12564,12601]},{"content":"The latest operation is stored in the first index of the array group <ph id=\"ph1\">`$SeparateDscOperations`</ph>.","pos":[12603,12697],"source":"The latest operation is stored in the first index of the array group `$SeparateDscOperations`."},{"content":"Querying the group’s messages for index 0 returns all messages for the latest operation:","pos":[12698,12786]},{"content":"4: Error messages logged for recent failed operations","pos":[13458,13511]},{"content":"<ph id=\"ph1\">`$SeparateDscOperations[0].Group`</ph> contains a set of events for the latest operation.","pos":[13513,13597],"source":"`$SeparateDscOperations[0].Group` contains a set of events for the latest operation."},{"content":"Run the <ph id=\"ph1\">`Where-Object`</ph> cmdlet to filter the events based on their level display name.","pos":[13598,13683],"source":" Run the `Where-Object` cmdlet to filter the events based on their level display name."},{"content":"Results are stored in the <ph id=\"ph1\">`$myFailedEvent`</ph> variable, which can be further dissected to get the event message:","pos":[13684,13793],"source":" Results are stored in the `$myFailedEvent` variable, which can be further dissected to get the event message:"},{"content":"5: All events generated for a particular job ID.","pos":[14230,14278]},{"content":"<ph id=\"ph1\">`$SeparateDscOperations`</ph> is an array of groups, each of which has the name as the unique job ID.","pos":[14280,14376],"source":"`$SeparateDscOperations` is an array of groups, each of which has the name as the unique job ID."},{"content":"By running the <ph id=\"ph1\">`Where-Object`</ph> cmdlet, you can extract those groups of events that have a particular job ID:","pos":[14377,14484],"source":" By running the `Where-Object` cmdlet, you can extract those groups of events that have a particular job ID:"},{"content":"Using xDscDiagnostics to analyze DSC logs","pos":[15263,15304]},{"content":"<bpt id=\"p1\">**</bpt>xDscDiagnostics<ept id=\"p1\">**</ept> is a PowerShell module that consists of several functions that can help analyze DSC failures on your machine.","pos":[15306,15435],"source":"**xDscDiagnostics** is a PowerShell module that consists of several functions that can help analyze DSC failures on your machine."},{"content":"These functions can help you identify all local events from past DSC operations, or DSC events on remote computers (with valid credentials).","pos":[15436,15577],"source":" These functions \ncan help you identify all local events from past DSC operations, or DSC events on remote computers (with valid credentials)."},{"content":"Here, the term DSC operation is used to define a single unique DSC execution from its start to its end.","pos":[15578,15682],"source":" Here, the term DSC operation is used to define a single unique \nDSC execution from its start to its end."},{"content":"For example, <ph id=\"ph1\">`Test-DscConfiguration`</ph> would be a separate DSC operation.","pos":[15683,15754],"source":" For example, `Test-DscConfiguration` would be a separate DSC operation."},{"content":"Similarly, every other cmdlet in DSC (such as <ph id=\"ph1\">`Get-DscConfiguration`</ph>, <ph id=\"ph2\">`Start-DscConfiguration`</ph>, etc.) could each be identified as separate DSC operations.","pos":[15755,15910],"source":" Similarly, every other cmdlet in DSC (such as `Get-DscConfiguration`, \n`Start-DscConfiguration`, etc.) could each be identified as separate DSC operations."},{"content":"The functions are explained at <bpt id=\"p1\">[</bpt>xDscDiagnostics<ept id=\"p1\">](https://github.com/PowerShell/xDscDiagnostics)</ept>.","pos":[15911,16007],"source":" The functions are explained at [xDscDiagnostics](https://github.com/PowerShell/xDscDiagnostics)."},{"content":"Help is available by running <ph id=\"ph1\">`Get-Help &lt;cmdlet name&gt;`</ph>.","pos":[16008,16063],"source":" \nHelp is available by running `Get-Help <cmdlet name>`."},{"content":"Getting details of DSC operations","pos":[16069,16102]},{"content":"The <ph id=\"ph1\">`Get-xDscOperation`</ph> function lets you find the results of the DSC operations that run on one or multiple computers, and returns an object that contains the collection of events produced by each DSC operation.","pos":[16105,16317],"source":"The `Get-xDscOperation` function lets you find the results of the DSC operations that run on one or multiple computers, and returns an object that contains the collection of events produced by each DSC operation."},{"content":"For example, in the following output, three commands were run.","pos":[16318,16381],"source":" \nFor example, in the following output, three commands were run."},{"content":"The first one passed, and the other two failed.","pos":[16382,16429]},{"content":"These results are summarized in the output of <ph id=\"ph1\">`Get-xDscOperation`</ph>.","pos":[16430,16496],"source":" These results are summarized in the output of `Get-xDscOperation`."},{"pos":[17121,17232],"content":"You can also specify that you want only results for the most recent operations by using the <ph id=\"ph1\">`Newest`</ph> parameter:","source":"You can also specify that you want only results for the most recent operations by using the `Newest` parameter:"},{"content":"Getting details of DSC events","pos":[18087,18116]},{"pos":[18118,18456],"content":"The <ph id=\"ph1\">`Trace-xDscOperation1 cmdlet returns an object containing a collection of events, their event types, and the message output generated from a particular DSC operation. Typically, when you find a failure in any of the operations using `</ph>Get-xDscOperation`, you would trace that operation to find out which of the events caused a failure.","source":"The `Trace-xDscOperation1 cmdlet returns an object containing a collection of events, their event types, and the message output generated from a particular DSC operation. Typically, when you find a failure in any of the operations using `Get-xDscOperation`, you would trace that operation to find out which of the events caused a failure."},{"content":"Use the  <ph id=\"ph1\">`SequenceID`</ph> parameter to get the events for a specific operation for a specific computer.","pos":[18458,18557],"source":"Use the  `SequenceID` parameter to get the events for a specific operation for a specific computer."},{"content":"For example, if you specify a <ph id=\"ph1\">`SequenceID`</ph> of 9, <ph id=\"ph2\">`Trace-xDscOperaion`</ph> get the trace for the DSC operation that was 9th from the last operation:","pos":[18558,18702],"source":" For example, if you specify a `SequenceID` of 9, `Trace-xDscOperaion` get the \ntrace for the DSC operation that was 9th from the last operation:"},{"pos":[20044,20195],"content":"Pass the <bpt id=\"p1\">**</bpt>GUID<ept id=\"p1\">**</ept> assigned to a specific DSC operation (as returned by the <ph id=\"ph1\">`Get-xDscOperation`</ph> cmldet) to get the event details for that DSC operation:","source":"Pass the **GUID** assigned to a specific DSC operation (as returned by the `Get-xDscOperation` cmldet) to get the event details for that DSC operation:"},{"pos":[24731,24895],"content":"Note that, since <ph id=\"ph1\">`Trace-xDscOperation`</ph> aggregates events from the Analytic, Debug, and Operational logs, it will prompt you to enable these logs as described above.","source":"Note that, since `Trace-xDscOperation` aggregates events from the Analytic, Debug, and Operational logs, it will prompt you to enable these logs as described above."},{"content":"Alternately, you can gather information on the events by saving the output of <ph id=\"ph1\">`Trace-xDscOperation`</ph> into a variable.","pos":[24897,25013],"source":"Alternately, you can gather information on the events by saving the output of `Trace-xDscOperation` into a variable."},{"content":"You can use the following commands to display all the events for a particular DSC operation.","pos":[25014,25107],"source":" You can use the following commands to display all the events for a \nparticular DSC operation."},{"pos":[25231,25324],"content":"This will display the same results as the <ph id=\"ph1\">`Get-WinEvent`</ph> cmdlet, such as in the output below:","source":"This will display the same results as the `Get-WinEvent` cmdlet, such as in the output below:"},{"content":"Ideally, you would first use <ph id=\"ph1\">`Get-xDscOperation`</ph> to list out the last few DSC configuration runs on your machines.","pos":[29759,29873],"source":"Ideally, you would first use `Get-xDscOperation` to list out the last few DSC configuration runs on your machines."},{"content":"Following this, you can examine any single operation (using its SequenceID or JobID) with <ph id=\"ph1\">`Trace-xDscOperation`</ph> to discover what it did behind the scenes.","pos":[29874,30028],"source":" Following this, you can examine any single operation (using its SequenceID or JobID) with `Trace-xDscOperation` to discover what it did behind the scenes."},{"content":"Getting events for a remote computer","pos":[30034,30070]},{"content":"Use the <ph id=\"ph1\">`ComputerName`</ph> parameter of the <ph id=\"ph2\">`Trace-xDscOperation`</ph> cmdlet to get the event details on a remote computer.","pos":[30072,30187],"source":"Use the `ComputerName` parameter of the `Trace-xDscOperation` cmdlet to get the event details on a remote computer."},{"content":"Before you can do this, you have to create a firewall rule to allow remote administration on the remote computer:","pos":[30188,30302],"source":" Before you can do this, you have to create a firewall rule to allow \nremote administration on the remote computer:"},{"pos":[30406,30478],"content":"Now you can specify that computer in your call to <ph id=\"ph1\">`Trace-xDscOperation`</ph>:","source":"Now you can specify that computer in your call to `Trace-xDscOperation`:"},{"content":"My resources won’t update: How to reset the cache","pos":[33807,33856]},{"content":"The DSC engine caches resources implemented as a PowerShell module for efficiency purposes.","pos":[33858,33949]},{"content":"However, this can cause problems when you are authoring a resource and testing it simultaneously because DSC will load the cached version until the process is restarted.","pos":[33950,34119]},{"content":"The only way to make DSC load the newer version is to explicitly kill the process hosting the DSC engine.","pos":[34120,34225]},{"content":"Similarly, when you run <ph id=\"ph1\">`Start-DscConfiguration`</ph>, after adding and modifying a custom resource, the modification may not execute unless, or until, the computer is rebooted.","pos":[34227,34399],"source":"Similarly, when you run `Start-DscConfiguration`, after adding and modifying a custom resource, the modification may not execute unless, or until, the computer is rebooted."},{"content":"This is because DSC runs in the WMI Provider Host Process (WmiPrvSE), and usually, there are many instances of WmiPrvSE running at once.","pos":[34400,34536]},{"content":"When you reboot, the host process is restarted and the cache is cleared.","pos":[34537,34609]},{"content":"To successfully recycle the configuration and clear the cache without rebooting, you must stop and then restart the host process.","pos":[34611,34740]},{"content":"This can be done on a per instance basis, whereby you identify the process, stop it, and restart it.","pos":[34741,34841]},{"content":"Or, you can use <ph id=\"ph1\">`DebugMode`</ph>, as demonstrated below, to reload the PowerShell DSC resource.","pos":[34842,34932],"source":" Or, you can use `DebugMode`, as demonstrated below, to reload the PowerShell DSC resource."},{"content":"To identify which process is hosting the DSC engine and stop it on a per instance basis, you can list the process ID of the WmiPrvSE which is hosting the DSC engine.","pos":[34934,35099]},{"content":"Then, to update the provider, stop the WmiPrvSE process using the commands below, and then run <bpt id=\"p1\">**</bpt>Start-DscConfiguration<ept id=\"p1\">**</ept> again.","pos":[35100,35228],"source":" Then, to update the provider, stop the WmiPrvSE process using the commands below, and then run **Start-DscConfiguration** again."},{"content":"Using DebugMode","pos":[35534,35549]},{"content":"You can configure the DSC Local Configuration Manager (LCM) to use <ph id=\"ph1\">`DebugMode`</ph> to always clear the cache when the host process is restarted.","pos":[35551,35691],"source":"You can configure the DSC Local Configuration Manager (LCM) to use `DebugMode` to always clear the cache when the host process is restarted."},{"content":"When set to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept>, it causes the engine to always reload the PowerShell DSC resource.","pos":[35692,35780],"source":" When set to **TRUE**, it causes the engine to always reload the PowerShell DSC resource."},{"content":"Once you are done writing your resource, you can set it back to <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept> and the engine will revert to its behavior of caching the modules.","pos":[35781,35921],"source":" Once you are done writing your resource, you can set it back to **FALSE** and the engine will revert to its behavior of caching the modules."},{"content":"Following is a demonstration to show how <ph id=\"ph1\">`DebugMode`</ph> can automatically refresh the cache.","pos":[35923,36012],"source":"Following is a demonstration to show how `DebugMode` can automatically refresh the cache."},{"content":"First, let’s look at the default configuration:","pos":[36013,36060]},{"pos":[36636,36685],"content":"You can see that <ph id=\"ph1\">`DebugMode`</ph> is set to <bpt id=\"p1\">**</bpt>FALSE<ept id=\"p1\">**</ept>.","source":"You can see that `DebugMode` is set to **FALSE**."},{"pos":[36687,36766],"content":"To set up the <ph id=\"ph1\">`DebugMode`</ph> demonstration, use the following PowerShell resource:","source":"To set up the `DebugMode` demonstration, use the following PowerShell resource:"},{"pos":[37312,37396],"content":"Now, author a configuration using the above resource called <ph id=\"ph1\">`TestProviderDebugMode`</ph>:","source":"Now, author a configuration using the above resource called `TestProviderDebugMode`:"},{"pos":[37646,37754],"content":"You will see that the contents of file: “<bpt id=\"p1\">**</bpt>$env:SystemDrive\\OutputFromTestProviderDebugMode.txt<ept id=\"p1\">**</ept>” is <bpt id=\"p2\">**</bpt>1<ept id=\"p2\">**</ept>.","source":"You will see that the contents of file: “**$env:SystemDrive\\OutputFromTestProviderDebugMode.txt**” is **1**."},{"content":"Now, update the provider code using the following script:","pos":[37756,37813]},{"content":"This script generates a random number and updates the provider code accordingly.","pos":[38582,38662]},{"content":"With <ph id=\"ph1\">`DebugMode`</ph> set to false, the contents of the file “<bpt id=\"p1\">**</bpt>$env:SystemDrive\\OutputFromTestProviderDebugMode.txt<ept id=\"p1\">**</ept>” are never changed.","pos":[38663,38796],"source":" With `DebugMode` set to false, the contents of the file “**$env:SystemDrive\\OutputFromTestProviderDebugMode.txt**” are never changed."},{"pos":[38798,38860],"content":"Now, set <ph id=\"ph1\">`DebugMode`</ph> to <bpt id=\"p1\">**</bpt>TRUE<ept id=\"p1\">**</ept> in your configuration script:","source":"Now, set `DebugMode` to **TRUE** in your configuration script:"},{"content":"When you run the above script again, you will see that the content of the file is different every time.","pos":[38934,39037]},{"content":"(You can run <ph id=\"ph1\">`Get-DscConfiguration`</ph> to check it).","pos":[39038,39087],"source":" (You can run `Get-DscConfiguration` to check it)."},{"content":"Below is the result of two additional runs (your results may be different when you run the script):","pos":[39088,39187]},{"content":"See Also","pos":[39803,39811]},{"content":"Reference","pos":[39817,39826]},{"pos":[39829,39863],"content":"<bpt id=\"p1\">[</bpt>DSC Log Resource<ept id=\"p1\">](logResource.md)</ept>","source":"[DSC Log Resource](logResource.md)"},{"content":"Concepts","pos":[39869,39877]},{"pos":[39880,39973],"content":"<bpt id=\"p1\">[</bpt>Build Custom Windows PowerShell Desired State Configuration Resources<ept id=\"p1\">](authoringResource.md)</ept>","source":"[Build Custom Windows PowerShell Desired State Configuration Resources](authoringResource.md)"},{"content":"Other Resources","pos":[39979,39994]},{"pos":[39997,40123],"content":"<bpt id=\"p1\">[</bpt>Windows PowerShell Desired State Configuration Cmdlets<ept id=\"p1\">](https://technet.microsoft.com/en-us/library/dn521624(v=wps.630).aspx)</ept>","source":"[Windows PowerShell Desired State Configuration Cmdlets](https://technet.microsoft.com/en-us/library/dn521624(v=wps.630).aspx)"}],"content":"---\ntitle:   Troubleshooting DSC\nms.date:  2016-05-16\nkeywords:  powershell,DSC\ndescription:  \nms.topic:  article\nauthor:  eslesar\nmanager:  dongill\nms.prod:  powershell\n---\n\n# Troubleshooting DSC\n\n>Applies To: Windows PowerShell 4.0, Windows PowerShell 5.0\n\nThis topic describes ways to troubleshoot DSC when problems arise.\n\n## Using Get-DscConfigurationStatus\n\nThe [Get-DscConfigurationStatus](https://technet.microsoft.com/en-us/library/mt517868.aspx) cmdlet gets information about configuration status from a target node. \nA rich object is returned that includes high-level information about whether or not the configuration run was successful or not. You can dig into the object to discover details about the configuration run such as:\n\n* All of the resources that failed\n* Any resource that requested a reboot\n* Meta-Configuration settings at time of configuration run\n* Etc.\n\nThe following parameter set returns the status information for the last configuration run:\n\n```powershell\nGet-DscConfigurationStatus  [-CimSession <CimSession[]>] \n                            [-ThrottleLimit <int>] \n                            [-AsJob] \n                            [<CommonParameters>]\n```\nThe following parameter set returns the status information for all previous configuration runs:\n\n```powershell\nGet-DscConfigurationStatus  -All \n                            [-CimSession <CimSession[]>] \n                            [-ThrottleLimit <int>] \n                            [-AsJob] \n                            [<CommonParameters>]\n```\n\n## Example\n\n```powershell\nPS C:\\> $Status = Get-DscConfigurationStatus \n\nPS C:\\> $Status\n\nStatus      StartDate               Type            Mode    RebootRequested     NumberOfResources\n------      ---------               ----            ----    ---------------     -----------------\nFailure     11/24/2015  3:44:56     Consistency     Push    True                36\n\nPS C:\\> $Status.ResourcesNotInDesiredState\n\nConfigurationName       :   MyService\nDependsOn               :   \nModuleName              :   PSDesiredStateConfiguration\nModuleVersion           :   1.1\nPsDscRunAsCredential    :   \nResourceID              :   [File]ServiceDll\nSourceInfo              :   c:\\git\\CustomerService\\Configs\\MyCustomService.ps1::5::34::File\nDurationInSeconds       :   0.19\nError                   :   SourcePath must be accessible for current configuration. The related file/directory is:\n                            \\\\Server93\\Shared\\contosoApp.dll. The related ResourceID is [File]ServiceDll\nFinalState              :   \nInDesiredState          :   False\nInitialState            :   \nInstanceName            :   ServiceDll\nRebootRequested         :   False\nReosurceName            :   File\nStartDate               :   11/24/2015  3:44:56\nPSComputerName          :\n```\n\n## My script won’t run: Using DSC logs to diagnose script errors\n\nLike all Windows software, DSC records errors and events in [logs](https://msdn.microsoft.com/library/windows/desktop/aa363632.aspx) that can be viewed from the [Event Viewer](http://windows.microsoft.com/windows/what-information-event-logs-event-viewer). Examining these logs can help you understand why a particular operation failed, and how to prevent failure in the future. Writing configuration scripts can be tricky, so to make tracking errors easier as you author, use the DSC Log resource to track the progress of your configuration in the DSC Analytic event log.\n\n## Where are DSC event logs?\n\nIn Event Viewer, DSC events are in: **Applications and Services Logs/Microsoft/Windows/Desired State Configuration**\n\nThe corresponding PowerShell cmdlet, [Get-WinEvent](https://technet.microsoft.com/library/hh849682.aspx), can also be run to view the event logs:\n\n```\nPS C:\\> Get-WinEvent -LogName \"Microsoft-Windows-Dsc/Operational\"\n   ProviderName: Microsoft-Windows-DSC\nTimeCreated                     Id LevelDisplayName Message                                                                                                  \n-----------                     -- ---------------- -------                                                                                                  \n11/17/2014 10:27:23 PM        4102 Information      Job {02C38626-D95A-47F1-9DA2-C1D44A7128E7} : \n```\n\nAs shown above, DSC’s primary log name is **Microsoft->Windows->DSC** (other log names under Windows are not shown here for brevity). The primary name is appended to the channel name to create the complete log name. The DSC engine writes mainly into three types of logs: [Operational, Analytic, and Debug logs](https://technet.microsoft.com/library/cc722404.aspx). Since the analytic and debug logs are turned off by default, you should enable them in Event Viewer. To do this, open Event Viewer by typing Show-EventLog in Windows PowerShell; or, click the **Start** button, click **Control Panel**, click **Administrative Tools**, and then click **Event Viewer**. On the **View** menu in Event viewer, click **Show Analytic and Debug Logs**. The log name for the analytic channel is **Microsoft-Windows-Dsc/Analytic**, and the debug channel is **Microsoft-Windows-Dsc/Debug**. You could also use the [wevtutil](https://technet.microsoft.com/library/cc732848.aspx) utility to enable the logs, as shown in the following example.\n\n```powershell\nwevtutil.exe set-log “Microsoft-Windows-Dsc/Analytic” /q:true /e:true\n```\n\n## What do DSC logs contain?\n\nDSC logs are split over the three log channels based on the importance of the message. The operational log in DSC contains all error messages, and can be used to identify a problem. The analytic log has a higher volume of events, and can identify where error(s) occurred. This channel also contains verbose messages (if any). The debug log contains logs that can help you understand how the errors occurred. DSC event messages are structured such that every event message begins with a job ID that uniquely represents a DSC operation. The example below attempts to obtain the message from the first event logged into the operational DSC log.\n\n```powershell\nPS C:\\> $AllDscOpEvents = Get-WinEvent -LogName \"Microsoft-Windows-Dsc/Operational\"\nPS C:\\> $FirstOperationalEvent = $AllDscOpEvents[0]\nPS C:\\> $FirstOperationalEvent.Message\nJob {02C38626-D95A-47F1-9DA2-C1D44A7128E7} : \nConsistency engine was run successfully. \n```\n\nDSC events are logged in a particular structure that enables the user to aggregate events from one DSC job. The structure is as follows:\n\n**Job ID : <Guid>**\n**<Event Message>**\n\n## Gathering events from a single DSC operation\n\nDSC event logs contain events generated by various DSC operations. However, you’ll usually be concerned with the detail about just one particular operation. All DSC logs can be grouped by the job ID property that is unique for every DSC operation. The job ID is displayed as the first property value in all DSC events. The following steps explain how to accumulate all events in a grouped array structure.\n\n```powershell\n<##########################################################################\n Step 1 : Enable analytic and debug DSC channels (Operational channel is enabled by default)\n###########################################################################>\n \nwevtutil.exe set-log “Microsoft-Windows-Dsc/Analytic” /q:true /e:true\nwevtutil.exe set-log “Microsoft-Windows-Dsc/Debug” /q:True /e:true\n \n<##########################################################################\n Step 2 : Perform the required DSC operation (Below is an example, you could run any DSC operation instead)\n###########################################################################>\n \nGet-DscLocalConfigurationManager\n \n<##########################################################################\nStep 3 : Collect all DSC Logs, from the Analytic, Debug and Operational channels\n###########################################################################>\n \n$DscEvents=[System.Array](Get-WinEvent \"Microsoft-Windows-Dsc/Operational\") `\n         + [System.Array](Get-WinEvent \"Microsoft-Windows-Dsc/Analytic\" -Oldest) `\n         + [System.Array](Get-WinEvent \"Microsoft-Windows-Dsc/Debug\" -Oldest)\n \n \n<##########################################################################\n Step 4 : Group all logs based on the job ID\n###########################################################################>\n$SeparateDscOperations = $DscEvents | Group {$_.Properties[0].value}  \n```\n\nHere, the variable `$SeparateDscOperations` contains logs grouped by the job IDs. Each array element of this variable represents a group of events logged by a different DSC operation, allowing access to more information about the logs.\n\n```\nPS C:\\> $SeparateDscOperations\n \nCount Name                      Group                                                                     \n----- ----                      -----                                                                     \n   48 {1A776B6A-5BAC-11E3-BF... {System.Diagnostics.Eventing.Reader.EventLogRecord, System.Diagnostics....\n   40 {E557E999-5BA8-11E3-BF... {System.Diagnostics.Eventing.Reader.EventLogRecord, System.Diagnostics....\nPS C:\\> $SeparateDscOperations[0].Group\n   ProviderName: Microsoft-Windows-DSC\nTimeCreated                     Id LevelDisplayName Message                                               \n-----------                     -- ---------------- -------                                               \n12/2/2013 3:47:29 PM          4115 Information      Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4198 Information      Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4114 Information      Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4102 Information      Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4098 Warning          Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4098 Warning          Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4176 Information      Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4182 Information      Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4182 Information      Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4182 Information      Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4182 Information      Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4182 Information      Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4182 Information      Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4182 Information      Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...      \n12/2/2013 3:47:29 PM          4182 Information      Job {1A776B6A-5BAC-11E3-BF41-00155D553612} : ...       \n```\n\nYou can extract the data in the variable `$SeparateDscOperations` using [Where-Object](https://technet.microsoft.com/library/ee177028.aspx). Following are five scenarios in which you might want to extract data for troubleshooting DSC:\n\n### 1: Operations failures\n\nAll events have [severity levels](https://msdn.microsoft.com/library/dd996917(v=vs.85)). This information can be used to identify the error events:\n\n```\nPS C:\\> $SeparateDscOperations | Where-Object {$_.Group.LevelDisplayName -contains \"Error\"}\nCount Name                      Group                                                                     \n----- ----                      -----                                                                     \n   38 {5BCA8BE7-5BB6-11E3-BF... {System.Diagnostics.Eventing.Reader.EventLogRecord, System.Diagnostics....\n```\n\n### 2: Details of operations run in the last half hour\n\n`TimeCreated`, a property of every Windows event, states the time the event was created. Comparing this property with a particular date/time object can be used to filter all events:\n\n```powershell\nPS C:\\> $DateLatest = (Get-Date).AddMinutes(-30)\nPS C:\\> $SeparateDscOperations | Where-Object {$_.Group.TimeCreated -gt $DateLatest}\nCount Name                      Group                                                                     \n----- ----                      -----                                                                     \n    1 {6CEC5B09-5BB0-11E3-BF... {System.Diagnostics.Eventing.Reader.EventLogRecord}   \n```\n\n### 3: Messages from the latest operation\n\nThe latest operation is stored in the first index of the array group `$SeparateDscOperations`. Querying the group’s messages for index 0 returns all messages for the latest operation:\n\n```powershelll\nPS C:\\> $SeparateDscOperations[0].Group.Message\nJob {5BCA8BE7-5BB6-11E3-BF41-00155D553612} : \nRunning consistency engine.\nJob {1A776B6A-5BAC-11E3-BF41-00155D553612} : \nConfiguration is sent from computer NULL by user sid S-1-5-18.\nJob {1A776B6A-5BAC-11E3-BF41-00155D553612} : \nDisplaying messages from built-in DSC resources:\n WMI channel 1 \n ResourceID:  \n Message : [INCH-VM]:                            [] Starting consistency engine.\nJob {1A776B6A-5BAC-11E3-BF41-00155D553612} : \nDisplaying messages from built-in DSC resources:\n WMI channel 1 \n ResourceID:  \n Message : [INCH-VM]:                            [] Consistency check completed. \n```\n\n### 4: Error messages logged for recent failed operations\n\n`$SeparateDscOperations[0].Group` contains a set of events for the latest operation. Run the `Where-Object` cmdlet to filter the events based on their level display name. Results are stored in the `$myFailedEvent` variable, which can be further dissected to get the event message:\n\n```powershell\nPS C:\\> $myFailedEvent = ($SeparateDscOperations[0].Group | Where-Object {$_.LevelDisplayName -eq \"Error\"})\n \nPS C:\\> $myFailedEvent.Message\nJob {5BCA8BE7-5BB6-11E3-BF41-00155D553612} : \nDSC Engine Error : \n Error Message Current configuration does not exist. Execute Start-DscConfiguration command with -Path pa\nrameter to specify a configuration file and create a current configuration first. \nError Code : 1 \n```\n\n### 5: All events generated for a particular job ID.\n\n`$SeparateDscOperations` is an array of groups, each of which has the name as the unique job ID. By running the `Where-Object` cmdlet, you can extract those groups of events that have a particular job ID:\n\n```powershell\nPS C:\\> ($SeparateDscOperations | Where-Object {$_.Name -eq $jobX} ).Group\n\n   ProviderName: Microsoft-Windows-DSC\n \nTimeCreated                     Id LevelDisplayName Message                                               \n-----------                     -- ---------------- -------                                               \n12/2/2013 4:33:24 PM          4102 Information      Job {847A5619-5BB2-11E3-BF41-00155D553612} : ...      \n12/2/2013 4:33:24 PM          4168 Information      Job {847A5619-5BB2-11E3-BF41-00155D553612} : ...      \n12/2/2013 4:33:24 PM          4146 Information      Job {847A5619-5BB2-11E3-BF41-00155D553612} : ...      \n12/2/2013 4:33:24 PM          4120 Information      Job {847A5619-5BB2-11E3-BF41-00155D553612} : ...  \n```\n\n## Using xDscDiagnostics to analyze DSC logs\n\n**xDscDiagnostics** is a PowerShell module that consists of several functions that can help analyze DSC failures on your machine. These functions \ncan help you identify all local events from past DSC operations, or DSC events on remote computers (with valid credentials). Here, the term DSC operation is used to define a single unique \nDSC execution from its start to its end. For example, `Test-DscConfiguration` would be a separate DSC operation. Similarly, every other cmdlet in DSC (such as `Get-DscConfiguration`, \n`Start-DscConfiguration`, etc.) could each be identified as separate DSC operations. The functions are explained at [xDscDiagnostics](https://github.com/PowerShell/xDscDiagnostics). \nHelp is available by running `Get-Help <cmdlet name>`.\n\n### Getting details of DSC operations \n\nThe `Get-xDscOperation` function lets you find the results of the DSC operations that run on one or multiple computers, and returns an object that contains the collection of events produced by each DSC operation. \nFor example, in the following output, three commands were run. The first one passed, and the other two failed. These results are summarized in the output of `Get-xDscOperation`.\n\n```powershell\nPS C:\\DiagnosticsTest> Get-xDscOperation\n\nComputerName   SequenceId TimeCreated           Result   JobID                                 AllEvents            \n------------   ---------- -----------           ------   -----                                 ---------            \nSRV1   1          6/23/2016 9:37:52 AM  Failure  9701aadf-395e-11e6-9165-00155d390509  {@{Message=; TimeC...\nSRV1   2          6/23/2016 9:36:54 AM  Failure  7e8e2d6e-395c-11e6-9165-00155d390509  {@{Message=; TimeC...\nSRV1   3          6/23/2016 9:36:54 AM  Success  af72c6aa-3960-11e6-9165-00155d390509  {@{Message=Operati...\n\n```\n\nYou can also specify that you want only results for the most recent operations by using the `Newest` parameter:\n\n```powershell\nPS C:\\DiagnosticsTest> Get-xDscOperation -Newest 5\nComputerName   SequenceId TimeCreated           Result   JobID                                 AllEvents            \n------------   ---------- -----------           ------   -----                                 ---------            \nSRV1   1          6/23/2016 4:36:54 PM  Success                                        {@{Message=; TimeC...\nSRV1   2          6/23/2016 4:36:54 PM  Success  5c06402b-399b-11e6-9165-00155d390509  {@{Message=Operati...\nSRV1   3          6/23/2016 4:36:54 PM  Success                                        {@{Message=; TimeC...\nSRV1   4          6/23/2016 4:36:54 PM  Success  5c06402a-399b-11e6-9165-00155d390509  {@{Message=Operati...\nSRV1   5          6/23/2016 4:36:51 PM  Success                                        {@{Message=; TimeC...\n```\n\n### Getting details of DSC events\n\nThe `Trace-xDscOperation1 cmdlet returns an object containing a collection of events, their event types, and the message output generated from a particular DSC operation. Typically, when you find a failure in any of the operations using `Get-xDscOperation`, you would trace that operation to find out which of the events caused a failure.\n\nUse the  `SequenceID` parameter to get the events for a specific operation for a specific computer. For example, if you specify a `SequenceID` of 9, `Trace-xDscOperaion` get the \ntrace for the DSC operation that was 9th from the last operation:\n\n```powershell\nPS C:\\DiagnosticsTest> Trace-xDscOperation -SequenceID 9\n\nComputerName   EventType    TimeCreated           Message                                                                                             \n------------   ---------    -----------           -------                                                                                             \nSRV1   OPERATIONAL  6/24/2016 10:51:52 AM Operation Consistency Check or Pull started by user sid S-1-5-20 from computer NULL.                \nSRV1   OPERATIONAL  6/24/2016 10:51:52 AM Running consistency engine.                                                                         \nSRV1   OPERATIONAL  6/24/2016 10:51:52 AM The local configuration manager is updating the PSModulePath to WindowsPowerShell\\Modules;C:\\Prog...\nSRV1   OPERATIONAL  6/24/2016 10:51:53 AM  Resource execution sequence :: [WindowsFeature]DSCServiceFeature, [xDSCWebService]PSDSCPullServer. \nSRV1   OPERATIONAL  6/24/2016 10:51:54 AM Consistency engine was run successfully.                                                            \nSRV1   OPERATIONAL  6/24/2016 10:51:54 AM Job runs under the following LCM setting. ...                                                       \nSRV1   OPERATIONAL  6/24/2016 10:51:54 AM Operation Consistency Check or Pull completed successfully. \n```\n\nPass the **GUID** assigned to a specific DSC operation (as returned by the `Get-xDscOperation` cmldet) to get the event details for that DSC operation:\n\n```powershell\nPS C:\\DiagnosticsTest> Trace-xDscOperation -JobID 9e0bfb6b-3a3a-11e6-9165-00155d390509\n\nComputerName   EventType    TimeCreated           Message                                                                                             \n------------   ---------    -----------           -------                                                                                             \nSRV1   OPERATIONAL  6/24/2016 11:36:56 AM Operation Consistency Check or Pull started by user sid S-1-5-20 from computer NULL.                \nSRV1   ANALYTIC     6/24/2016 11:36:56 AM Deleting file from C:\\Windows\\System32\\Configuration\\DSCEngineCache.mof                             \nSRV1   OPERATIONAL  6/24/2016 11:36:56 AM Running consistency engine.                                                                         \nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]:                            [] Starting consistency engine.                          \nSRV1   ANALYTIC     6/24/2016 11:36:56 AM Applying configuration from C:\\Windows\\System32\\Configuration\\Current.mof.                          \nSRV1   ANALYTIC     6/24/2016 11:36:56 AM Parsing the configuration to apply.                                                                 \nSRV1   OPERATIONAL  6/24/2016 11:36:56 AM  Resource execution sequence :: [WindowsFeature]DSCServiceFeature, [xDSCWebService]PSDSCPullServer. \nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]: LCM:  [ Start  Resource ]  [[WindowsFeature]DSCServiceFeature]                      \nSRV1   ANALYTIC     6/24/2016 11:36:56 AM Executing operations for PS DSC resource MSFT_RoleResource with resource name [WindowsFeature]DSC...\nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]: LCM:  [ Start  Test     ]  [[WindowsFeature]DSCServiceFeature]                      \nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]:                            [[WindowsFeature]DSCServiceFeature] The operation 'Get...\nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]:                            [[WindowsFeature]DSCServiceFeature] The operation 'Get...\nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]: LCM:  [ End    Test     ]  [[WindowsFeature]DSCServiceFeature] True in 0.3130 sec...\nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]: LCM:  [ End    Resource ]  [[WindowsFeature]DSCServiceFeature]                      \nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]: LCM:  [ Start  Resource ]  [[xDSCWebService]PSDSCPullServer]                        \nSRV1   ANALYTIC     6/24/2016 11:36:56 AM Executing operations for PS DSC resource MSFT_xDSCWebService with resource name [xDSCWebService]P...\nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]: LCM:  [ Start  Test     ]  [[xDSCWebService]PSDSCPullServer]                        \nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]:                            [[xDSCWebService]PSDSCPullServer] Check Ensure           \nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]:                            [[xDSCWebService]PSDSCPullServer] Check Port             \nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]:                            [[xDSCWebService]PSDSCPullServer] Check Physical Path ...\nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]:                            [[xDSCWebService]PSDSCPullServer] Check State            \nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]:                            [[xDSCWebService]PSDSCPullServer] Get Full Path for We...\nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]: LCM:  [ End    Test     ]  [[xDSCWebService]PSDSCPullServer] True in 0.0160 seconds.\nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]: LCM:  [ End    Resource ]  [[xDSCWebService]PSDSCPullServer]                        \nSRV1   VERBOSE      6/24/2016 11:36:56 AM [SRV1]:                            [] Consistency check completed.                          \nSRV1   ANALYTIC     6/24/2016 11:36:56 AM Deleting file from C:\\Windows\\System32\\Configuration\\DSCEngineCache.mof                             \nSRV1   OPERATIONAL  6/24/2016 11:36:56 AM Consistency engine was run successfully.                                                            \nSRV1   OPERATIONAL  6/24/2016 11:36:56 AM Job runs under the following LCM setting. ...                                                       \nSRV1   OPERATIONAL  6/24/2016 11:36:56 AM Operation Consistency Check or Pull completed successfully.                                         \nSRV1   ANALYTIC     6/24/2016 11:36:56 AM Deleting file from C:\\Windows\\System32\\Configuration\\DSCEngineCache.mof\n```\n\nNote that, since `Trace-xDscOperation` aggregates events from the Analytic, Debug, and Operational logs, it will prompt you to enable these logs as described above.\n\nAlternately, you can gather information on the events by saving the output of `Trace-xDscOperation` into a variable. You can use the following commands to display all the events for a \nparticular DSC operation.\n\n```powershell\nPS C:\\DiagnosticsTest> $Trace = Trace-xDscOperation -SequenceID 4\n\nPS C:\\DiagnosticsTest> $Trace.Event\n```\n\nThis will display the same results as the `Get-WinEvent` cmdlet, such as in the output below:\n\n```powershell\n   ProviderName: Microsoft-Windows-DSC\n\nTimeCreated                     Id LevelDisplayName Message                                                                                           \n-----------                     -- ---------------- -------                                                                                           \n6/23/2016 1:36:53 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.     \n6/23/2016 1:36:53 AM          4343 Information      The DscTimer has successfully run LCM method PerformRequiredConfigurationChecks with flag 5.      \n6/23/2016 2:07:00 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.     \n6/23/2016 2:07:01 AM          4343 Information      The DscTimer has successfully run LCM method PerformRequiredConfigurationChecks with flag 5.      \n6/23/2016 2:36:55 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.     \n6/23/2016 2:36:56 AM          4343 Information      The DscTimer has successfully run LCM method PerformRequiredConfigurationChecks with flag 5.      \n6/23/2016 3:06:55 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.     \n6/23/2016 3:06:55 AM          4343 Information      The DscTimer has successfully run LCM method PerformRequiredConfigurationChecks with flag 5.      \n6/23/2016 3:36:55 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.     \n6/23/2016 3:36:55 AM          4343 Information      The DscTimer has successfully run LCM method PerformRequiredConfigurationChecks with flag 5.      \n6/23/2016 4:06:53 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.     \n6/23/2016 4:06:53 AM          4343 Information      The DscTimer has successfully run LCM method PerformRequiredConfigurationChecks with flag 5.      \n6/23/2016 4:36:52 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.     \n6/23/2016 4:36:53 AM          4343 Information      The DscTimer has successfully run LCM method PerformRequiredConfigurationChecks with flag 5.      \n6/23/2016 5:06:52 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.     \n6/23/2016 5:06:53 AM          4343 Information      The DscTimer has successfully run LCM method PerformRequiredConfigurationChecks with flag 5.      \n6/23/2016 5:36:54 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.     \n6/23/2016 5:36:54 AM          4343 Information      The DscTimer has successfully run LCM method PerformRequiredConfigurationChecks with flag 5.      \n6/23/2016 6:06:52 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.     \n6/23/2016 6:06:53 AM          4343 Information      The DscTimer has successfully run LCM method PerformRequiredConfigurationChecks with flag 5.      \n6/23/2016 6:36:56 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.     \n6/23/2016 6:36:57 AM          4343 Information      The DscTimer has successfully run LCM method PerformRequiredConfigurationChecks with flag 5.      \n6/23/2016 7:06:52 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.     \n6/23/2016 7:06:53 AM          4343 Information      The DscTimer has successfully run LCM method PerformRequiredConfigurationChecks with flag 5.      \n6/23/2016 7:36:53 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.     \n6/23/2016 7:36:54 AM          4343 Information      The DscTimer has successfully run LCM method PerformRequiredConfigurationChecks with flag 5.      \n6/23/2016 8:06:54 AM          4312 Information      The DscTimer is running LCM method PerformRequiredConfigurationChecks with the flag set to 5.\n```\n\nIdeally, you would first use `Get-xDscOperation` to list out the last few DSC configuration runs on your machines. Following this, you can examine any single operation (using its SequenceID or JobID) with `Trace-xDscOperation` to discover what it did behind the scenes.\n\n### Getting events for a remote computer\n\nUse the `ComputerName` parameter of the `Trace-xDscOperation` cmdlet to get the event details on a remote computer. Before you can do this, you have to create a firewall rule to allow \nremote administration on the remote computer:\n\n```powershell\nNew-NetFirewallRule -Name \"Service RemoteAdmin\" -DisplayName \"Remote\" -Action Allow\n```\nNow you can specify that computer in your call to `Trace-xDscOperation`:\n\n```powershell\nPS C:\\DiagnosticsTest> Trace-xDscOperation -ComputerName SRV2 -Credential Get-Credential -SequenceID 5\n\nComputerName   EventType    TimeCreated           Message\n------------   ---------    -----------           -------\nSRV2   OPERATIONAL  6/24/2016 11:36:56 AM Operation Consistency Check or Pull started by user sid S-1-5-20 f...\nSRV2   ANALYTIC     6/24/2016 11:36:56 AM Deleting file from C:\\Windows\\System32\\Configuration\\DSCEngineCach...\nSRV2   OPERATIONAL  6/24/2016 11:36:56 AM Running consistency engine.\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]:                            [] Starting consistency...\nSRV2   ANALYTIC     6/24/2016 11:36:56 AM Applying configuration from C:\\Windows\\System32\\Configuration\\Curr...\nSRV2   ANALYTIC     6/24/2016 11:36:56 AM Parsing the configuration to apply.\nSRV2   OPERATIONAL  6/24/2016 11:36:56 AM  Resource execution sequence :: [WindowsFeature]DSCServiceFeature,...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]: LCM:  [ Start  Resource ]  [[WindowsFeature]DSCSer...\nSRV2   ANALYTIC     6/24/2016 11:36:56 AM Executing operations for PS DSC resource MSFT_RoleResource with re...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]: LCM:  [ Start  Test     ]  [[WindowsFeature]DSCSer...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]:                            [[WindowsFeature]DSCSer...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]:                            [[WindowsFeature]DSCSer...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]: LCM:  [ End    Test     ]  [[WindowsFeature]DSCSer...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]: LCM:  [ End    Resource ]  [[WindowsFeature]DSCSer...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]: LCM:  [ Start  Resource ]  [[xDSCWebService]PSDSCP...\nSRV2   ANALYTIC     6/24/2016 11:36:56 AM Executing operations for PS DSC resource MSFT_xDSCWebService with ...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]: LCM:  [ Start  Test     ]  [[xDSCWebService]PSDSCP...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]:                            [[xDSCWebService]PSDSCP...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]:                            [[xDSCWebService]PSDSCP...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]:                            [[xDSCWebService]PSDSCP...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]:                            [[xDSCWebService]PSDSCP...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]:                            [[xDSCWebService]PSDSCP...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]: LCM:  [ End    Test     ]  [[xDSCWebService]PSDSCP...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]: LCM:  [ End    Resource ]  [[xDSCWebService]PSDSCP...\nSRV2   VERBOSE      6/24/2016 11:36:56 AM [SRV2]:                            [] Consistency check co...\nSRV2   ANALYTIC     6/24/2016 11:36:56 AM Deleting file from C:\\Windows\\System32\\Configuration\\DSCEngineCach...\nSRV2   OPERATIONAL  6/24/2016 11:36:56 AM Consistency engine was run successfully.\nSRV2   OPERATIONAL  6/24/2016 11:36:56 AM Job runs under the following LCM setting. ...\nSRV2   OPERATIONAL  6/24/2016 11:36:56 AM Operation Consistency Check or Pull completed successfully.\nSRV2   ANALYTIC     6/24/2016 11:36:56 AM Deleting file from C:\\Windows\\System32\\Configuration\\DSCEngineCach...\n```\n\n## My resources won’t update: How to reset the cache\n\nThe DSC engine caches resources implemented as a PowerShell module for efficiency purposes. However, this can cause problems when you are authoring a resource and testing it simultaneously because DSC will load the cached version until the process is restarted. The only way to make DSC load the newer version is to explicitly kill the process hosting the DSC engine.\n\nSimilarly, when you run `Start-DscConfiguration`, after adding and modifying a custom resource, the modification may not execute unless, or until, the computer is rebooted. This is because DSC runs in the WMI Provider Host Process (WmiPrvSE), and usually, there are many instances of WmiPrvSE running at once. When you reboot, the host process is restarted and the cache is cleared.\n\nTo successfully recycle the configuration and clear the cache without rebooting, you must stop and then restart the host process. This can be done on a per instance basis, whereby you identify the process, stop it, and restart it. Or, you can use `DebugMode`, as demonstrated below, to reload the PowerShell DSC resource.\n\nTo identify which process is hosting the DSC engine and stop it on a per instance basis, you can list the process ID of the WmiPrvSE which is hosting the DSC engine. Then, to update the provider, stop the WmiPrvSE process using the commands below, and then run **Start-DscConfiguration** again.\n\n```powershell\n###\n### find the process that is hosting the DSC engine\n###\n$dscProcessID = Get-WmiObject msft_providers | \nWhere-Object {$_.provider -like 'dsccore'} | \nSelect-Object -ExpandProperty HostProcessIdentifier \n\n###\n### Stop the process\n###\nGet-Process -Id $dscProcessID | Stop-Process\n```\n\n## Using DebugMode\n\nYou can configure the DSC Local Configuration Manager (LCM) to use `DebugMode` to always clear the cache when the host process is restarted. When set to **TRUE**, it causes the engine to always reload the PowerShell DSC resource. Once you are done writing your resource, you can set it back to **FALSE** and the engine will revert to its behavior of caching the modules.\n\nFollowing is a demonstration to show how `DebugMode` can automatically refresh the cache. First, let’s look at the default configuration:\n\n```\nPS C:\\> Get-DscLocalConfigurationManager\n \n \nAllowModuleOverwrite           : False\nCertificateID                  : \nConfigurationID                : \nConfigurationMode              : ApplyAndMonitor\nConfigurationModeFrequencyMins : 30\nCredential                     : \nDebugMode                      : False\nDownloadManagerCustomData      : \nDownloadManagerName            : \nLocalConfigurationManagerState : Ready\nRebootNodeIfNeeded             : False\nRefreshFrequencyMins           : 15\nRefreshMode                    : PUSH\nPSComputerName                 :  \n```\n\nYou can see that `DebugMode` is set to **FALSE**.\n\nTo set up the `DebugMode` demonstration, use the following PowerShell resource:\n\n```powershell\nfunction Get-TargetResource\n{\n    param\n    (\n        [Parameter(Mandatory)]\n        $onlyProperty\n    )\n    return @{onlyProperty = Get-Content -Path \"$env:SystemDrive\\OutputFromTestProviderDebugMode.txt\"}\n}\nfunction Set-TargetResource\n{\n    param\n    (\n        [Parameter(Mandatory)]\n        $onlyProperty\n    )\n    \"1\" | Out-File -PSPath \"$env:SystemDrive\\OutputFromTestProviderDebugMode.txt\"\n}\nfunction Test-TargetResource\n{\n    param\n    (\n        [Parameter(Mandatory)]\n        $onlyProperty\n    )\n    return $false\n} \n```\n\nNow, author a configuration using the above resource called `TestProviderDebugMode`:\n\n```powershell\nConfiguration ConfigTestDebugMode\n{\n    Import-DscResource -Name TestProviderDebugMode\n    Node localhost\n    {\n        TestProviderDebugMode test\n        {\n            onlyProperty = \"blah\"\n        }\n    }\n}\nConfigTestDebugMode\n```\n\nYou will see that the contents of file: “**$env:SystemDrive\\OutputFromTestProviderDebugMode.txt**” is **1**.\n\nNow, update the provider code using the following script:\n\n```powershell\n$newResourceOutput = Get-Random -Minimum 5 -Maximum 30\n$content = @\"\nfunction Get-TargetResource\n{\n    param\n    (\n        [Parameter(Mandatory)]\n        `$onlyProperty\n    )\n    return @{onlyProperty = Get-Content -Path \"$env:SystemDrive\\OutputFromTestProviderDebugMode.txt\"}\n}\nfunction Set-TargetResource\n{\n    param\n    (\n        [Parameter(Mandatory)]\n        `$onlyProperty\n    )\n    \"$newResourceOutput\" | Out-File -PSPath C:\\OutputFromTestProviderDebugMode.txt\n}\nfunction Test-TargetResource\n{\n    param\n    (\n        [Parameter(Mandatory)]\n        `$onlyProperty\n    )\n    return `$false\n}\n\"@ | Out-File -FilePath \"C:\\Program Files\\WindowsPowerShell\\Modules\\MyPowerShellModules\\DSCResources\\TestProviderDebugMode\\TestProviderDebugMode.psm1\n```\n\nThis script generates a random number and updates the provider code accordingly. With `DebugMode` set to false, the contents of the file “**$env:SystemDrive\\OutputFromTestProviderDebugMode.txt**” are never changed.\n\nNow, set `DebugMode` to **TRUE** in your configuration script:\n\n```powershell\nLocalConfigurationManager\n{\n    DebugMode = $true\n} \n```\n\nWhen you run the above script again, you will see that the content of the file is different every time. (You can run `Get-DscConfiguration` to check it). Below is the result of two additional runs (your results may be different when you run the script):\n\n```powershell\nPS C:\\> Get-DscConfiguration -CimSession (New-CimSession localhost)\n \nonlyProperty                            PSComputerName                         \n------------                            --------------                         \n20                                      localhost                              \n \nPS C:\\> Get-DscConfiguration -CimSession (New-CimSession localhost)\n \nonlyProperty                            PSComputerName                         \n------------                            --------------                         \n14                                      localhost\n```\n\n## See Also\n\n### Reference\n* [DSC Log Resource](logResource.md)\n\n### Concepts\n* [Build Custom Windows PowerShell Desired State Configuration Resources](authoringResource.md)\n\n### Other Resources\n* [Windows PowerShell Desired State Configuration Cmdlets](https://technet.microsoft.com/en-us/library/dn521624(v=wps.630).aspx)\n\n"}