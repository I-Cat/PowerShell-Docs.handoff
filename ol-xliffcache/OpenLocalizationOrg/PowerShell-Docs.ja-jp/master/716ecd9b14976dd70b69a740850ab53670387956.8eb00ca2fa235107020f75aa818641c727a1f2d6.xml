{"nodes":[{"pos":[13,51],"content":"Using resources with multiple versions","needQuote":true,"nodes":[{"content":"Using resources with multiple versions","pos":[0,38]}]},{"pos":[84,98],"content":"powershell,DSC","needQuote":true,"nodes":[{"content":"powershell,DSC","pos":[0,14]}]},{"content":"Using resources with multiple versions","pos":[196,234]},{"content":"Applies To: Windows PowerShell 5.0","pos":[238,272]},{"content":"In PowerShell 5.0, DSC resources can have multiple versions, and versions can be installed on a computer side-by-side.","pos":[274,392]},{"content":"This is implemented by having multiple versions of a resource module that are contained in the same module folder.","pos":[393,507],"source":" This is implemented by having multiple versions of a resource module\nthat are contained in the same module folder."},{"content":"Installing multiple resource versions side-by-side","pos":[512,562]},{"content":"You can use the <bpt id=\"p1\">**</bpt>MinimumVersion<ept id=\"p1\">**</ept>, <bpt id=\"p2\">**</bpt>MaximumVersion<ept id=\"p2\">**</ept>, and <bpt id=\"p3\">**</bpt>RequiredVersion<ept id=\"p3\">**</ept> parameters of the <bpt id=\"p4\">[</bpt>Install-Module<ept id=\"p4\">](https://technet.microsoft.com/en-us/library/dn807162.aspx)</ept> cmdlet to specify which version of a module to install.","pos":[564,793],"source":"You can use the **MinimumVersion**, **MaximumVersion**, and **RequiredVersion** parameters of the [Install-Module](https://technet.microsoft.com/en-us/library/dn807162.aspx) cmdlet to specify\nwhich version of a module to install."},{"content":"Calling <bpt id=\"p1\">**</bpt>Install-Module<ept id=\"p1\">**</ept> without specifying a version installs the most recent version.","pos":[794,883],"source":" Calling **Install-Module** without specifying a version installs the most recent version."},{"content":"For example, there are multiple versions of the <bpt id=\"p1\">**</bpt>xFailOverCluster<ept id=\"p1\">**</ept> module, each of which contains an <bpt id=\"p2\">**</bpt>xCluster<ept id=\"p2\">**</ept> resouce.","pos":[885,1009],"source":"For example, there are multiple versions of the **xFailOverCluster** module, each of which contains an **xCluster** resouce."},{"content":"The result of calling <bpt id=\"p1\">**</bpt>Install-Module<ept id=\"p1\">**</ept> without specifying the version number is as follows:","pos":[1010,1103],"source":" The result of calling **Install-Module** without specifying the\nversion number is as follows:"},{"pos":[1614,1731],"content":"Now, if you call <bpt id=\"p1\">**</bpt>Install-Module<ept id=\"p1\">**</ept> again, but specify a <bpt id=\"p2\">**</bpt>RequiredVersion<ept id=\"p2\">**</ept> of 1.1.0.0, it results in the following:","source":"Now, if you call **Install-Module** again, but specify a **RequiredVersion** of 1.1.0.0, it results in the following:"},{"content":"Specifying a resource version in a configuration","pos":[2398,2446]},{"content":"If you have multiple resources installed on a computer, you must specify the version of that resource when you use it in a configuration.","pos":[2448,2585]},{"content":"You do this by specifying the <bpt id=\"p1\">**</bpt>ModuleVersion<ept id=\"p1\">**</ept> parameter of the <bpt id=\"p2\">**</bpt>Import-DscResource<ept id=\"p2\">**</ept> keyword.","pos":[2586,2683],"source":" You do this by specifying the **ModuleVersion** \nparameter of the **Import-DscResource** keyword."},{"content":"If you fail to specify the version of a resource module of a resource of which you have more than one version installed, the configuration generates an error.","pos":[2684,2842],"source":" If you fail to specify the version of a resource module of a resource of which you have more than one version installed, the configuration\ngenerates an error."},{"content":"The following configuration shows how to specify the version of the resource to call:","pos":[2844,2929]},{"pos":[3311,3659],"content":"Note: The ModuleVersion parameter of Import-DscResource is not available in PowerShell 4.0. In PowerShell 4.0, you can specify a module version by passing a module specification \nobject to the ModuleName parameter of Import-DscResource. A module specification object is a hash table that contains ModuleName and RequiredVersion  keys. For example:","leadings":["",">"],"nodes":[{"content":"Note: The ModuleVersion parameter of Import-DscResource is not available in PowerShell 4.0.","pos":[0,91]},{"content":"In PowerShell 4.0, you can specify a module version by passing a module specification object to the ModuleName parameter of Import-DscResource.","pos":[92,236],"source":" In PowerShell 4.0, you can specify a module version by passing a module specification \nobject to the ModuleName parameter of Import-DscResource."},{"content":"A module specification object is a hash table that contains ModuleName and RequiredVersion  keys.","pos":[237,334]},{"content":"For example:","pos":[335,347]}]},{"pos":[4063,4169],"content":"This will also work in PowerShell 5.0, but it is recommended that you use the <bpt id=\"p1\">**</bpt>ModuleVersion<ept id=\"p1\">**</ept> parameter.","source":"This will also work in PowerShell 5.0, but it is recommended that you use the **ModuleVersion** parameter."},{"content":"See also","pos":[4174,4182]},{"pos":[4185,4224],"content":"<bpt id=\"p1\">[</bpt>DSC Configurations<ept id=\"p1\">](configurations.md)</ept>","source":"[DSC Configurations](configurations.md)"},{"pos":[4227,4256],"content":"<bpt id=\"p1\">[</bpt>DSC Resources<ept id=\"p1\">](resources.md)</ept>","source":"[DSC Resources](resources.md)"}],"content":"---\ntitle:   Using resources with multiple versions\nms.date:  2016-05-16\nkeywords:  powershell,DSC\ndescription:  \nms.topic:  article\nauthor:  eslesar\nmanager:  dongill\nms.prod:  powershell\n---\n\n# Using resources with multiple versions\n\n> Applies To: Windows PowerShell 5.0\n\nIn PowerShell 5.0, DSC resources can have multiple versions, and versions can be installed on a computer side-by-side. This is implemented by having multiple versions of a resource module\nthat are contained in the same module folder.\n\n## Installing multiple resource versions side-by-side\n\nYou can use the **MinimumVersion**, **MaximumVersion**, and **RequiredVersion** parameters of the [Install-Module](https://technet.microsoft.com/en-us/library/dn807162.aspx) cmdlet to specify\nwhich version of a module to install. Calling **Install-Module** without specifying a version installs the most recent version.\n\nFor example, there are multiple versions of the **xFailOverCluster** module, each of which contains an **xCluster** resouce. The result of calling **Install-Module** without specifying the\nversion number is as follows:\n\n```powershell\nC:\\Program Files\\WindowsPowerShell\\Modules\\xFailOverCluster> Install-Module xFailOverCluster\nC:\\Program Files\\WindowsPowerShell\\Modules\\xFailOverCluster> Get-DscResource xCluster\n\nImplementedAs   Name                      ModuleName                     Version    Properties\n-------------   ----                      ----------                     -------    ----------\nPowerShell      xCluster                  xFailOverCluster               1.2.0.0    {DomainAdministratorCredential, ...\n```\n\nNow, if you call **Install-Module** again, but specify a **RequiredVersion** of 1.1.0.0, it results in the following:\n\n```powershell\nC:\\Program Files\\WindowsPowerShell\\Modules\\xFailOverCluster> Install-Module xFailOverCluster -RequiredVersion 1.1\nC:\\Program Files\\WindowsPowerShell\\Modules\\xFailOverCluster> Get-DscResource xCluster\n\nImplementedAs   Name                      ModuleName                     Version    Properties\n-------------   ----                      ----------                     -------    ----------\nPowerShell      xCluster                  xFailOverCluster               1.1        {DomainAdministratorCredential, Name, ...\nPowerShell      xCluster                  xFailOverCluster               1.2.0.0    {DomainAdministratorCredential, Name, ...\n```\n\n## Specifying a resource version in a configuration\n\nIf you have multiple resources installed on a computer, you must specify the version of that resource when you use it in a configuration. You do this by specifying the **ModuleVersion** \nparameter of the **Import-DscResource** keyword. If you fail to specify the version of a resource module of a resource of which you have more than one version installed, the configuration\ngenerates an error.\n\nThe following configuration shows how to specify the version of the resource to call:\n\n```powershell\nconfiguration VersionTest\n{\n    Import-DscResource -ModuleName xFailOverCluster -ModuleVersion 1.1\n\n    Node 'localhost'\n    {\n       xCluster ClusterTest\n       {\n            Name                          = 'TestCluster'\n            StaticIPAddress               = '10.0.0.3'\n            DomainAdministratorCredential = Get-Credential\n        }\n     }\n}     \n```\n\n>Note: The ModuleVersion parameter of Import-DscResource is not available in PowerShell 4.0. In PowerShell 4.0, you can specify a module version by passing a module specification \n>object to the ModuleName parameter of Import-DscResource. A module specification object is a hash table that contains ModuleName and RequiredVersion  keys. For example:\n\n```powershell\nconfiguration VersionTest\n{\n    Import-DscResource -ModuleName (@{ModuleName='xFailOverCluster'; RequiredVersion='1.1'} )\n\n    Node 'localhost'\n    {\n       xCluster ClusterTest\n       {\n            Name                          = 'TestCluster'\n            StaticIPAddress               = '10.0.0.3'\n            DomainAdministratorCredential = Get-Credential\n        }\n     }\n}     \n```\n\nThis will also work in PowerShell 5.0, but it is recommended that you use the **ModuleVersion** parameter.\n\n## See also\n* [DSC Configurations](configurations.md)\n* [DSC Resources](resources.md)\n\n"}