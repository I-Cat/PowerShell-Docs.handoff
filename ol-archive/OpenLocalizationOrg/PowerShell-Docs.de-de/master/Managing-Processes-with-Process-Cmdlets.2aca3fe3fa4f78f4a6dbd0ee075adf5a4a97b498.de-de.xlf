<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a635485387bb367f4e43982085f9d36765a95e5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Managing-Processes-with-Process-Cmdlets.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff540aa997fa9d6c049e3f6cd2dc27609ac63e20</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b478c61bbdf48f279c2936d78d62c7a7170df0f6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Managing Processes with Process Cmdlets</source>
          <target state="new">Managing Processes with Process Cmdlets</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="new">powershell,cmdlet</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Managing Processes with Process Cmdlets</source>
          <target state="new">Managing Processes with Process Cmdlets</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can use the Process cmdlets in Windows PowerShell to manage local and remote processes in Windows PowerShell.</source>
          <target state="new">You can use the Process cmdlets in Windows PowerShell to manage local and remote processes in Windows PowerShell.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Getting Processes (Get-Process)</source>
          <target state="new">Getting Processes (Get-Process)</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To get the processes running on the local computer, run a <bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept> with no parameters.</source>
          <target state="new">To get the processes running on the local computer, run a <bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept> with no parameters.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>You can get particular processes by specifying their process names or process IDs.</source>
          <target state="new">You can get particular processes by specifying their process names or process IDs.</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following command gets the Idle process:</source>
          <target state="new">The following command gets the Idle process:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Although it is normal for cmdlets to return no data in some situations, when you specify a process by its ProcessId, <bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept> generates an error if it finds no matches, because the usual intent is to retrieve a known running process.</source>
          <target state="new">Although it is normal for cmdlets to return no data in some situations, when you specify a process by its ProcessId, <bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept> generates an error if it finds no matches, because the usual intent is to retrieve a known running process.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If there is no process with that Id, it is likely that the Id is incorrect or that the process of interest has already exited:</source>
          <target state="new">If there is no process with that Id, it is likely that the Id is incorrect or that the process of interest has already exited:</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can use the Name parameter of the Get-Process cmdlet to specify a subset of processes based on the process name.</source>
          <target state="new">You can use the Name parameter of the Get-Process cmdlet to specify a subset of processes based on the process name.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The Name parameter can take multiple names in a comma-separated list and it supports the use of wildcards, so you can type name patterns.</source>
          <target state="new">The Name parameter can take multiple names in a comma-separated list and it supports the use of wildcards, so you can type name patterns.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example, the following command gets process whose names begin with "ex."</source>
          <target state="new">For example, the following command gets process whose names begin with "ex."</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Because the .NET System.Diagnostics.Process class is the foundation for Windows PowerShell processes, it follows some of the conventions used by System.Diagnostics.Process.</source>
          <target state="new">Because the .NET System.Diagnostics.Process class is the foundation for Windows PowerShell processes, it follows some of the conventions used by System.Diagnostics.Process.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>One of those conventions is that the process name for an executable never includes the ".exe" at the end of the executable name.</source>
          <target state="new">One of those conventions is that the process name for an executable never includes the ".exe" at the end of the executable name.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept> also accepts multiple values for the Name parameter.</source>
          <target state="new"><bpt id="p1">**</bpt>Get-Process<ept id="p1">**</ept> also accepts multiple values for the Name parameter.</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can use the ComputerName parameter of Get-Process to get processes on remote computers.</source>
          <target state="new">You can use the ComputerName parameter of Get-Process to get processes on remote computers.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For example, the following command gets the PowerShell processes on the local computer (represented by "localhost") and on two remote computers.</source>
          <target state="new">For example, the following command gets the PowerShell processes on the local computer (represented by "localhost") and on two remote computers.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The computer names are not evident in this display, but they are stored in the MachineName property of the process objects that Get-Process returns.</source>
          <target state="new">The computer names are not evident in this display, but they are stored in the MachineName property of the process objects that Get-Process returns.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following command uses the Format-Table cmdlet to display the process ID, ProcessName and MachineName (ComputerName) properties of the process objects.</source>
          <target state="new">The following command uses the Format-Table cmdlet to display the process ID, ProcessName and MachineName (ComputerName) properties of the process objects.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This more complex command adds the MachineName property to the standard Get-Process display.</source>
          <target state="new">This more complex command adds the MachineName property to the standard Get-Process display.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The backtick (\`)(ASCII 96) is the Windows PowerShell continuation character.</source>
          <target state="new">The backtick (\`)(ASCII 96) is the Windows PowerShell continuation character.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Stopping Processes (Stop-Process)</source>
          <target state="new">Stopping Processes (Stop-Process)</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Windows PowerShell gives you flexibility for listing processes, but what about stopping a process?</source>
          <target state="new">Windows PowerShell gives you flexibility for listing processes, but what about stopping a process?</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Stop-Process<ept id="p1">**</ept> cmdlet takes a Name or Id to specify a process you want to stop.</source>
          <target state="new">The <bpt id="p1">**</bpt>Stop-Process<ept id="p1">**</ept> cmdlet takes a Name or Id to specify a process you want to stop.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Your ability to stop processes depends on your permissions.</source>
          <target state="new">Your ability to stop processes depends on your permissions.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Some processes cannot be stopped.</source>
          <target state="new">Some processes cannot be stopped.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, if you try to stop the idle process, you get an error:</source>
          <target state="new">For example, if you try to stop the idle process, you get an error:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can also force prompting with the <bpt id="p1">**</bpt>Confirm<ept id="p1">**</ept> parameter.</source>
          <target state="new">You can also force prompting with the <bpt id="p1">**</bpt>Confirm<ept id="p1">**</ept> parameter.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This parameter is particularly useful if you use a wildcard when specifying the process name, because you may accidentally match some processes you do not want to stop:</source>
          <target state="new">This parameter is particularly useful if you use a wildcard when specifying the process name, because you may accidentally match some processes you do not want to stop:</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Complex process manipulation is possible by using some of the object filtering cmdlets.</source>
          <target state="new">Complex process manipulation is possible by using some of the object filtering cmdlets.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Because a Process object has a Responding property that is true when it is no longer responding, you can stop all nonresponsive applications with the following command:</source>
          <target state="new">Because a Process object has a Responding property that is true when it is no longer responding, you can stop all nonresponsive applications with the following command:</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can use the same approach in other situations.</source>
          <target state="new">You can use the same approach in other situations.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For example, suppose a secondary notification area application automatically runs when users start another application.</source>
          <target state="new">For example, suppose a secondary notification area application automatically runs when users start another application.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You may find that this does not work correctly in Terminal Services sessions, but you still want to keep it in sessions that run on the physical computer console.</source>
          <target state="new">You may find that this does not work correctly in Terminal Services sessions, but you still want to keep it in sessions that run on the physical computer console.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Sessions connected to the physical computer desktop always have a session ID of 0, so you can stop all instances of the process that are in other sessions by using <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> and the process, <bpt id="p2">**</bpt>SessionId<ept id="p2">**</ept>:</source>
          <target state="new">Sessions connected to the physical computer desktop always have a session ID of 0, so you can stop all instances of the process that are in other sessions by using <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> and the process, <bpt id="p2">**</bpt>SessionId<ept id="p2">**</ept>:</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The Stop-Process cmdlet does not have a ComputerName parameter.</source>
          <target state="new">The Stop-Process cmdlet does not have a ComputerName parameter.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Therefore, to run a stop process command on a remote computer, you need to use the Invoke-Command cmdlet.</source>
          <target state="new">Therefore, to run a stop process command on a remote computer, you need to use the Invoke-Command cmdlet.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For example, to stop the PowerShell process on the Server01 remote computer, type:</source>
          <target state="new">For example, to stop the PowerShell process on the Server01 remote computer, type:</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Stopping All Other Windows PowerShell Sessions</source>
          <target state="new">Stopping All Other Windows PowerShell Sessions</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>It may occasionally be useful to be able to stop all running Windows PowerShell sessions other than the current session.</source>
          <target state="new">It may occasionally be useful to be able to stop all running Windows PowerShell sessions other than the current session.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If a session is using too many resources or is inaccessible (it may be running remotely or in another desktop session), you may not be able to directly stop it.</source>
          <target state="new">If a session is using too many resources or is inaccessible (it may be running remotely or in another desktop session), you may not be able to directly stop it.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>If you try to stop all running sessions, however, the current session may be terminated instead.</source>
          <target state="new">If you try to stop all running sessions, however, the current session may be terminated instead.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each Windows PowerShell session has an environment variable PID that contains the Id of the Windows PowerShell process.</source>
          <target state="new">Each Windows PowerShell session has an environment variable PID that contains the Id of the Windows PowerShell process.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can check the $PID against the Id of each session and terminate only Windows PowerShell sessions that have a different Id.</source>
          <target state="new">You can check the $PID against the Id of each session and terminate only Windows PowerShell sessions that have a different Id.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following pipeline command does this and returns the list of terminated sessions (because of the use of the <bpt id="p1">**</bpt>PassThru<ept id="p1">**</ept> parameter):</source>
          <target state="new">The following pipeline command does this and returns the list of terminated sessions (because of the use of the <bpt id="p1">**</bpt>PassThru<ept id="p1">**</ept> parameter):</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Starting, Debugging, and Waiting for Processes</source>
          <target state="new">Starting, Debugging, and Waiting for Processes</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Windows PowerShell also comes with cmdlets to start (or restart), debug a process, and wait for a process to complete before running a command.</source>
          <target state="new">Windows PowerShell also comes with cmdlets to start (or restart), debug a process, and wait for a process to complete before running a command.</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For information about these cmdlets, see the cmdlet help topic for each cmdlet.</source>
          <target state="new">For information about these cmdlets, see the cmdlet help topic for each cmdlet.</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>See Also</source>
          <target state="new">See Also</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Get-Process [m2]<ept id="p1">](https://technet.microsoft.com/en-us/library/27a05dbd-4b69-48a3-8d55-b295f6225f15)</ept><ph id="ph1">
</ph><bpt id="p2">[</bpt>Stop-Process [m2]<ept id="p2">](https://technet.microsoft.com/en-us/library/12454238-9881-457a-bde4-fb6cd124deec)</ept><ph id="ph2">
</ph><bpt id="p3">[</bpt>Start-Process<ept id="p3">](https://technet.microsoft.com/en-us/library/41a7e43c-9bb3-4dc2-8b0c-f6c32962e72c)</ept><ph id="ph3">
</ph><bpt id="p4">[</bpt>Wait-Process<ept id="p4">](https://technet.microsoft.com/en-us/library/9222af7a-789d-4a09-aa90-09d7c256c799)</ept><ph id="ph4">
</ph><bpt id="p5">[</bpt>Debug-Process<ept id="p5">](https://technet.microsoft.com/en-us/library/eea1dace-3913-4dbd-b659-5a94a610eee1)</ept><ph id="ph5">
</ph><bpt id="p6">[</bpt>Invoke-Command<ept id="p6">](https://technet.microsoft.com/en-us/library/22fd98ba-1874-492e-95a5-c069467b8462)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Get-Process [m2]<ept id="p1">](https://technet.microsoft.com/en-us/library/27a05dbd-4b69-48a3-8d55-b295f6225f15)</ept><ph id="ph1">
</ph><bpt id="p2">[</bpt>Stop-Process [m2]<ept id="p2">](https://technet.microsoft.com/en-us/library/12454238-9881-457a-bde4-fb6cd124deec)</ept><ph id="ph2">
</ph><bpt id="p3">[</bpt>Start-Process<ept id="p3">](https://technet.microsoft.com/en-us/library/41a7e43c-9bb3-4dc2-8b0c-f6c32962e72c)</ept><ph id="ph3">
</ph><bpt id="p4">[</bpt>Wait-Process<ept id="p4">](https://technet.microsoft.com/en-us/library/9222af7a-789d-4a09-aa90-09d7c256c799)</ept><ph id="ph4">
</ph><bpt id="p5">[</bpt>Debug-Process<ept id="p5">](https://technet.microsoft.com/en-us/library/eea1dace-3913-4dbd-b659-5a94a610eee1)</ept><ph id="ph5">
</ph><bpt id="p6">[</bpt>Invoke-Command<ept id="p6">](https://technet.microsoft.com/en-us/library/22fd98ba-1874-492e-95a5-c069467b8462)</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>