<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-1c394fd" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39266e1e4ae2101de26277c20a98596f62cf223d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">scripting\getting-started\cookbooks\Performing-Networking-Tasks.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">46e4caf7a973e82b180ba35d2915d533085716bf</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">844957a5d33e3fda119ced05b274617243b977d0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Performing Networking Tasks</source>
          <target state="new">Performing Networking Tasks</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>powershell,cmdlet</source>
          <target state="new">powershell,cmdlet</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Performing Networking Tasks</source>
          <target state="new">Performing Networking Tasks</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Because TCP/IP is the most commonly used network protocol, most low-level network protocol administration tasks involve TCP/IP.</source>
          <target state="new">Because TCP/IP is the most commonly used network protocol, most low-level network protocol administration tasks involve TCP/IP.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In this section, we use Windows PowerShell and WMI to do these tasks.</source>
          <target state="new">In this section, we use Windows PowerShell and WMI to do these tasks.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Listing IP Addresses for a Computer</source>
          <target state="new">Listing IP Addresses for a Computer</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To get all IP addresses in use on the local computer, use the following command:</source>
          <target state="new">To get all IP addresses in use on the local computer, use the following command:</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The output of this command differs from most property lists, because values are enclosed in braces:</source>
          <target state="new">The output of this command differs from most property lists, because values are enclosed in braces:</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>IPAddress</source>
          <target state="new">IPAddress</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>{192.168.1.80} {192.168.148.1} {192.168.171.1} {0.0.0.0}</source>
          <target state="new">{192.168.1.80} {192.168.148.1} {192.168.171.1} {0.0.0.0}</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To understand why the braces appear, use the Get-Member cmdlet to examine the <bpt id="p1">**</bpt>IPAddress<ept id="p1">**</ept> property:</source>
          <target state="new">To understand why the braces appear, use the Get-Member cmdlet to examine the <bpt id="p1">**</bpt>IPAddress<ept id="p1">**</ept> property:</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>PS&gt; Get-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=TRUE -ComputerName .</source>
          <target state="new">PS&gt; Get-WmiObject -Class Win32_NetworkAdapterConfiguration -Filter IPEnabled=TRUE -ComputerName .</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>| Get-Member -Name IPAddress TypeName: System.Management.ManagementObject#root\cimv2\Win32_NetworkAdapter Configuration Name      MemberType Definition ----      ---------- ---------- IPAddress Property   System.String[] IPAddress {get;}</source>
          <target state="new">| Get-Member -Name IPAddress TypeName: System.Management.ManagementObject#root\cimv2\Win32_NetworkAdapter Configuration Name      MemberType Definition ----      ---------- ---------- IPAddress Property   System.String[] IPAddress {get;}</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The IPAddress property for each network adapter is actually an array.</source>
          <target state="new">The IPAddress property for each network adapter is actually an array.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The braces in the definition indicate that <bpt id="p1">**</bpt>IPAddress<ept id="p1">**</ept> is not a <bpt id="p2">**</bpt>System.String<ept id="p2">**</ept> value, but an array of <bpt id="p3">**</bpt>System.String<ept id="p3">**</ept> values.</source>
          <target state="new">The braces in the definition indicate that <bpt id="p1">**</bpt>IPAddress<ept id="p1">**</ept> is not a <bpt id="p2">**</bpt>System.String<ept id="p2">**</ept> value, but an array of <bpt id="p3">**</bpt>System.String<ept id="p3">**</ept> values.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Listing IP Configuration Data</source>
          <target state="new">Listing IP Configuration Data</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To display detailed IP configuration data for each network adapter, use the following command:</source>
          <target state="new">To display detailed IP configuration data for each network adapter, use the following command:</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The default display for the network adapter configuration object is a very reduced set of the available information.</source>
          <target state="new">The default display for the network adapter configuration object is a very reduced set of the available information.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For in-depth inspection and troubleshooting, use Select-Object or a formatting cmdlet, such as Format-List, to specify the properties to be displayed.</source>
          <target state="new">For in-depth inspection and troubleshooting, use Select-Object or a formatting cmdlet, such as Format-List, to specify the properties to be displayed.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you are not interested in IPX or WINS properties—probably the case in a modern TCP/IP network—you can use the ExcludeProperty parameter of Select-Object to hide properties with names that begin with "WINS" or "IPX:"</source>
          <target state="new">If you are not interested in IPX or WINS properties—probably the case in a modern TCP/IP network—you can use the ExcludeProperty parameter of Select-Object to hide properties with names that begin with "WINS" or "IPX:"</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This command returns detailed information about DHCP, DNS, routing, and other minor IP configuration properties.</source>
          <target state="new">This command returns detailed information about DHCP, DNS, routing, and other minor IP configuration properties.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Pinging Computers</source>
          <target state="new">Pinging Computers</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can perform a simple ping against a computer using by <bpt id="p1">**</bpt>Win32_PingStatus<ept id="p1">**</ept>.</source>
          <target state="new">You can perform a simple ping against a computer using by <bpt id="p1">**</bpt>Win32_PingStatus<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following command performs the ping, but returns lengthy output:</source>
          <target state="new">The following command performs the ping, but returns lengthy output:</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A more useful form for summary information a display of the Address, ResponseTime, and StatusCode properties, as generated by the following command.</source>
          <target state="new">A more useful form for summary information a display of the Address, ResponseTime, and StatusCode properties, as generated by the following command.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The Autosize parameter of Format-Table resizes the table columns so that they display properly in Windows PowerShell.</source>
          <target state="new">The Autosize parameter of Format-Table resizes the table columns so that they display properly in Windows PowerShell.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>You can use an array to ping multiple computers with a single command.</source>
          <target state="new">You can use an array to ping multiple computers with a single command.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because there is more than one address, use the <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> to ping each address separately:</source>
          <target state="new">Because there is more than one address, use the <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> to ping each address separately:</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can use the same command format to ping all of the computers on a subnet, such as a private network that uses network number 192.168.1.0 and a standard Class C subnet mask (255.255.255.0)., Only addresses in the range of 192.168.1.1 through 192.168.1.254 are legitimate local addresses (0 is always reserved for the network number and 255 is a subnet broadcast address).</source>
          <target state="new">You can use the same command format to ping all of the computers on a subnet, such as a private network that uses network number 192.168.1.0 and a standard Class C subnet mask (255.255.255.0)., Only addresses in the range of 192.168.1.1 through 192.168.1.254 are legitimate local addresses (0 is always reserved for the network number and 255 is a subnet broadcast address).</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>To represent an array of the numbers from 1 through 254 in Windows PowerShell, use the statement <bpt id="p1">**</bpt>1..254.<ept id="p1">**</ept></source>
          <target state="new">To represent an array of the numbers from 1 through 254 in Windows PowerShell, use the statement <bpt id="p1">**</bpt>1..254.<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A complete subnet ping can be performed by generating the array and then adding the values onto a partial address in the ping statement:</source>
          <target state="new">A complete subnet ping can be performed by generating the array and then adding the values onto a partial address in the ping statement:</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Note that this technique for generating a range of addresses can be used elsewhere as well.</source>
          <target state="new">Note that this technique for generating a range of addresses can be used elsewhere as well.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can generate a complete set of addresses in this way:</source>
          <target state="new">You can generate a complete set of addresses in this way:</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Retrieving Network Adapter Properties</source>
          <target state="new">Retrieving Network Adapter Properties</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Earlier in this user's guide, we mentioned that you could retrieve general configuration properties by using <bpt id="p1">**</bpt>Win32_NetworkAdapterConfiguration<ept id="p1">**</ept>.</source>
          <target state="new">Earlier in this user's guide, we mentioned that you could retrieve general configuration properties by using <bpt id="p1">**</bpt>Win32_NetworkAdapterConfiguration<ept id="p1">**</ept>.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Although not strictly TCP/IP information, network adapter information such as MAC addresses and adapter types can be useful for understanding what is going on with a computer.</source>
          <target state="new">Although not strictly TCP/IP information, network adapter information such as MAC addresses and adapter types can be useful for understanding what is going on with a computer.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To get a summary of this information, use the following command:</source>
          <target state="new">To get a summary of this information, use the following command:</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Assigning the DNS Domain for a Network Adapter</source>
          <target state="new">Assigning the DNS Domain for a Network Adapter</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To assign the DNS domain for automatic name resolution, use the <bpt id="p1">**</bpt>Win32_NetworkAdapterConfiguration SetDNSDomain<ept id="p1">**</ept> method.</source>
          <target state="new">To assign the DNS domain for automatic name resolution, use the <bpt id="p1">**</bpt>Win32_NetworkAdapterConfiguration SetDNSDomain<ept id="p1">**</ept> method.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Because you assign the DNS domain for each network adapter configuration independently, you need to use a <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> statement to assign the domain to each adapter:</source>
          <target state="new">Because you assign the DNS domain for each network adapter configuration independently, you need to use a <bpt id="p1">**</bpt>ForEach-Object<ept id="p1">**</ept> statement to assign the domain to each adapter:</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The filtering statement "IPEnabled=true" is necessary, because even on a network that uses only TCP/IP, several of the network adapter configurations on a computer are not true TCP/IP adapters; they are general software elements supporting RAS, PPTP, QoS, and other services for all adapters and thus do not have an address of their own.</source>
          <target state="new">The filtering statement "IPEnabled=true" is necessary, because even on a network that uses only TCP/IP, several of the network adapter configurations on a computer are not true TCP/IP adapters; they are general software elements supporting RAS, PPTP, QoS, and other services for all adapters and thus do not have an address of their own.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You can filter the command by using the <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet, instead of using the <bpt id="p2">**</bpt>Get-WmiObject<ept id="p2">**</ept> filter.</source>
          <target state="new">You can filter the command by using the <bpt id="p1">**</bpt>Where-Object<ept id="p1">**</ept> cmdlet, instead of using the <bpt id="p2">**</bpt>Get-WmiObject<ept id="p2">**</ept> filter.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Performing DHCP Configuration Tasks</source>
          <target state="new">Performing DHCP Configuration Tasks</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Modifying DHCP details involves working with a set of network adapters, just as the DNS configuration does.</source>
          <target state="new">Modifying DHCP details involves working with a set of network adapters, just as the DNS configuration does.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>There are several distinct actions you can perform by using WMI, and we will step through a few of the common ones.</source>
          <target state="new">There are several distinct actions you can perform by using WMI, and we will step through a few of the common ones.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Determining DHCP-Enabled Adapters</source>
          <target state="new">Determining DHCP-Enabled Adapters</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>To find the DHCP-enabled adapters on a computer, use the following command:</source>
          <target state="new">To find the DHCP-enabled adapters on a computer, use the following command:</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To exclude adapters with IP configuration problems, you can retrieve only IP-enabled adapters:</source>
          <target state="new">To exclude adapters with IP configuration problems, you can retrieve only IP-enabled adapters:</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Retrieving DHCP Properties</source>
          <target state="new">Retrieving DHCP Properties</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Because DHCP-related properties for an adapter generally begin with "DHCP," you can use the Property parameter of Format-Table to display only those properties:</source>
          <target state="new">Because DHCP-related properties for an adapter generally begin with "DHCP," you can use the Property parameter of Format-Table to display only those properties:</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Enabling DHCP on Each Adapter</source>
          <target state="new">Enabling DHCP on Each Adapter</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>To enable DHCP on all adapters, use the following command:</source>
          <target state="new">To enable DHCP on all adapters, use the following command:</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can use the <bpt id="p1">**</bpt>Filter<ept id="p1">**</ept> statement "IPEnabled=true and DHCPEnabled=false" to avoid enabling DHCP where it is already enabled, but omitting this step will not cause errors.</source>
          <target state="new">You can use the <bpt id="p1">**</bpt>Filter<ept id="p1">**</ept> statement "IPEnabled=true and DHCPEnabled=false" to avoid enabling DHCP where it is already enabled, but omitting this step will not cause errors.</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Releasing and Renewing DHCP Leases on Specific Adapters</source>
          <target state="new">Releasing and Renewing DHCP Leases on Specific Adapters</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Win32_NetworkAdapterConfiguration<ept id="p1">**</ept> class has <bpt id="p2">**</bpt>ReleaseDHCPLease<ept id="p2">**</ept> and <bpt id="p3">**</bpt>RenewDHCPLease<ept id="p3">**</ept> methods.</source>
          <target state="new">The <bpt id="p1">**</bpt>Win32_NetworkAdapterConfiguration<ept id="p1">**</ept> class has <bpt id="p2">**</bpt>ReleaseDHCPLease<ept id="p2">**</ept> and <bpt id="p3">**</bpt>RenewDHCPLease<ept id="p3">**</ept> methods.</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Both are used in the same way.</source>
          <target state="new">Both are used in the same way.</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In general, use these methods if you only need to release or renew addresses for an adapter on a specific subnet.</source>
          <target state="new">In general, use these methods if you only need to release or renew addresses for an adapter on a specific subnet.</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The easiest way to filter adapters on a subnet is to choose only the adapter configurations that use the gateway for that subnet.</source>
          <target state="new">The easiest way to filter adapters on a subnet is to choose only the adapter configurations that use the gateway for that subnet.</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>For example, the following command releases all DHCP leases on adapters on the local computer that are obtaining DHCP leases from 192.168.1.254:</source>
          <target state="new">For example, the following command releases all DHCP leases on adapters on the local computer that are obtaining DHCP leases from 192.168.1.254:</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The only change for renewing a DHCP lease is to use the <bpt id="p1">**</bpt>RenewDHCPLease<ept id="p1">**</ept> method instead of the <bpt id="p2">**</bpt>ReleaseDHCPLease<ept id="p2">**</ept> method:</source>
          <target state="new">The only change for renewing a DHCP lease is to use the <bpt id="p1">**</bpt>RenewDHCPLease<ept id="p1">**</ept> method instead of the <bpt id="p2">**</bpt>ReleaseDHCPLease<ept id="p2">**</ept> method:</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>When using these methods on a remote computer, be aware that you can lose access to the remote system if you are connected to it through the adapter with the released or renewed lease.</source>
          <target state="new">When using these methods on a remote computer, be aware that you can lose access to the remote system if you are connected to it through the adapter with the released or renewed lease.</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Releasing and Renewing DHCP Leases on All Adapters</source>
          <target state="new">Releasing and Renewing DHCP Leases on All Adapters</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can perform global DHCP address releases or renewals on all adapters by using the <bpt id="p1">**</bpt>Win32_NetworkAdapterConfiguration<ept id="p1">**</ept> methods, <bpt id="p2">**</bpt>ReleaseDHCPLeaseAll<ept id="p2">**</ept> and <bpt id="p3">**</bpt>RenewDHCPLeaseAll<ept id="p3">**</ept>.</source>
          <target state="new">You can perform global DHCP address releases or renewals on all adapters by using the <bpt id="p1">**</bpt>Win32_NetworkAdapterConfiguration<ept id="p1">**</ept> methods, <bpt id="p2">**</bpt>ReleaseDHCPLeaseAll<ept id="p2">**</ept> and <bpt id="p3">**</bpt>RenewDHCPLeaseAll<ept id="p3">**</ept>.</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>However, the command must apply to the WMI class, rather than a particular adapter, because releasing and renewing leases globally is performed on the class, not on a specific adapter.</source>
          <target state="new">However, the command must apply to the WMI class, rather than a particular adapter, because releasing and renewing leases globally is performed on the class, not on a specific adapter.</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You can get a reference to a WMI class, instead of class instances, by listing all WMI classes and then selecting only the desired class by name.</source>
          <target state="new">You can get a reference to a WMI class, instead of class instances, by listing all WMI classes and then selecting only the desired class by name.</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>For example, the following command returns the Win32_NetworkAdapterConfiguration class:</source>
          <target state="new">For example, the following command returns the Win32_NetworkAdapterConfiguration class:</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can treat the entire command as the class and then invoke the <bpt id="p1">**</bpt>ReleaseDHCPAdapterLease<ept id="p1">**</ept> method on it.</source>
          <target state="new">You can treat the entire command as the class and then invoke the <bpt id="p1">**</bpt>ReleaseDHCPAdapterLease<ept id="p1">**</ept> method on it.</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the following command, the parentheses surrounding the <bpt id="p1">**</bpt>Get-WmiObject<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Where-Object<ept id="p2">**</ept> pipeline elements direct Windows PowerShell to evaluate them first:</source>
          <target state="new">In the following command, the parentheses surrounding the <bpt id="p1">**</bpt>Get-WmiObject<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Where-Object<ept id="p2">**</ept> pipeline elements direct Windows PowerShell to evaluate them first:</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>You can use the same command format to invoke the <bpt id="p1">**</bpt>RenewDHCPLeaseAll<ept id="p1">**</ept> method:</source>
          <target state="new">You can use the same command format to invoke the <bpt id="p1">**</bpt>RenewDHCPLeaseAll<ept id="p1">**</ept> method:</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Creating a Network Share</source>
          <target state="new">Creating a Network Share</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>To create a network share, use the <bpt id="p1">**</bpt>Win32_Share Create<ept id="p1">**</ept> method:</source>
          <target state="new">To create a network share, use the <bpt id="p1">**</bpt>Win32_Share Create<ept id="p1">**</ept> method:</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can also create the share by using <bpt id="p1">**</bpt>net share<ept id="p1">**</ept> in Windows PowerShell:</source>
          <target state="new">You can also create the share by using <bpt id="p1">**</bpt>net share<ept id="p1">**</ept> in Windows PowerShell:</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Removing a Network Share</source>
          <target state="new">Removing a Network Share</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>You can remove a network share with <bpt id="p1">**</bpt>Win32_Share<ept id="p1">**</ept>, but the process is slightly different from creating a share, because you need to retrieve the specific share to be removed, rather than the <bpt id="p2">**</bpt>Win32_Share<ept id="p2">**</ept> class.</source>
          <target state="new">You can remove a network share with <bpt id="p1">**</bpt>Win32_Share<ept id="p1">**</ept>, but the process is slightly different from creating a share, because you need to retrieve the specific share to be removed, rather than the <bpt id="p2">**</bpt>Win32_Share<ept id="p2">**</ept> class.</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The following statement deletes the share "TempShare":</source>
          <target state="new">The following statement deletes the share "TempShare":</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Net share<ept id="p1">**</ept> works as well:</source>
          <target state="new"><bpt id="p1">**</bpt>Net share<ept id="p1">**</ept> works as well:</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Connecting a Windows Accessible Network Drive</source>
          <target state="new">Connecting a Windows Accessible Network Drive</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New-PSDrive<ept id="p1">**</ept> cmdlets creates a Windows PowerShell drive, but drives created this way are available only to Windows PowerShell.</source>
          <target state="new">The <bpt id="p1">**</bpt>New-PSDrive<ept id="p1">**</ept> cmdlets creates a Windows PowerShell drive, but drives created this way are available only to Windows PowerShell.</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>To create a new networked drive, you can use the <bpt id="p1">**</bpt>WScript.Network<ept id="p1">**</ept> COM object.</source>
          <target state="new">To create a new networked drive, you can use the <bpt id="p1">**</bpt>WScript.Network<ept id="p1">**</ept> COM object.</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The following command maps the share \\\\FPS01\\users to local drive B:</source>
          <target state="new">The following command maps the share \\\\FPS01\\users to local drive B:</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>net use<ept id="p1">**</ept> command works as well:</source>
          <target state="new">The <bpt id="p1">**</bpt>net use<ept id="p1">**</ept> command works as well:</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Drives mapped with either <bpt id="p1">**</bpt>WScript.Network<ept id="p1">**</ept> or net use are immediately available to Windows PowerShell.</source>
          <target state="new">Drives mapped with either <bpt id="p1">**</bpt>WScript.Network<ept id="p1">**</ept> or net use are immediately available to Windows PowerShell.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>